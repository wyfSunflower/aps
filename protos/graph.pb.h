// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_graph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_graph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_2eproto;
namespace graph {
class edge;
struct edgeDefaultTypeInternal;
extern edgeDefaultTypeInternal _edge_default_instance_;
class vertex;
struct vertexDefaultTypeInternal;
extern vertexDefaultTypeInternal _vertex_default_instance_;
}  // namespace graph
PROTOBUF_NAMESPACE_OPEN
template<> ::graph::edge* Arena::CreateMaybeMessage<::graph::edge>(Arena*);
template<> ::graph::vertex* Arena::CreateMaybeMessage<::graph::vertex>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace graph {

// ===================================================================

class edge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph.edge) */ {
 public:
  inline edge() : edge(nullptr) {}
  ~edge() override;
  explicit PROTOBUF_CONSTEXPR edge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  edge(const edge& from);
  edge(edge&& from) noexcept
    : edge() {
    *this = ::std::move(from);
  }

  inline edge& operator=(const edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline edge& operator=(edge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const edge& default_instance() {
    return *internal_default_instance();
  }
  static inline const edge* internal_default_instance() {
    return reinterpret_cast<const edge*>(
               &_edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(edge& a, edge& b) {
    a.Swap(&b);
  }
  inline void Swap(edge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<edge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const edge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const edge& from) {
    edge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(edge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph.edge";
  }
  protected:
  explicit edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 4,
    kYFieldNumber = 5,
    kZFieldNumber = 6,
    kEdgeidFieldNumber = 1,
    kStartidFieldNumber = 2,
    kEndidFieldNumber = 3,
    kZsameFieldNumber = 7,
    kTypeFieldNumber = 8,
    kTheta1FieldNumber = 9,
    kTheta2FieldNumber = 10,
  };
  // repeated int32 x = 4;
  int x_size() const;
  private:
  int _internal_x_size() const;
  public:
  void clear_x();
  private:
  int32_t _internal_x(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_x() const;
  void _internal_add_x(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_x();
  public:
  int32_t x(int index) const;
  void set_x(int index, int32_t value);
  void add_x(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      x() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_x();

  // repeated int32 y = 5;
  int y_size() const;
  private:
  int _internal_y_size() const;
  public:
  void clear_y();
  private:
  int32_t _internal_y(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_y() const;
  void _internal_add_y(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_y();
  public:
  int32_t y(int index) const;
  void set_y(int index, int32_t value);
  void add_y(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      y() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_y();

  // repeated int32 z = 6;
  int z_size() const;
  private:
  int _internal_z_size() const;
  public:
  void clear_z();
  private:
  int32_t _internal_z(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_z() const;
  void _internal_add_z(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_z();
  public:
  int32_t z(int index) const;
  void set_z(int index, int32_t value);
  void add_z(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      z() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_z();

  // uint32 edgeid = 1;
  void clear_edgeid();
  uint32_t edgeid() const;
  void set_edgeid(uint32_t value);
  private:
  uint32_t _internal_edgeid() const;
  void _internal_set_edgeid(uint32_t value);
  public:

  // uint32 startid = 2;
  void clear_startid();
  uint32_t startid() const;
  void set_startid(uint32_t value);
  private:
  uint32_t _internal_startid() const;
  void _internal_set_startid(uint32_t value);
  public:

  // uint32 endid = 3;
  void clear_endid();
  uint32_t endid() const;
  void set_endid(uint32_t value);
  private:
  uint32_t _internal_endid() const;
  void _internal_set_endid(uint32_t value);
  public:

  // int32 zsame = 7;
  void clear_zsame();
  int32_t zsame() const;
  void set_zsame(int32_t value);
  private:
  int32_t _internal_zsame() const;
  void _internal_set_zsame(int32_t value);
  public:

  // uint32 type = 8;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // int32 theta1 = 9;
  void clear_theta1();
  int32_t theta1() const;
  void set_theta1(int32_t value);
  private:
  int32_t _internal_theta1() const;
  void _internal_set_theta1(int32_t value);
  public:

  // int32 theta2 = 10;
  void clear_theta2();
  int32_t theta2() const;
  void set_theta2(int32_t value);
  private:
  int32_t _internal_theta2() const;
  void _internal_set_theta2(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:graph.edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > x_;
    mutable std::atomic<int> _x_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > y_;
    mutable std::atomic<int> _y_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > z_;
    mutable std::atomic<int> _z_cached_byte_size_;
    uint32_t edgeid_;
    uint32_t startid_;
    uint32_t endid_;
    int32_t zsame_;
    uint32_t type_;
    int32_t theta1_;
    int32_t theta2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class vertex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph.vertex) */ {
 public:
  inline vertex() : vertex(nullptr) {}
  ~vertex() override;
  explicit PROTOBUF_CONSTEXPR vertex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  vertex(const vertex& from);
  vertex(vertex&& from) noexcept
    : vertex() {
    *this = ::std::move(from);
  }

  inline vertex& operator=(const vertex& from) {
    CopyFrom(from);
    return *this;
  }
  inline vertex& operator=(vertex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const vertex& default_instance() {
    return *internal_default_instance();
  }
  static inline const vertex* internal_default_instance() {
    return reinterpret_cast<const vertex*>(
               &_vertex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(vertex& a, vertex& b) {
    a.Swap(&b);
  }
  inline void Swap(vertex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(vertex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  vertex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<vertex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const vertex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const vertex& from) {
    vertex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(vertex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph.vertex";
  }
  protected:
  explicit vertex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEFieldNumber = 7,
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kLayeridFieldNumber = 5,
    kTypeFieldNumber = 6,
  };
  // repeated .graph.edge e = 7;
  int e_size() const;
  private:
  int _internal_e_size() const;
  public:
  void clear_e();
  ::graph::edge* mutable_e(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::edge >*
      mutable_e();
  private:
  const ::graph::edge& _internal_e(int index) const;
  ::graph::edge* _internal_add_e();
  public:
  const ::graph::edge& e(int index) const;
  ::graph::edge* add_e();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::edge >&
      e() const;

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 z = 4;
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // uint32 layerid = 5;
  void clear_layerid();
  uint32_t layerid() const;
  void set_layerid(uint32_t value);
  private:
  uint32_t _internal_layerid() const;
  void _internal_set_layerid(uint32_t value);
  public:

  // uint32 type = 6;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:graph.vertex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::edge > e_;
    uint32_t id_;
    int32_t x_;
    int32_t y_;
    int32_t z_;
    uint32_t layerid_;
    uint32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// edge

// uint32 edgeid = 1;
inline void edge::clear_edgeid() {
  _impl_.edgeid_ = 0u;
}
inline uint32_t edge::_internal_edgeid() const {
  return _impl_.edgeid_;
}
inline uint32_t edge::edgeid() const {
  // @@protoc_insertion_point(field_get:graph.edge.edgeid)
  return _internal_edgeid();
}
inline void edge::_internal_set_edgeid(uint32_t value) {
  
  _impl_.edgeid_ = value;
}
inline void edge::set_edgeid(uint32_t value) {
  _internal_set_edgeid(value);
  // @@protoc_insertion_point(field_set:graph.edge.edgeid)
}

// uint32 startid = 2;
inline void edge::clear_startid() {
  _impl_.startid_ = 0u;
}
inline uint32_t edge::_internal_startid() const {
  return _impl_.startid_;
}
inline uint32_t edge::startid() const {
  // @@protoc_insertion_point(field_get:graph.edge.startid)
  return _internal_startid();
}
inline void edge::_internal_set_startid(uint32_t value) {
  
  _impl_.startid_ = value;
}
inline void edge::set_startid(uint32_t value) {
  _internal_set_startid(value);
  // @@protoc_insertion_point(field_set:graph.edge.startid)
}

// uint32 endid = 3;
inline void edge::clear_endid() {
  _impl_.endid_ = 0u;
}
inline uint32_t edge::_internal_endid() const {
  return _impl_.endid_;
}
inline uint32_t edge::endid() const {
  // @@protoc_insertion_point(field_get:graph.edge.endid)
  return _internal_endid();
}
inline void edge::_internal_set_endid(uint32_t value) {
  
  _impl_.endid_ = value;
}
inline void edge::set_endid(uint32_t value) {
  _internal_set_endid(value);
  // @@protoc_insertion_point(field_set:graph.edge.endid)
}

// repeated int32 x = 4;
inline int edge::_internal_x_size() const {
  return _impl_.x_.size();
}
inline int edge::x_size() const {
  return _internal_x_size();
}
inline void edge::clear_x() {
  _impl_.x_.Clear();
}
inline int32_t edge::_internal_x(int index) const {
  return _impl_.x_.Get(index);
}
inline int32_t edge::x(int index) const {
  // @@protoc_insertion_point(field_get:graph.edge.x)
  return _internal_x(index);
}
inline void edge::set_x(int index, int32_t value) {
  _impl_.x_.Set(index, value);
  // @@protoc_insertion_point(field_set:graph.edge.x)
}
inline void edge::_internal_add_x(int32_t value) {
  _impl_.x_.Add(value);
}
inline void edge::add_x(int32_t value) {
  _internal_add_x(value);
  // @@protoc_insertion_point(field_add:graph.edge.x)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
edge::_internal_x() const {
  return _impl_.x_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
edge::x() const {
  // @@protoc_insertion_point(field_list:graph.edge.x)
  return _internal_x();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
edge::_internal_mutable_x() {
  return &_impl_.x_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
edge::mutable_x() {
  // @@protoc_insertion_point(field_mutable_list:graph.edge.x)
  return _internal_mutable_x();
}

// repeated int32 y = 5;
inline int edge::_internal_y_size() const {
  return _impl_.y_.size();
}
inline int edge::y_size() const {
  return _internal_y_size();
}
inline void edge::clear_y() {
  _impl_.y_.Clear();
}
inline int32_t edge::_internal_y(int index) const {
  return _impl_.y_.Get(index);
}
inline int32_t edge::y(int index) const {
  // @@protoc_insertion_point(field_get:graph.edge.y)
  return _internal_y(index);
}
inline void edge::set_y(int index, int32_t value) {
  _impl_.y_.Set(index, value);
  // @@protoc_insertion_point(field_set:graph.edge.y)
}
inline void edge::_internal_add_y(int32_t value) {
  _impl_.y_.Add(value);
}
inline void edge::add_y(int32_t value) {
  _internal_add_y(value);
  // @@protoc_insertion_point(field_add:graph.edge.y)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
edge::_internal_y() const {
  return _impl_.y_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
edge::y() const {
  // @@protoc_insertion_point(field_list:graph.edge.y)
  return _internal_y();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
edge::_internal_mutable_y() {
  return &_impl_.y_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
edge::mutable_y() {
  // @@protoc_insertion_point(field_mutable_list:graph.edge.y)
  return _internal_mutable_y();
}

// repeated int32 z = 6;
inline int edge::_internal_z_size() const {
  return _impl_.z_.size();
}
inline int edge::z_size() const {
  return _internal_z_size();
}
inline void edge::clear_z() {
  _impl_.z_.Clear();
}
inline int32_t edge::_internal_z(int index) const {
  return _impl_.z_.Get(index);
}
inline int32_t edge::z(int index) const {
  // @@protoc_insertion_point(field_get:graph.edge.z)
  return _internal_z(index);
}
inline void edge::set_z(int index, int32_t value) {
  _impl_.z_.Set(index, value);
  // @@protoc_insertion_point(field_set:graph.edge.z)
}
inline void edge::_internal_add_z(int32_t value) {
  _impl_.z_.Add(value);
}
inline void edge::add_z(int32_t value) {
  _internal_add_z(value);
  // @@protoc_insertion_point(field_add:graph.edge.z)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
edge::_internal_z() const {
  return _impl_.z_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
edge::z() const {
  // @@protoc_insertion_point(field_list:graph.edge.z)
  return _internal_z();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
edge::_internal_mutable_z() {
  return &_impl_.z_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
edge::mutable_z() {
  // @@protoc_insertion_point(field_mutable_list:graph.edge.z)
  return _internal_mutable_z();
}

// int32 zsame = 7;
inline void edge::clear_zsame() {
  _impl_.zsame_ = 0;
}
inline int32_t edge::_internal_zsame() const {
  return _impl_.zsame_;
}
inline int32_t edge::zsame() const {
  // @@protoc_insertion_point(field_get:graph.edge.zsame)
  return _internal_zsame();
}
inline void edge::_internal_set_zsame(int32_t value) {
  
  _impl_.zsame_ = value;
}
inline void edge::set_zsame(int32_t value) {
  _internal_set_zsame(value);
  // @@protoc_insertion_point(field_set:graph.edge.zsame)
}

// uint32 type = 8;
inline void edge::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t edge::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t edge::type() const {
  // @@protoc_insertion_point(field_get:graph.edge.type)
  return _internal_type();
}
inline void edge::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void edge::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:graph.edge.type)
}

// int32 theta1 = 9;
inline void edge::clear_theta1() {
  _impl_.theta1_ = 0;
}
inline int32_t edge::_internal_theta1() const {
  return _impl_.theta1_;
}
inline int32_t edge::theta1() const {
  // @@protoc_insertion_point(field_get:graph.edge.theta1)
  return _internal_theta1();
}
inline void edge::_internal_set_theta1(int32_t value) {
  
  _impl_.theta1_ = value;
}
inline void edge::set_theta1(int32_t value) {
  _internal_set_theta1(value);
  // @@protoc_insertion_point(field_set:graph.edge.theta1)
}

// int32 theta2 = 10;
inline void edge::clear_theta2() {
  _impl_.theta2_ = 0;
}
inline int32_t edge::_internal_theta2() const {
  return _impl_.theta2_;
}
inline int32_t edge::theta2() const {
  // @@protoc_insertion_point(field_get:graph.edge.theta2)
  return _internal_theta2();
}
inline void edge::_internal_set_theta2(int32_t value) {
  
  _impl_.theta2_ = value;
}
inline void edge::set_theta2(int32_t value) {
  _internal_set_theta2(value);
  // @@protoc_insertion_point(field_set:graph.edge.theta2)
}

// -------------------------------------------------------------------

// vertex

// uint32 id = 1;
inline void vertex::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t vertex::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t vertex::id() const {
  // @@protoc_insertion_point(field_get:graph.vertex.id)
  return _internal_id();
}
inline void vertex::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void vertex::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:graph.vertex.id)
}

// int32 x = 2;
inline void vertex::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t vertex::_internal_x() const {
  return _impl_.x_;
}
inline int32_t vertex::x() const {
  // @@protoc_insertion_point(field_get:graph.vertex.x)
  return _internal_x();
}
inline void vertex::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void vertex::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:graph.vertex.x)
}

// int32 y = 3;
inline void vertex::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t vertex::_internal_y() const {
  return _impl_.y_;
}
inline int32_t vertex::y() const {
  // @@protoc_insertion_point(field_get:graph.vertex.y)
  return _internal_y();
}
inline void vertex::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void vertex::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:graph.vertex.y)
}

// int32 z = 4;
inline void vertex::clear_z() {
  _impl_.z_ = 0;
}
inline int32_t vertex::_internal_z() const {
  return _impl_.z_;
}
inline int32_t vertex::z() const {
  // @@protoc_insertion_point(field_get:graph.vertex.z)
  return _internal_z();
}
inline void vertex::_internal_set_z(int32_t value) {
  
  _impl_.z_ = value;
}
inline void vertex::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:graph.vertex.z)
}

// uint32 layerid = 5;
inline void vertex::clear_layerid() {
  _impl_.layerid_ = 0u;
}
inline uint32_t vertex::_internal_layerid() const {
  return _impl_.layerid_;
}
inline uint32_t vertex::layerid() const {
  // @@protoc_insertion_point(field_get:graph.vertex.layerid)
  return _internal_layerid();
}
inline void vertex::_internal_set_layerid(uint32_t value) {
  
  _impl_.layerid_ = value;
}
inline void vertex::set_layerid(uint32_t value) {
  _internal_set_layerid(value);
  // @@protoc_insertion_point(field_set:graph.vertex.layerid)
}

// uint32 type = 6;
inline void vertex::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t vertex::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t vertex::type() const {
  // @@protoc_insertion_point(field_get:graph.vertex.type)
  return _internal_type();
}
inline void vertex::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void vertex::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:graph.vertex.type)
}

// repeated .graph.edge e = 7;
inline int vertex::_internal_e_size() const {
  return _impl_.e_.size();
}
inline int vertex::e_size() const {
  return _internal_e_size();
}
inline void vertex::clear_e() {
  _impl_.e_.Clear();
}
inline ::graph::edge* vertex::mutable_e(int index) {
  // @@protoc_insertion_point(field_mutable:graph.vertex.e)
  return _impl_.e_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::edge >*
vertex::mutable_e() {
  // @@protoc_insertion_point(field_mutable_list:graph.vertex.e)
  return &_impl_.e_;
}
inline const ::graph::edge& vertex::_internal_e(int index) const {
  return _impl_.e_.Get(index);
}
inline const ::graph::edge& vertex::e(int index) const {
  // @@protoc_insertion_point(field_get:graph.vertex.e)
  return _internal_e(index);
}
inline ::graph::edge* vertex::_internal_add_e() {
  return _impl_.e_.Add();
}
inline ::graph::edge* vertex::add_e() {
  ::graph::edge* _add = _internal_add_e();
  // @@protoc_insertion_point(field_add:graph.vertex.e)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph::edge >&
vertex::e() const {
  // @@protoc_insertion_point(field_list:graph.vertex.e)
  return _impl_.e_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
