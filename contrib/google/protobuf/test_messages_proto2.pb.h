// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/test_messages_proto2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
namespace protobuf_test_messages {
namespace proto2 {
class EnumOnlyProto2;
struct EnumOnlyProto2DefaultTypeInternal;
extern EnumOnlyProto2DefaultTypeInternal _EnumOnlyProto2_default_instance_;
class ForeignMessageProto2;
struct ForeignMessageProto2DefaultTypeInternal;
extern ForeignMessageProto2DefaultTypeInternal _ForeignMessageProto2_default_instance_;
class NullHypothesisProto2;
struct NullHypothesisProto2DefaultTypeInternal;
extern NullHypothesisProto2DefaultTypeInternal _NullHypothesisProto2_default_instance_;
class OneStringProto2;
struct OneStringProto2DefaultTypeInternal;
extern OneStringProto2DefaultTypeInternal _OneStringProto2_default_instance_;
class TestAllTypesProto2;
struct TestAllTypesProto2DefaultTypeInternal;
extern TestAllTypesProto2DefaultTypeInternal _TestAllTypesProto2_default_instance_;
class TestAllTypesProto2_Data;
struct TestAllTypesProto2_DataDefaultTypeInternal;
extern TestAllTypesProto2_DataDefaultTypeInternal _TestAllTypesProto2_Data_default_instance_;
class TestAllTypesProto2_MapBoolBoolEntry_DoNotUse;
struct TestAllTypesProto2_MapBoolBoolEntry_DoNotUseDefaultTypeInternal;
extern TestAllTypesProto2_MapBoolBoolEntry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapBoolBoolEntry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse;
struct TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUseDefaultTypeInternal;
extern TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse;
struct TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUseDefaultTypeInternal;
extern TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse;
struct TestAllTypesProto2_MapInt32DoubleEntry_DoNotUseDefaultTypeInternal;
extern TestAllTypesProto2_MapInt32DoubleEntry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapInt32FloatEntry_DoNotUse;
struct TestAllTypesProto2_MapInt32FloatEntry_DoNotUseDefaultTypeInternal;
extern TestAllTypesProto2_MapInt32FloatEntry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapInt32FloatEntry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapInt32Int32Entry_DoNotUse;
struct TestAllTypesProto2_MapInt32Int32Entry_DoNotUseDefaultTypeInternal;
extern TestAllTypesProto2_MapInt32Int32Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapInt32Int32Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapInt64Int64Entry_DoNotUse;
struct TestAllTypesProto2_MapInt64Int64Entry_DoNotUseDefaultTypeInternal;
extern TestAllTypesProto2_MapInt64Int64Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapInt64Int64Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse;
struct TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUseDefaultTypeInternal;
extern TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse;
struct TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUseDefaultTypeInternal;
extern TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse;
struct TestAllTypesProto2_MapSint32Sint32Entry_DoNotUseDefaultTypeInternal;
extern TestAllTypesProto2_MapSint32Sint32Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse;
struct TestAllTypesProto2_MapSint64Sint64Entry_DoNotUseDefaultTypeInternal;
extern TestAllTypesProto2_MapSint64Sint64Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapStringBytesEntry_DoNotUse;
struct TestAllTypesProto2_MapStringBytesEntry_DoNotUseDefaultTypeInternal;
extern TestAllTypesProto2_MapStringBytesEntry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapStringBytesEntry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse;
struct TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUseDefaultTypeInternal;
extern TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse;
struct TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUseDefaultTypeInternal;
extern TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse;
struct TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUseDefaultTypeInternal;
extern TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse;
struct TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUseDefaultTypeInternal;
extern TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapStringStringEntry_DoNotUse;
struct TestAllTypesProto2_MapStringStringEntry_DoNotUseDefaultTypeInternal;
extern TestAllTypesProto2_MapStringStringEntry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapStringStringEntry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse;
struct TestAllTypesProto2_MapUint32Uint32Entry_DoNotUseDefaultTypeInternal;
extern TestAllTypesProto2_MapUint32Uint32Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse;
struct TestAllTypesProto2_MapUint64Uint64Entry_DoNotUseDefaultTypeInternal;
extern TestAllTypesProto2_MapUint64Uint64Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse_default_instance_;
class TestAllTypesProto2_MessageSetCorrect;
struct TestAllTypesProto2_MessageSetCorrectDefaultTypeInternal;
extern TestAllTypesProto2_MessageSetCorrectDefaultTypeInternal _TestAllTypesProto2_MessageSetCorrect_default_instance_;
class TestAllTypesProto2_MessageSetCorrectExtension1;
struct TestAllTypesProto2_MessageSetCorrectExtension1DefaultTypeInternal;
extern TestAllTypesProto2_MessageSetCorrectExtension1DefaultTypeInternal _TestAllTypesProto2_MessageSetCorrectExtension1_default_instance_;
class TestAllTypesProto2_MessageSetCorrectExtension2;
struct TestAllTypesProto2_MessageSetCorrectExtension2DefaultTypeInternal;
extern TestAllTypesProto2_MessageSetCorrectExtension2DefaultTypeInternal _TestAllTypesProto2_MessageSetCorrectExtension2_default_instance_;
class TestAllTypesProto2_NestedMessage;
struct TestAllTypesProto2_NestedMessageDefaultTypeInternal;
extern TestAllTypesProto2_NestedMessageDefaultTypeInternal _TestAllTypesProto2_NestedMessage_default_instance_;
class UnknownToTestAllTypes;
struct UnknownToTestAllTypesDefaultTypeInternal;
extern UnknownToTestAllTypesDefaultTypeInternal _UnknownToTestAllTypes_default_instance_;
class UnknownToTestAllTypes_OptionalGroup;
struct UnknownToTestAllTypes_OptionalGroupDefaultTypeInternal;
extern UnknownToTestAllTypes_OptionalGroupDefaultTypeInternal _UnknownToTestAllTypes_OptionalGroup_default_instance_;
}  // namespace proto2
}  // namespace protobuf_test_messages
PROTOBUF_NAMESPACE_OPEN
template<> ::protobuf_test_messages::proto2::EnumOnlyProto2* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::EnumOnlyProto2>(Arena*);
template<> ::protobuf_test_messages::proto2::ForeignMessageProto2* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::ForeignMessageProto2>(Arena*);
template<> ::protobuf_test_messages::proto2::NullHypothesisProto2* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::NullHypothesisProto2>(Arena*);
template<> ::protobuf_test_messages::proto2::OneStringProto2* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::OneStringProto2>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_Data* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_Data>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2>(Arena*);
template<> ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage>(Arena*);
template<> ::protobuf_test_messages::proto2::UnknownToTestAllTypes* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::UnknownToTestAllTypes>(Arena*);
template<> ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup* Arena::CreateMaybeMessage<::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf_test_messages {
namespace proto2 {

enum TestAllTypesProto2_NestedEnum : int {
  TestAllTypesProto2_NestedEnum_FOO = 0,
  TestAllTypesProto2_NestedEnum_BAR = 1,
  TestAllTypesProto2_NestedEnum_BAZ = 2,
  TestAllTypesProto2_NestedEnum_NEG = -1
};
bool TestAllTypesProto2_NestedEnum_IsValid(int value);
constexpr TestAllTypesProto2_NestedEnum TestAllTypesProto2_NestedEnum_NestedEnum_MIN = TestAllTypesProto2_NestedEnum_NEG;
constexpr TestAllTypesProto2_NestedEnum TestAllTypesProto2_NestedEnum_NestedEnum_MAX = TestAllTypesProto2_NestedEnum_BAZ;
constexpr int TestAllTypesProto2_NestedEnum_NestedEnum_ARRAYSIZE = TestAllTypesProto2_NestedEnum_NestedEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestAllTypesProto2_NestedEnum_descriptor();
template<typename T>
inline const std::string& TestAllTypesProto2_NestedEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestAllTypesProto2_NestedEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestAllTypesProto2_NestedEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestAllTypesProto2_NestedEnum_descriptor(), enum_t_value);
}
inline bool TestAllTypesProto2_NestedEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TestAllTypesProto2_NestedEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestAllTypesProto2_NestedEnum>(
    TestAllTypesProto2_NestedEnum_descriptor(), name, value);
}
enum EnumOnlyProto2_Bool : int {
  EnumOnlyProto2_Bool_kFalse = 0,
  EnumOnlyProto2_Bool_kTrue = 1
};
bool EnumOnlyProto2_Bool_IsValid(int value);
constexpr EnumOnlyProto2_Bool EnumOnlyProto2_Bool_Bool_MIN = EnumOnlyProto2_Bool_kFalse;
constexpr EnumOnlyProto2_Bool EnumOnlyProto2_Bool_Bool_MAX = EnumOnlyProto2_Bool_kTrue;
constexpr int EnumOnlyProto2_Bool_Bool_ARRAYSIZE = EnumOnlyProto2_Bool_Bool_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnumOnlyProto2_Bool_descriptor();
template<typename T>
inline const std::string& EnumOnlyProto2_Bool_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EnumOnlyProto2_Bool>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EnumOnlyProto2_Bool_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EnumOnlyProto2_Bool_descriptor(), enum_t_value);
}
inline bool EnumOnlyProto2_Bool_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EnumOnlyProto2_Bool* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnumOnlyProto2_Bool>(
    EnumOnlyProto2_Bool_descriptor(), name, value);
}
enum ForeignEnumProto2 : int {
  FOREIGN_FOO = 0,
  FOREIGN_BAR = 1,
  FOREIGN_BAZ = 2
};
bool ForeignEnumProto2_IsValid(int value);
constexpr ForeignEnumProto2 ForeignEnumProto2_MIN = FOREIGN_FOO;
constexpr ForeignEnumProto2 ForeignEnumProto2_MAX = FOREIGN_BAZ;
constexpr int ForeignEnumProto2_ARRAYSIZE = ForeignEnumProto2_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ForeignEnumProto2_descriptor();
template<typename T>
inline const std::string& ForeignEnumProto2_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ForeignEnumProto2>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ForeignEnumProto2_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ForeignEnumProto2_descriptor(), enum_t_value);
}
inline bool ForeignEnumProto2_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ForeignEnumProto2* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ForeignEnumProto2>(
    ForeignEnumProto2_descriptor(), name, value);
}
// ===================================================================

class TestAllTypesProto2_NestedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage) */ {
 public:
  inline TestAllTypesProto2_NestedMessage() : TestAllTypesProto2_NestedMessage(nullptr) {}
  ~TestAllTypesProto2_NestedMessage() override;
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_NestedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestAllTypesProto2_NestedMessage(const TestAllTypesProto2_NestedMessage& from);
  TestAllTypesProto2_NestedMessage(TestAllTypesProto2_NestedMessage&& from) noexcept
    : TestAllTypesProto2_NestedMessage() {
    *this = ::std::move(from);
  }

  inline TestAllTypesProto2_NestedMessage& operator=(const TestAllTypesProto2_NestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAllTypesProto2_NestedMessage& operator=(TestAllTypesProto2_NestedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestAllTypesProto2_NestedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestAllTypesProto2_NestedMessage* internal_default_instance() {
    return reinterpret_cast<const TestAllTypesProto2_NestedMessage*>(
               &_TestAllTypesProto2_NestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestAllTypesProto2_NestedMessage& a, TestAllTypesProto2_NestedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAllTypesProto2_NestedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestAllTypesProto2_NestedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestAllTypesProto2_NestedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestAllTypesProto2_NestedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestAllTypesProto2_NestedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestAllTypesProto2_NestedMessage& from) {
    TestAllTypesProto2_NestedMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestAllTypesProto2_NestedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage";
  }
  protected:
  explicit TestAllTypesProto2_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCorecursiveFieldNumber = 2,
    kAFieldNumber = 1,
  };
  // optional .protobuf_test_messages.proto2.TestAllTypesProto2 corecursive = 2;
  bool has_corecursive() const;
  private:
  bool _internal_has_corecursive() const;
  public:
  void clear_corecursive();
  const ::protobuf_test_messages::proto2::TestAllTypesProto2& corecursive() const;
  PROTOBUF_NODISCARD ::protobuf_test_messages::proto2::TestAllTypesProto2* release_corecursive();
  ::protobuf_test_messages::proto2::TestAllTypesProto2* mutable_corecursive();
  void set_allocated_corecursive(::protobuf_test_messages::proto2::TestAllTypesProto2* corecursive);
  private:
  const ::protobuf_test_messages::proto2::TestAllTypesProto2& _internal_corecursive() const;
  ::protobuf_test_messages::proto2::TestAllTypesProto2* _internal_mutable_corecursive();
  public:
  void unsafe_arena_set_allocated_corecursive(
      ::protobuf_test_messages::proto2::TestAllTypesProto2* corecursive);
  ::protobuf_test_messages::proto2::TestAllTypesProto2* unsafe_arena_release_corecursive();

  // optional int32 a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::protobuf_test_messages::proto2::TestAllTypesProto2* corecursive_;
    int32_t a_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};
// -------------------------------------------------------------------

class TestAllTypesProto2_MapInt32Int32Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapInt32Int32Entry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapInt32Int32Entry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  TestAllTypesProto2_MapInt32Int32Entry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MapInt32Int32Entry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestAllTypesProto2_MapInt32Int32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestAllTypesProto2_MapInt32Int32Entry_DoNotUse& other);
  static const TestAllTypesProto2_MapInt32Int32Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestAllTypesProto2_MapInt32Int32Entry_DoNotUse*>(&_TestAllTypesProto2_MapInt32Int32Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};

// -------------------------------------------------------------------

class TestAllTypesProto2_MapInt64Int64Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapInt64Int64Entry_DoNotUse, 
    int64_t, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapInt64Int64Entry_DoNotUse, 
    int64_t, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> SuperType;
  TestAllTypesProto2_MapInt64Int64Entry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MapInt64Int64Entry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestAllTypesProto2_MapInt64Int64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestAllTypesProto2_MapInt64Int64Entry_DoNotUse& other);
  static const TestAllTypesProto2_MapInt64Int64Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestAllTypesProto2_MapInt64Int64Entry_DoNotUse*>(&_TestAllTypesProto2_MapInt64Int64Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};

// -------------------------------------------------------------------

class TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse& other);
  static const TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse*>(&_TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};

// -------------------------------------------------------------------

class TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse, 
    uint64_t, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse, 
    uint64_t, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> SuperType;
  TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse& other);
  static const TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse*>(&_TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};

// -------------------------------------------------------------------

class TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32> SuperType;
  TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse& other);
  static const TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse*>(&_TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};

// -------------------------------------------------------------------

class TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse, 
    int64_t, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse, 
    int64_t, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT64> SuperType;
  TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse& other);
  static const TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse*>(&_TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};

// -------------------------------------------------------------------

class TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse, 
    uint32_t, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32> SuperType;
  TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse& other);
  static const TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse*>(&_TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};

// -------------------------------------------------------------------

class TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse, 
    uint64_t, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse, 
    uint64_t, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64> SuperType;
  TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse& other);
  static const TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse*>(&_TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};

// -------------------------------------------------------------------

class TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SFIXED32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SFIXED32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SFIXED32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SFIXED32> SuperType;
  TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse& other);
  static const TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse*>(&_TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};

// -------------------------------------------------------------------

class TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse, 
    int64_t, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SFIXED64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SFIXED64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse, 
    int64_t, int64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SFIXED64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SFIXED64> SuperType;
  TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse& other);
  static const TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse*>(&_TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};

// -------------------------------------------------------------------

class TestAllTypesProto2_MapInt32FloatEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapInt32FloatEntry_DoNotUse, 
    int32_t, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapInt32FloatEntry_DoNotUse, 
    int32_t, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> SuperType;
  TestAllTypesProto2_MapInt32FloatEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MapInt32FloatEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestAllTypesProto2_MapInt32FloatEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestAllTypesProto2_MapInt32FloatEntry_DoNotUse& other);
  static const TestAllTypesProto2_MapInt32FloatEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestAllTypesProto2_MapInt32FloatEntry_DoNotUse*>(&_TestAllTypesProto2_MapInt32FloatEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};

// -------------------------------------------------------------------

class TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse, 
    int32_t, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse, 
    int32_t, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> SuperType;
  TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse& other);
  static const TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse*>(&_TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};

// -------------------------------------------------------------------

class TestAllTypesProto2_MapBoolBoolEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapBoolBoolEntry_DoNotUse, 
    bool, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapBoolBoolEntry_DoNotUse, 
    bool, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> SuperType;
  TestAllTypesProto2_MapBoolBoolEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MapBoolBoolEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestAllTypesProto2_MapBoolBoolEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestAllTypesProto2_MapBoolBoolEntry_DoNotUse& other);
  static const TestAllTypesProto2_MapBoolBoolEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestAllTypesProto2_MapBoolBoolEntry_DoNotUse*>(&_TestAllTypesProto2_MapBoolBoolEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};

// -------------------------------------------------------------------

class TestAllTypesProto2_MapStringStringEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapStringStringEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapStringStringEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  TestAllTypesProto2_MapStringStringEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MapStringStringEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestAllTypesProto2_MapStringStringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestAllTypesProto2_MapStringStringEntry_DoNotUse& other);
  static const TestAllTypesProto2_MapStringStringEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestAllTypesProto2_MapStringStringEntry_DoNotUse*>(&_TestAllTypesProto2_MapStringStringEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringStringEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringStringEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};

// -------------------------------------------------------------------

class TestAllTypesProto2_MapStringBytesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapStringBytesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapStringBytesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> SuperType;
  TestAllTypesProto2_MapStringBytesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MapStringBytesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestAllTypesProto2_MapStringBytesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestAllTypesProto2_MapStringBytesEntry_DoNotUse& other);
  static const TestAllTypesProto2_MapStringBytesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestAllTypesProto2_MapStringBytesEntry_DoNotUse*>(&_TestAllTypesProto2_MapStringBytesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringBytesEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};

// -------------------------------------------------------------------

class TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse, 
    std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse, 
    std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse& other);
  static const TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse*>(&_TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringNestedMessageEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};

// -------------------------------------------------------------------

class TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse, 
    std::string, ::protobuf_test_messages::proto2::ForeignMessageProto2,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse, 
    std::string, ::protobuf_test_messages::proto2::ForeignMessageProto2,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse& other);
  static const TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse*>(&_TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringForeignMessageEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};

// -------------------------------------------------------------------

class TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse, 
    std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse, 
    std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> SuperType;
  TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse& other);
  static const TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse*>(&_TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringNestedEnumEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};

// -------------------------------------------------------------------

class TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse, 
    std::string, ::protobuf_test_messages::proto2::ForeignEnumProto2,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse, 
    std::string, ::protobuf_test_messages::proto2::ForeignEnumProto2,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> SuperType;
  TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse& other);
  static const TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse*>(&_TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringForeignEnumEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};

// -------------------------------------------------------------------

class TestAllTypesProto2_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_test_messages.proto2.TestAllTypesProto2.Data) */ {
 public:
  inline TestAllTypesProto2_Data() : TestAllTypesProto2_Data(nullptr) {}
  ~TestAllTypesProto2_Data() override;
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestAllTypesProto2_Data(const TestAllTypesProto2_Data& from);
  TestAllTypesProto2_Data(TestAllTypesProto2_Data&& from) noexcept
    : TestAllTypesProto2_Data() {
    *this = ::std::move(from);
  }

  inline TestAllTypesProto2_Data& operator=(const TestAllTypesProto2_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAllTypesProto2_Data& operator=(TestAllTypesProto2_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestAllTypesProto2_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestAllTypesProto2_Data* internal_default_instance() {
    return reinterpret_cast<const TestAllTypesProto2_Data*>(
               &_TestAllTypesProto2_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(TestAllTypesProto2_Data& a, TestAllTypesProto2_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAllTypesProto2_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestAllTypesProto2_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestAllTypesProto2_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestAllTypesProto2_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestAllTypesProto2_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestAllTypesProto2_Data& from) {
    TestAllTypesProto2_Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestAllTypesProto2_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_test_messages.proto2.TestAllTypesProto2.Data";
  }
  protected:
  explicit TestAllTypesProto2_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupInt32FieldNumber = 202,
    kGroupUint32FieldNumber = 203,
  };
  // optional int32 group_int32 = 202;
  bool has_group_int32() const;
  private:
  bool _internal_has_group_int32() const;
  public:
  void clear_group_int32();
  int32_t group_int32() const;
  void set_group_int32(int32_t value);
  private:
  int32_t _internal_group_int32() const;
  void _internal_set_group_int32(int32_t value);
  public:

  // optional uint32 group_uint32 = 203;
  bool has_group_uint32() const;
  private:
  bool _internal_has_group_uint32() const;
  public:
  void clear_group_uint32();
  uint32_t group_uint32() const;
  void set_group_uint32(uint32_t value);
  private:
  uint32_t _internal_group_uint32() const;
  void _internal_set_group_uint32(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t group_int32_;
    uint32_t group_uint32_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};
// -------------------------------------------------------------------

class TestAllTypesProto2_MessageSetCorrect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect) */ {
 public:
  inline TestAllTypesProto2_MessageSetCorrect() : TestAllTypesProto2_MessageSetCorrect(nullptr) {}
  ~TestAllTypesProto2_MessageSetCorrect() override;
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MessageSetCorrect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestAllTypesProto2_MessageSetCorrect(const TestAllTypesProto2_MessageSetCorrect& from);
  TestAllTypesProto2_MessageSetCorrect(TestAllTypesProto2_MessageSetCorrect&& from) noexcept
    : TestAllTypesProto2_MessageSetCorrect() {
    *this = ::std::move(from);
  }

  inline TestAllTypesProto2_MessageSetCorrect& operator=(const TestAllTypesProto2_MessageSetCorrect& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAllTypesProto2_MessageSetCorrect& operator=(TestAllTypesProto2_MessageSetCorrect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestAllTypesProto2_MessageSetCorrect& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestAllTypesProto2_MessageSetCorrect* internal_default_instance() {
    return reinterpret_cast<const TestAllTypesProto2_MessageSetCorrect*>(
               &_TestAllTypesProto2_MessageSetCorrect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TestAllTypesProto2_MessageSetCorrect& a, TestAllTypesProto2_MessageSetCorrect& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAllTypesProto2_MessageSetCorrect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestAllTypesProto2_MessageSetCorrect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestAllTypesProto2_MessageSetCorrect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestAllTypesProto2_MessageSetCorrect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestAllTypesProto2_MessageSetCorrect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestAllTypesProto2_MessageSetCorrect& from) {
    TestAllTypesProto2_MessageSetCorrect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestAllTypesProto2_MessageSetCorrect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect";
  }
  protected:
  explicit TestAllTypesProto2_MessageSetCorrect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2_MessageSetCorrect, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2_MessageSetCorrect, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2_MessageSetCorrect, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2_MessageSetCorrect, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2_MessageSetCorrect, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2_MessageSetCorrect, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2_MessageSetCorrect, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2_MessageSetCorrect, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              TestAllTypesProto2_MessageSetCorrect, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2_MessageSetCorrect, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2_MessageSetCorrect, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2_MessageSetCorrect, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2_MessageSetCorrect, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2_MessageSetCorrect, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2_MessageSetCorrect, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2_MessageSetCorrect, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2_MessageSetCorrect, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }

  // @@protoc_insertion_point(class_scope:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};
// -------------------------------------------------------------------

class TestAllTypesProto2_MessageSetCorrectExtension1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1) */ {
 public:
  inline TestAllTypesProto2_MessageSetCorrectExtension1() : TestAllTypesProto2_MessageSetCorrectExtension1(nullptr) {}
  ~TestAllTypesProto2_MessageSetCorrectExtension1() override;
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MessageSetCorrectExtension1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestAllTypesProto2_MessageSetCorrectExtension1(const TestAllTypesProto2_MessageSetCorrectExtension1& from);
  TestAllTypesProto2_MessageSetCorrectExtension1(TestAllTypesProto2_MessageSetCorrectExtension1&& from) noexcept
    : TestAllTypesProto2_MessageSetCorrectExtension1() {
    *this = ::std::move(from);
  }

  inline TestAllTypesProto2_MessageSetCorrectExtension1& operator=(const TestAllTypesProto2_MessageSetCorrectExtension1& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAllTypesProto2_MessageSetCorrectExtension1& operator=(TestAllTypesProto2_MessageSetCorrectExtension1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestAllTypesProto2_MessageSetCorrectExtension1& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestAllTypesProto2_MessageSetCorrectExtension1* internal_default_instance() {
    return reinterpret_cast<const TestAllTypesProto2_MessageSetCorrectExtension1*>(
               &_TestAllTypesProto2_MessageSetCorrectExtension1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TestAllTypesProto2_MessageSetCorrectExtension1& a, TestAllTypesProto2_MessageSetCorrectExtension1& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAllTypesProto2_MessageSetCorrectExtension1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestAllTypesProto2_MessageSetCorrectExtension1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestAllTypesProto2_MessageSetCorrectExtension1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestAllTypesProto2_MessageSetCorrectExtension1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestAllTypesProto2_MessageSetCorrectExtension1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestAllTypesProto2_MessageSetCorrectExtension1& from) {
    TestAllTypesProto2_MessageSetCorrectExtension1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestAllTypesProto2_MessageSetCorrectExtension1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1";
  }
  protected:
  explicit TestAllTypesProto2_MessageSetCorrectExtension1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 25,
  };
  // optional string str = 25;
  bool has_str() const;
  private:
  bool _internal_has_str() const;
  public:
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  static const int kMessageSetExtensionFieldNumber = 1547769;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1 >, 11, false >
    message_set_extension;
  // @@protoc_insertion_point(class_scope:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};
// -------------------------------------------------------------------

class TestAllTypesProto2_MessageSetCorrectExtension2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2) */ {
 public:
  inline TestAllTypesProto2_MessageSetCorrectExtension2() : TestAllTypesProto2_MessageSetCorrectExtension2(nullptr) {}
  ~TestAllTypesProto2_MessageSetCorrectExtension2() override;
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2_MessageSetCorrectExtension2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestAllTypesProto2_MessageSetCorrectExtension2(const TestAllTypesProto2_MessageSetCorrectExtension2& from);
  TestAllTypesProto2_MessageSetCorrectExtension2(TestAllTypesProto2_MessageSetCorrectExtension2&& from) noexcept
    : TestAllTypesProto2_MessageSetCorrectExtension2() {
    *this = ::std::move(from);
  }

  inline TestAllTypesProto2_MessageSetCorrectExtension2& operator=(const TestAllTypesProto2_MessageSetCorrectExtension2& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAllTypesProto2_MessageSetCorrectExtension2& operator=(TestAllTypesProto2_MessageSetCorrectExtension2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestAllTypesProto2_MessageSetCorrectExtension2& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestAllTypesProto2_MessageSetCorrectExtension2* internal_default_instance() {
    return reinterpret_cast<const TestAllTypesProto2_MessageSetCorrectExtension2*>(
               &_TestAllTypesProto2_MessageSetCorrectExtension2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TestAllTypesProto2_MessageSetCorrectExtension2& a, TestAllTypesProto2_MessageSetCorrectExtension2& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAllTypesProto2_MessageSetCorrectExtension2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestAllTypesProto2_MessageSetCorrectExtension2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestAllTypesProto2_MessageSetCorrectExtension2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestAllTypesProto2_MessageSetCorrectExtension2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestAllTypesProto2_MessageSetCorrectExtension2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestAllTypesProto2_MessageSetCorrectExtension2& from) {
    TestAllTypesProto2_MessageSetCorrectExtension2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestAllTypesProto2_MessageSetCorrectExtension2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2";
  }
  protected:
  explicit TestAllTypesProto2_MessageSetCorrectExtension2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIFieldNumber = 9,
  };
  // optional int32 i = 9;
  bool has_i() const;
  private:
  bool _internal_has_i() const;
  public:
  void clear_i();
  int32_t i() const;
  void set_i(int32_t value);
  private:
  int32_t _internal_i() const;
  void _internal_set_i(int32_t value);
  public:

  static const int kMessageSetExtensionFieldNumber = 4135312;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2 >, 11, false >
    message_set_extension;
  // @@protoc_insertion_point(class_scope:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t i_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};
// -------------------------------------------------------------------

class TestAllTypesProto2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_test_messages.proto2.TestAllTypesProto2) */ {
 public:
  inline TestAllTypesProto2() : TestAllTypesProto2(nullptr) {}
  ~TestAllTypesProto2() override;
  explicit PROTOBUF_CONSTEXPR TestAllTypesProto2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestAllTypesProto2(const TestAllTypesProto2& from);
  TestAllTypesProto2(TestAllTypesProto2&& from) noexcept
    : TestAllTypesProto2() {
    *this = ::std::move(from);
  }

  inline TestAllTypesProto2& operator=(const TestAllTypesProto2& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestAllTypesProto2& operator=(TestAllTypesProto2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestAllTypesProto2& default_instance() {
    return *internal_default_instance();
  }
  enum OneofFieldCase {
    kOneofUint32 = 111,
    kOneofNestedMessage = 112,
    kOneofString = 113,
    kOneofBytes = 114,
    kOneofBool = 115,
    kOneofUint64 = 116,
    kOneofFloat = 117,
    kOneofDouble = 118,
    kOneofEnum = 119,
    ONEOF_FIELD_NOT_SET = 0,
  };

  static inline const TestAllTypesProto2* internal_default_instance() {
    return reinterpret_cast<const TestAllTypesProto2*>(
               &_TestAllTypesProto2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(TestAllTypesProto2& a, TestAllTypesProto2& b) {
    a.Swap(&b);
  }
  inline void Swap(TestAllTypesProto2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestAllTypesProto2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestAllTypesProto2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestAllTypesProto2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestAllTypesProto2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestAllTypesProto2& from) {
    TestAllTypesProto2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestAllTypesProto2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_test_messages.proto2.TestAllTypesProto2";
  }
  protected:
  explicit TestAllTypesProto2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestAllTypesProto2_NestedMessage NestedMessage;
  typedef TestAllTypesProto2_Data Data;
  typedef TestAllTypesProto2_MessageSetCorrect MessageSetCorrect;
  typedef TestAllTypesProto2_MessageSetCorrectExtension1 MessageSetCorrectExtension1;
  typedef TestAllTypesProto2_MessageSetCorrectExtension2 MessageSetCorrectExtension2;

  typedef TestAllTypesProto2_NestedEnum NestedEnum;
  static constexpr NestedEnum FOO =
    TestAllTypesProto2_NestedEnum_FOO;
  static constexpr NestedEnum BAR =
    TestAllTypesProto2_NestedEnum_BAR;
  static constexpr NestedEnum BAZ =
    TestAllTypesProto2_NestedEnum_BAZ;
  static constexpr NestedEnum NEG =
    TestAllTypesProto2_NestedEnum_NEG;
  static inline bool NestedEnum_IsValid(int value) {
    return TestAllTypesProto2_NestedEnum_IsValid(value);
  }
  static constexpr NestedEnum NestedEnum_MIN =
    TestAllTypesProto2_NestedEnum_NestedEnum_MIN;
  static constexpr NestedEnum NestedEnum_MAX =
    TestAllTypesProto2_NestedEnum_NestedEnum_MAX;
  static constexpr int NestedEnum_ARRAYSIZE =
    TestAllTypesProto2_NestedEnum_NestedEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NestedEnum_descriptor() {
    return TestAllTypesProto2_NestedEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& NestedEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NestedEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NestedEnum_Name.");
    return TestAllTypesProto2_NestedEnum_Name(enum_t_value);
  }
  static inline bool NestedEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      NestedEnum* value) {
    return TestAllTypesProto2_NestedEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedInt32FieldNumber = 31,
    kRepeatedInt64FieldNumber = 32,
    kRepeatedUint32FieldNumber = 33,
    kRepeatedUint64FieldNumber = 34,
    kRepeatedSint32FieldNumber = 35,
    kRepeatedSint64FieldNumber = 36,
    kRepeatedFixed32FieldNumber = 37,
    kRepeatedFixed64FieldNumber = 38,
    kRepeatedSfixed32FieldNumber = 39,
    kRepeatedSfixed64FieldNumber = 40,
    kRepeatedFloatFieldNumber = 41,
    kRepeatedDoubleFieldNumber = 42,
    kRepeatedBoolFieldNumber = 43,
    kRepeatedStringFieldNumber = 44,
    kRepeatedBytesFieldNumber = 45,
    kRepeatedNestedMessageFieldNumber = 48,
    kRepeatedForeignMessageFieldNumber = 49,
    kRepeatedNestedEnumFieldNumber = 51,
    kRepeatedForeignEnumFieldNumber = 52,
    kRepeatedStringPieceFieldNumber = 54,
    kRepeatedCordFieldNumber = 55,
    kMapInt32Int32FieldNumber = 56,
    kMapInt64Int64FieldNumber = 57,
    kMapUint32Uint32FieldNumber = 58,
    kMapUint64Uint64FieldNumber = 59,
    kMapSint32Sint32FieldNumber = 60,
    kMapSint64Sint64FieldNumber = 61,
    kMapFixed32Fixed32FieldNumber = 62,
    kMapFixed64Fixed64FieldNumber = 63,
    kMapSfixed32Sfixed32FieldNumber = 64,
    kMapSfixed64Sfixed64FieldNumber = 65,
    kMapInt32FloatFieldNumber = 66,
    kMapInt32DoubleFieldNumber = 67,
    kMapBoolBoolFieldNumber = 68,
    kMapStringStringFieldNumber = 69,
    kMapStringBytesFieldNumber = 70,
    kMapStringNestedMessageFieldNumber = 71,
    kMapStringForeignMessageFieldNumber = 72,
    kMapStringNestedEnumFieldNumber = 73,
    kMapStringForeignEnumFieldNumber = 74,
    kPackedInt32FieldNumber = 75,
    kPackedInt64FieldNumber = 76,
    kPackedUint32FieldNumber = 77,
    kPackedUint64FieldNumber = 78,
    kPackedSint32FieldNumber = 79,
    kPackedSint64FieldNumber = 80,
    kPackedFixed32FieldNumber = 81,
    kPackedFixed64FieldNumber = 82,
    kPackedSfixed32FieldNumber = 83,
    kPackedSfixed64FieldNumber = 84,
    kPackedFloatFieldNumber = 85,
    kPackedDoubleFieldNumber = 86,
    kPackedBoolFieldNumber = 87,
    kPackedNestedEnumFieldNumber = 88,
    kUnpackedInt32FieldNumber = 89,
    kUnpackedInt64FieldNumber = 90,
    kUnpackedUint32FieldNumber = 91,
    kUnpackedUint64FieldNumber = 92,
    kUnpackedSint32FieldNumber = 93,
    kUnpackedSint64FieldNumber = 94,
    kUnpackedFixed32FieldNumber = 95,
    kUnpackedFixed64FieldNumber = 96,
    kUnpackedSfixed32FieldNumber = 97,
    kUnpackedSfixed64FieldNumber = 98,
    kUnpackedFloatFieldNumber = 99,
    kUnpackedDoubleFieldNumber = 100,
    kUnpackedBoolFieldNumber = 101,
    kUnpackedNestedEnumFieldNumber = 102,
    kOptionalStringFieldNumber = 14,
    kOptionalBytesFieldNumber = 15,
    kOptionalStringPieceFieldNumber = 24,
    kOptionalCordFieldNumber = 25,
    kDefaultStringFieldNumber = 254,
    kDefaultBytesFieldNumber = 255,
    kOptionalNestedMessageFieldNumber = 18,
    kOptionalForeignMessageFieldNumber = 19,
    kRecursiveMessageFieldNumber = 27,
    kDataFieldNumber = 201,
    kOptionalInt64FieldNumber = 2,
    kOptionalInt32FieldNumber = 1,
    kOptionalUint32FieldNumber = 3,
    kOptionalUint64FieldNumber = 4,
    kOptionalSint64FieldNumber = 6,
    kOptionalSint32FieldNumber = 5,
    kOptionalFixed32FieldNumber = 7,
    kOptionalFixed64FieldNumber = 8,
    kOptionalSfixed64FieldNumber = 10,
    kOptionalSfixed32FieldNumber = 9,
    kOptionalFloatFieldNumber = 11,
    kOptionalDoubleFieldNumber = 12,
    kOptionalBoolFieldNumber = 13,
    kOptionalNestedEnumFieldNumber = 21,
    kOptionalForeignEnumFieldNumber = 22,
    kFieldname1FieldNumber = 401,
    kFieldName2FieldNumber = 402,
    kFieldName3FieldNumber = 403,
    kFieldName4FieldNumber = 404,
    kField0Name5FieldNumber = 405,
    kField0Name6FieldNumber = 406,
    kFieldName7FieldNumber = 407,
    kFieldName8FieldNumber = 408,
    kFieldName9FieldNumber = 409,
    kFieldName10FieldNumber = 410,
    kFIELDNAME11FieldNumber = 411,
    kFIELDName12FieldNumber = 412,
    kFieldName13FieldNumber = 413,
    kFieldName14FieldNumber = 414,
    kFieldName15FieldNumber = 415,
    kFieldName16FieldNumber = 416,
    kFieldName17FieldNumber = 417,
    kFieldName18FieldNumber = 418,
    kDefaultBoolFieldNumber = 253,
    kDefaultInt64FieldNumber = 242,
    kDefaultInt32FieldNumber = 241,
    kDefaultUint32FieldNumber = 243,
    kDefaultUint64FieldNumber = 244,
    kDefaultSint64FieldNumber = 246,
    kDefaultSint32FieldNumber = 245,
    kDefaultFixed32FieldNumber = 247,
    kDefaultFixed64FieldNumber = 248,
    kDefaultSfixed64FieldNumber = 250,
    kDefaultSfixed32FieldNumber = 249,
    kDefaultFloatFieldNumber = 251,
    kDefaultDoubleFieldNumber = 252,
    kOneofUint32FieldNumber = 111,
    kOneofNestedMessageFieldNumber = 112,
    kOneofStringFieldNumber = 113,
    kOneofBytesFieldNumber = 114,
    kOneofBoolFieldNumber = 115,
    kOneofUint64FieldNumber = 116,
    kOneofFloatFieldNumber = 117,
    kOneofDoubleFieldNumber = 118,
    kOneofEnumFieldNumber = 119,
  };
  // repeated int32 repeated_int32 = 31;
  int repeated_int32_size() const;
  private:
  int _internal_repeated_int32_size() const;
  public:
  void clear_repeated_int32();
  private:
  int32_t _internal_repeated_int32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_repeated_int32() const;
  void _internal_add_repeated_int32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_repeated_int32();
  public:
  int32_t repeated_int32(int index) const;
  void set_repeated_int32(int index, int32_t value);
  void add_repeated_int32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      repeated_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_repeated_int32();

  // repeated int64 repeated_int64 = 32;
  int repeated_int64_size() const;
  private:
  int _internal_repeated_int64_size() const;
  public:
  void clear_repeated_int64();
  private:
  int64_t _internal_repeated_int64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_repeated_int64() const;
  void _internal_add_repeated_int64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_repeated_int64();
  public:
  int64_t repeated_int64(int index) const;
  void set_repeated_int64(int index, int64_t value);
  void add_repeated_int64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      repeated_int64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_repeated_int64();

  // repeated uint32 repeated_uint32 = 33;
  int repeated_uint32_size() const;
  private:
  int _internal_repeated_uint32_size() const;
  public:
  void clear_repeated_uint32();
  private:
  uint32_t _internal_repeated_uint32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_repeated_uint32() const;
  void _internal_add_repeated_uint32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_repeated_uint32();
  public:
  uint32_t repeated_uint32(int index) const;
  void set_repeated_uint32(int index, uint32_t value);
  void add_repeated_uint32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      repeated_uint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_repeated_uint32();

  // repeated uint64 repeated_uint64 = 34;
  int repeated_uint64_size() const;
  private:
  int _internal_repeated_uint64_size() const;
  public:
  void clear_repeated_uint64();
  private:
  uint64_t _internal_repeated_uint64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_repeated_uint64() const;
  void _internal_add_repeated_uint64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_repeated_uint64();
  public:
  uint64_t repeated_uint64(int index) const;
  void set_repeated_uint64(int index, uint64_t value);
  void add_repeated_uint64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      repeated_uint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_repeated_uint64();

  // repeated sint32 repeated_sint32 = 35;
  int repeated_sint32_size() const;
  private:
  int _internal_repeated_sint32_size() const;
  public:
  void clear_repeated_sint32();
  private:
  int32_t _internal_repeated_sint32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_repeated_sint32() const;
  void _internal_add_repeated_sint32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_repeated_sint32();
  public:
  int32_t repeated_sint32(int index) const;
  void set_repeated_sint32(int index, int32_t value);
  void add_repeated_sint32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      repeated_sint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_repeated_sint32();

  // repeated sint64 repeated_sint64 = 36;
  int repeated_sint64_size() const;
  private:
  int _internal_repeated_sint64_size() const;
  public:
  void clear_repeated_sint64();
  private:
  int64_t _internal_repeated_sint64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_repeated_sint64() const;
  void _internal_add_repeated_sint64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_repeated_sint64();
  public:
  int64_t repeated_sint64(int index) const;
  void set_repeated_sint64(int index, int64_t value);
  void add_repeated_sint64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      repeated_sint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_repeated_sint64();

  // repeated fixed32 repeated_fixed32 = 37;
  int repeated_fixed32_size() const;
  private:
  int _internal_repeated_fixed32_size() const;
  public:
  void clear_repeated_fixed32();
  private:
  uint32_t _internal_repeated_fixed32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_repeated_fixed32() const;
  void _internal_add_repeated_fixed32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_repeated_fixed32();
  public:
  uint32_t repeated_fixed32(int index) const;
  void set_repeated_fixed32(int index, uint32_t value);
  void add_repeated_fixed32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      repeated_fixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_repeated_fixed32();

  // repeated fixed64 repeated_fixed64 = 38;
  int repeated_fixed64_size() const;
  private:
  int _internal_repeated_fixed64_size() const;
  public:
  void clear_repeated_fixed64();
  private:
  uint64_t _internal_repeated_fixed64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_repeated_fixed64() const;
  void _internal_add_repeated_fixed64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_repeated_fixed64();
  public:
  uint64_t repeated_fixed64(int index) const;
  void set_repeated_fixed64(int index, uint64_t value);
  void add_repeated_fixed64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      repeated_fixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_repeated_fixed64();

  // repeated sfixed32 repeated_sfixed32 = 39;
  int repeated_sfixed32_size() const;
  private:
  int _internal_repeated_sfixed32_size() const;
  public:
  void clear_repeated_sfixed32();
  private:
  int32_t _internal_repeated_sfixed32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_repeated_sfixed32() const;
  void _internal_add_repeated_sfixed32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_repeated_sfixed32();
  public:
  int32_t repeated_sfixed32(int index) const;
  void set_repeated_sfixed32(int index, int32_t value);
  void add_repeated_sfixed32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      repeated_sfixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_repeated_sfixed32();

  // repeated sfixed64 repeated_sfixed64 = 40;
  int repeated_sfixed64_size() const;
  private:
  int _internal_repeated_sfixed64_size() const;
  public:
  void clear_repeated_sfixed64();
  private:
  int64_t _internal_repeated_sfixed64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_repeated_sfixed64() const;
  void _internal_add_repeated_sfixed64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_repeated_sfixed64();
  public:
  int64_t repeated_sfixed64(int index) const;
  void set_repeated_sfixed64(int index, int64_t value);
  void add_repeated_sfixed64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      repeated_sfixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_repeated_sfixed64();

  // repeated float repeated_float = 41;
  int repeated_float_size() const;
  private:
  int _internal_repeated_float_size() const;
  public:
  void clear_repeated_float();
  private:
  float _internal_repeated_float(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_repeated_float() const;
  void _internal_add_repeated_float(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_repeated_float();
  public:
  float repeated_float(int index) const;
  void set_repeated_float(int index, float value);
  void add_repeated_float(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      repeated_float() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_repeated_float();

  // repeated double repeated_double = 42;
  int repeated_double_size() const;
  private:
  int _internal_repeated_double_size() const;
  public:
  void clear_repeated_double();
  private:
  double _internal_repeated_double(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_repeated_double() const;
  void _internal_add_repeated_double(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_repeated_double();
  public:
  double repeated_double(int index) const;
  void set_repeated_double(int index, double value);
  void add_repeated_double(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      repeated_double() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_repeated_double();

  // repeated bool repeated_bool = 43;
  int repeated_bool_size() const;
  private:
  int _internal_repeated_bool_size() const;
  public:
  void clear_repeated_bool();
  private:
  bool _internal_repeated_bool(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_repeated_bool() const;
  void _internal_add_repeated_bool(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_repeated_bool();
  public:
  bool repeated_bool(int index) const;
  void set_repeated_bool(int index, bool value);
  void add_repeated_bool(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      repeated_bool() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_repeated_bool();

  // repeated string repeated_string = 44;
  int repeated_string_size() const;
  private:
  int _internal_repeated_string_size() const;
  public:
  void clear_repeated_string();
  const std::string& repeated_string(int index) const;
  std::string* mutable_repeated_string(int index);
  void set_repeated_string(int index, const std::string& value);
  void set_repeated_string(int index, std::string&& value);
  void set_repeated_string(int index, const char* value);
  void set_repeated_string(int index, const char* value, size_t size);
  std::string* add_repeated_string();
  void add_repeated_string(const std::string& value);
  void add_repeated_string(std::string&& value);
  void add_repeated_string(const char* value);
  void add_repeated_string(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_string() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_string();
  private:
  const std::string& _internal_repeated_string(int index) const;
  std::string* _internal_add_repeated_string();
  public:

  // repeated bytes repeated_bytes = 45;
  int repeated_bytes_size() const;
  private:
  int _internal_repeated_bytes_size() const;
  public:
  void clear_repeated_bytes();
  const std::string& repeated_bytes(int index) const;
  std::string* mutable_repeated_bytes(int index);
  void set_repeated_bytes(int index, const std::string& value);
  void set_repeated_bytes(int index, std::string&& value);
  void set_repeated_bytes(int index, const char* value);
  void set_repeated_bytes(int index, const void* value, size_t size);
  std::string* add_repeated_bytes();
  void add_repeated_bytes(const std::string& value);
  void add_repeated_bytes(std::string&& value);
  void add_repeated_bytes(const char* value);
  void add_repeated_bytes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_bytes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_bytes();
  private:
  const std::string& _internal_repeated_bytes(int index) const;
  std::string* _internal_add_repeated_bytes();
  public:

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage repeated_nested_message = 48;
  int repeated_nested_message_size() const;
  private:
  int _internal_repeated_nested_message_size() const;
  public:
  void clear_repeated_nested_message();
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* mutable_repeated_nested_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >*
      mutable_repeated_nested_message();
  private:
  const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage& _internal_repeated_nested_message(int index) const;
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* _internal_add_repeated_nested_message();
  public:
  const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage& repeated_nested_message(int index) const;
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* add_repeated_nested_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >&
      repeated_nested_message() const;

  // repeated .protobuf_test_messages.proto2.ForeignMessageProto2 repeated_foreign_message = 49;
  int repeated_foreign_message_size() const;
  private:
  int _internal_repeated_foreign_message_size() const;
  public:
  void clear_repeated_foreign_message();
  ::protobuf_test_messages::proto2::ForeignMessageProto2* mutable_repeated_foreign_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_test_messages::proto2::ForeignMessageProto2 >*
      mutable_repeated_foreign_message();
  private:
  const ::protobuf_test_messages::proto2::ForeignMessageProto2& _internal_repeated_foreign_message(int index) const;
  ::protobuf_test_messages::proto2::ForeignMessageProto2* _internal_add_repeated_foreign_message();
  public:
  const ::protobuf_test_messages::proto2::ForeignMessageProto2& repeated_foreign_message(int index) const;
  ::protobuf_test_messages::proto2::ForeignMessageProto2* add_repeated_foreign_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_test_messages::proto2::ForeignMessageProto2 >&
      repeated_foreign_message() const;

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum repeated_nested_enum = 51;
  int repeated_nested_enum_size() const;
  private:
  int _internal_repeated_nested_enum_size() const;
  public:
  void clear_repeated_nested_enum();
  private:
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum _internal_repeated_nested_enum(int index) const;
  void _internal_add_repeated_nested_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_repeated_nested_enum();
  public:
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum repeated_nested_enum(int index) const;
  void set_repeated_nested_enum(int index, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value);
  void add_repeated_nested_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& repeated_nested_enum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_repeated_nested_enum();

  // repeated .protobuf_test_messages.proto2.ForeignEnumProto2 repeated_foreign_enum = 52;
  int repeated_foreign_enum_size() const;
  private:
  int _internal_repeated_foreign_enum_size() const;
  public:
  void clear_repeated_foreign_enum();
  private:
  ::protobuf_test_messages::proto2::ForeignEnumProto2 _internal_repeated_foreign_enum(int index) const;
  void _internal_add_repeated_foreign_enum(::protobuf_test_messages::proto2::ForeignEnumProto2 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_repeated_foreign_enum();
  public:
  ::protobuf_test_messages::proto2::ForeignEnumProto2 repeated_foreign_enum(int index) const;
  void set_repeated_foreign_enum(int index, ::protobuf_test_messages::proto2::ForeignEnumProto2 value);
  void add_repeated_foreign_enum(::protobuf_test_messages::proto2::ForeignEnumProto2 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& repeated_foreign_enum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_repeated_foreign_enum();

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  int repeated_string_piece_size() const;
  private:
  int _internal_repeated_string_piece_size() const;
  public:
  void clear_repeated_string_piece();
 private:
  // Hidden due to unknown ctype option.
  const std::string& repeated_string_piece(int index) const;
  std::string* mutable_repeated_string_piece(int index);
  void set_repeated_string_piece(int index, const std::string& value);
  void set_repeated_string_piece(int index, std::string&& value);
  void set_repeated_string_piece(int index, const char* value);
  void set_repeated_string_piece(int index, const char* value, size_t size);
  std::string* add_repeated_string_piece();
  void add_repeated_string_piece(const std::string& value);
  void add_repeated_string_piece(std::string&& value);
  void add_repeated_string_piece(const char* value);
  void add_repeated_string_piece(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_string_piece() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_string_piece();
  private:
  const std::string& _internal_repeated_string_piece(int index) const;
  std::string* _internal_add_repeated_string_piece();
  public:
 public:

  // repeated string repeated_cord = 55 [ctype = CORD];
  int repeated_cord_size() const;
  private:
  int _internal_repeated_cord_size() const;
  public:
  void clear_repeated_cord();
 private:
  // Hidden due to unknown ctype option.
  const std::string& repeated_cord(int index) const;
  std::string* mutable_repeated_cord(int index);
  void set_repeated_cord(int index, const std::string& value);
  void set_repeated_cord(int index, std::string&& value);
  void set_repeated_cord(int index, const char* value);
  void set_repeated_cord(int index, const char* value, size_t size);
  std::string* add_repeated_cord();
  void add_repeated_cord(const std::string& value);
  void add_repeated_cord(std::string&& value);
  void add_repeated_cord(const char* value);
  void add_repeated_cord(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_cord() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_cord();
  private:
  const std::string& _internal_repeated_cord(int index) const;
  std::string* _internal_add_repeated_cord();
  public:
 public:

  // map<int32, int32> map_int32_int32 = 56;
  int map_int32_int32_size() const;
  private:
  int _internal_map_int32_int32_size() const;
  public:
  void clear_map_int32_int32();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      _internal_map_int32_int32() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      _internal_mutable_map_int32_int32();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      map_int32_int32() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      mutable_map_int32_int32();

  // map<int64, int64> map_int64_int64 = 57;
  int map_int64_int64_size() const;
  private:
  int _internal_map_int64_int64_size() const;
  public:
  void clear_map_int64_int64();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
      _internal_map_int64_int64() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
      _internal_mutable_map_int64_int64();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
      map_int64_int64() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
      mutable_map_int64_int64();

  // map<uint32, uint32> map_uint32_uint32 = 58;
  int map_uint32_uint32_size() const;
  private:
  int _internal_map_uint32_uint32_size() const;
  public:
  void clear_map_uint32_uint32();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_map_uint32_uint32() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_map_uint32_uint32();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      map_uint32_uint32() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_map_uint32_uint32();

  // map<uint64, uint64> map_uint64_uint64 = 59;
  int map_uint64_uint64_size() const;
  private:
  int _internal_map_uint64_uint64_size() const;
  public:
  void clear_map_uint64_uint64();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >&
      _internal_map_uint64_uint64() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >*
      _internal_mutable_map_uint64_uint64();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >&
      map_uint64_uint64() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >*
      mutable_map_uint64_uint64();

  // map<sint32, sint32> map_sint32_sint32 = 60;
  int map_sint32_sint32_size() const;
  private:
  int _internal_map_sint32_sint32_size() const;
  public:
  void clear_map_sint32_sint32();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      _internal_map_sint32_sint32() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      _internal_mutable_map_sint32_sint32();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      map_sint32_sint32() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      mutable_map_sint32_sint32();

  // map<sint64, sint64> map_sint64_sint64 = 61;
  int map_sint64_sint64_size() const;
  private:
  int _internal_map_sint64_sint64_size() const;
  public:
  void clear_map_sint64_sint64();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
      _internal_map_sint64_sint64() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
      _internal_mutable_map_sint64_sint64();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
      map_sint64_sint64() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
      mutable_map_sint64_sint64();

  // map<fixed32, fixed32> map_fixed32_fixed32 = 62;
  int map_fixed32_fixed32_size() const;
  private:
  int _internal_map_fixed32_fixed32_size() const;
  public:
  void clear_map_fixed32_fixed32();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      _internal_map_fixed32_fixed32() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      _internal_mutable_map_fixed32_fixed32();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
      map_fixed32_fixed32() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
      mutable_map_fixed32_fixed32();

  // map<fixed64, fixed64> map_fixed64_fixed64 = 63;
  int map_fixed64_fixed64_size() const;
  private:
  int _internal_map_fixed64_fixed64_size() const;
  public:
  void clear_map_fixed64_fixed64();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >&
      _internal_map_fixed64_fixed64() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >*
      _internal_mutable_map_fixed64_fixed64();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >&
      map_fixed64_fixed64() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >*
      mutable_map_fixed64_fixed64();

  // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 64;
  int map_sfixed32_sfixed32_size() const;
  private:
  int _internal_map_sfixed32_sfixed32_size() const;
  public:
  void clear_map_sfixed32_sfixed32();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      _internal_map_sfixed32_sfixed32() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      _internal_mutable_map_sfixed32_sfixed32();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      map_sfixed32_sfixed32() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      mutable_map_sfixed32_sfixed32();

  // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 65;
  int map_sfixed64_sfixed64_size() const;
  private:
  int _internal_map_sfixed64_sfixed64_size() const;
  public:
  void clear_map_sfixed64_sfixed64();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
      _internal_map_sfixed64_sfixed64() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
      _internal_mutable_map_sfixed64_sfixed64();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
      map_sfixed64_sfixed64() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
      mutable_map_sfixed64_sfixed64();

  // map<int32, float> map_int32_float = 66;
  int map_int32_float_size() const;
  private:
  int _internal_map_int32_float_size() const;
  public:
  void clear_map_int32_float();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, float >&
      _internal_map_int32_float() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, float >*
      _internal_mutable_map_int32_float();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, float >&
      map_int32_float() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, float >*
      mutable_map_int32_float();

  // map<int32, double> map_int32_double = 67;
  int map_int32_double_size() const;
  private:
  int _internal_map_int32_double_size() const;
  public:
  void clear_map_int32_double();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >&
      _internal_map_int32_double() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >*
      _internal_mutable_map_int32_double();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >&
      map_int32_double() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >*
      mutable_map_int32_double();

  // map<bool, bool> map_bool_bool = 68;
  int map_bool_bool_size() const;
  private:
  int _internal_map_bool_bool_size() const;
  public:
  void clear_map_bool_bool();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< bool, bool >&
      _internal_map_bool_bool() const;
  ::PROTOBUF_NAMESPACE_ID::Map< bool, bool >*
      _internal_mutable_map_bool_bool();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< bool, bool >&
      map_bool_bool() const;
  ::PROTOBUF_NAMESPACE_ID::Map< bool, bool >*
      mutable_map_bool_bool();

  // map<string, string> map_string_string = 69;
  int map_string_string_size() const;
  private:
  int _internal_map_string_string_size() const;
  public:
  void clear_map_string_string();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_map_string_string() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_map_string_string();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      map_string_string() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_map_string_string();

  // map<string, bytes> map_string_bytes = 70;
  int map_string_bytes_size() const;
  private:
  int _internal_map_string_bytes_size() const;
  public:
  void clear_map_string_bytes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_map_string_bytes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_map_string_bytes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      map_string_bytes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_map_string_bytes();

  // map<string, .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage> map_string_nested_message = 71;
  int map_string_nested_message_size() const;
  private:
  int _internal_map_string_nested_message_size() const;
  public:
  void clear_map_string_nested_message();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >&
      _internal_map_string_nested_message() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >*
      _internal_mutable_map_string_nested_message();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >&
      map_string_nested_message() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >*
      mutable_map_string_nested_message();

  // map<string, .protobuf_test_messages.proto2.ForeignMessageProto2> map_string_foreign_message = 72;
  int map_string_foreign_message_size() const;
  private:
  int _internal_map_string_foreign_message_size() const;
  public:
  void clear_map_string_foreign_message();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignMessageProto2 >&
      _internal_map_string_foreign_message() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignMessageProto2 >*
      _internal_mutable_map_string_foreign_message();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignMessageProto2 >&
      map_string_foreign_message() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignMessageProto2 >*
      mutable_map_string_foreign_message();

  // map<string, .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum> map_string_nested_enum = 73;
  int map_string_nested_enum_size() const;
  private:
  int _internal_map_string_nested_enum_size() const;
  public:
  void clear_map_string_nested_enum();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >&
      _internal_map_string_nested_enum() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >*
      _internal_mutable_map_string_nested_enum();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >&
      map_string_nested_enum() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >*
      mutable_map_string_nested_enum();

  // map<string, .protobuf_test_messages.proto2.ForeignEnumProto2> map_string_foreign_enum = 74;
  int map_string_foreign_enum_size() const;
  private:
  int _internal_map_string_foreign_enum_size() const;
  public:
  void clear_map_string_foreign_enum();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignEnumProto2 >&
      _internal_map_string_foreign_enum() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignEnumProto2 >*
      _internal_mutable_map_string_foreign_enum();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignEnumProto2 >&
      map_string_foreign_enum() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignEnumProto2 >*
      mutable_map_string_foreign_enum();

  // repeated int32 packed_int32 = 75 [packed = true];
  int packed_int32_size() const;
  private:
  int _internal_packed_int32_size() const;
  public:
  void clear_packed_int32();
  private:
  int32_t _internal_packed_int32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_packed_int32() const;
  void _internal_add_packed_int32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_packed_int32();
  public:
  int32_t packed_int32(int index) const;
  void set_packed_int32(int index, int32_t value);
  void add_packed_int32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      packed_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_packed_int32();

  // repeated int64 packed_int64 = 76 [packed = true];
  int packed_int64_size() const;
  private:
  int _internal_packed_int64_size() const;
  public:
  void clear_packed_int64();
  private:
  int64_t _internal_packed_int64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_packed_int64() const;
  void _internal_add_packed_int64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_packed_int64();
  public:
  int64_t packed_int64(int index) const;
  void set_packed_int64(int index, int64_t value);
  void add_packed_int64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      packed_int64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_packed_int64();

  // repeated uint32 packed_uint32 = 77 [packed = true];
  int packed_uint32_size() const;
  private:
  int _internal_packed_uint32_size() const;
  public:
  void clear_packed_uint32();
  private:
  uint32_t _internal_packed_uint32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_packed_uint32() const;
  void _internal_add_packed_uint32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_packed_uint32();
  public:
  uint32_t packed_uint32(int index) const;
  void set_packed_uint32(int index, uint32_t value);
  void add_packed_uint32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      packed_uint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_packed_uint32();

  // repeated uint64 packed_uint64 = 78 [packed = true];
  int packed_uint64_size() const;
  private:
  int _internal_packed_uint64_size() const;
  public:
  void clear_packed_uint64();
  private:
  uint64_t _internal_packed_uint64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_packed_uint64() const;
  void _internal_add_packed_uint64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_packed_uint64();
  public:
  uint64_t packed_uint64(int index) const;
  void set_packed_uint64(int index, uint64_t value);
  void add_packed_uint64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      packed_uint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_packed_uint64();

  // repeated sint32 packed_sint32 = 79 [packed = true];
  int packed_sint32_size() const;
  private:
  int _internal_packed_sint32_size() const;
  public:
  void clear_packed_sint32();
  private:
  int32_t _internal_packed_sint32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_packed_sint32() const;
  void _internal_add_packed_sint32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_packed_sint32();
  public:
  int32_t packed_sint32(int index) const;
  void set_packed_sint32(int index, int32_t value);
  void add_packed_sint32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      packed_sint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_packed_sint32();

  // repeated sint64 packed_sint64 = 80 [packed = true];
  int packed_sint64_size() const;
  private:
  int _internal_packed_sint64_size() const;
  public:
  void clear_packed_sint64();
  private:
  int64_t _internal_packed_sint64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_packed_sint64() const;
  void _internal_add_packed_sint64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_packed_sint64();
  public:
  int64_t packed_sint64(int index) const;
  void set_packed_sint64(int index, int64_t value);
  void add_packed_sint64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      packed_sint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_packed_sint64();

  // repeated fixed32 packed_fixed32 = 81 [packed = true];
  int packed_fixed32_size() const;
  private:
  int _internal_packed_fixed32_size() const;
  public:
  void clear_packed_fixed32();
  private:
  uint32_t _internal_packed_fixed32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_packed_fixed32() const;
  void _internal_add_packed_fixed32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_packed_fixed32();
  public:
  uint32_t packed_fixed32(int index) const;
  void set_packed_fixed32(int index, uint32_t value);
  void add_packed_fixed32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      packed_fixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_packed_fixed32();

  // repeated fixed64 packed_fixed64 = 82 [packed = true];
  int packed_fixed64_size() const;
  private:
  int _internal_packed_fixed64_size() const;
  public:
  void clear_packed_fixed64();
  private:
  uint64_t _internal_packed_fixed64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_packed_fixed64() const;
  void _internal_add_packed_fixed64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_packed_fixed64();
  public:
  uint64_t packed_fixed64(int index) const;
  void set_packed_fixed64(int index, uint64_t value);
  void add_packed_fixed64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      packed_fixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_packed_fixed64();

  // repeated sfixed32 packed_sfixed32 = 83 [packed = true];
  int packed_sfixed32_size() const;
  private:
  int _internal_packed_sfixed32_size() const;
  public:
  void clear_packed_sfixed32();
  private:
  int32_t _internal_packed_sfixed32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_packed_sfixed32() const;
  void _internal_add_packed_sfixed32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_packed_sfixed32();
  public:
  int32_t packed_sfixed32(int index) const;
  void set_packed_sfixed32(int index, int32_t value);
  void add_packed_sfixed32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      packed_sfixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_packed_sfixed32();

  // repeated sfixed64 packed_sfixed64 = 84 [packed = true];
  int packed_sfixed64_size() const;
  private:
  int _internal_packed_sfixed64_size() const;
  public:
  void clear_packed_sfixed64();
  private:
  int64_t _internal_packed_sfixed64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_packed_sfixed64() const;
  void _internal_add_packed_sfixed64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_packed_sfixed64();
  public:
  int64_t packed_sfixed64(int index) const;
  void set_packed_sfixed64(int index, int64_t value);
  void add_packed_sfixed64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      packed_sfixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_packed_sfixed64();

  // repeated float packed_float = 85 [packed = true];
  int packed_float_size() const;
  private:
  int _internal_packed_float_size() const;
  public:
  void clear_packed_float();
  private:
  float _internal_packed_float(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_packed_float() const;
  void _internal_add_packed_float(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_packed_float();
  public:
  float packed_float(int index) const;
  void set_packed_float(int index, float value);
  void add_packed_float(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      packed_float() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_packed_float();

  // repeated double packed_double = 86 [packed = true];
  int packed_double_size() const;
  private:
  int _internal_packed_double_size() const;
  public:
  void clear_packed_double();
  private:
  double _internal_packed_double(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_packed_double() const;
  void _internal_add_packed_double(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_packed_double();
  public:
  double packed_double(int index) const;
  void set_packed_double(int index, double value);
  void add_packed_double(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      packed_double() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_packed_double();

  // repeated bool packed_bool = 87 [packed = true];
  int packed_bool_size() const;
  private:
  int _internal_packed_bool_size() const;
  public:
  void clear_packed_bool();
  private:
  bool _internal_packed_bool(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_packed_bool() const;
  void _internal_add_packed_bool(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_packed_bool();
  public:
  bool packed_bool(int index) const;
  void set_packed_bool(int index, bool value);
  void add_packed_bool(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      packed_bool() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_packed_bool();

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum packed_nested_enum = 88 [packed = true];
  int packed_nested_enum_size() const;
  private:
  int _internal_packed_nested_enum_size() const;
  public:
  void clear_packed_nested_enum();
  private:
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum _internal_packed_nested_enum(int index) const;
  void _internal_add_packed_nested_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_packed_nested_enum();
  public:
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum packed_nested_enum(int index) const;
  void set_packed_nested_enum(int index, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value);
  void add_packed_nested_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& packed_nested_enum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_packed_nested_enum();

  // repeated int32 unpacked_int32 = 89 [packed = false];
  int unpacked_int32_size() const;
  private:
  int _internal_unpacked_int32_size() const;
  public:
  void clear_unpacked_int32();
  private:
  int32_t _internal_unpacked_int32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_unpacked_int32() const;
  void _internal_add_unpacked_int32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_unpacked_int32();
  public:
  int32_t unpacked_int32(int index) const;
  void set_unpacked_int32(int index, int32_t value);
  void add_unpacked_int32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      unpacked_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_unpacked_int32();

  // repeated int64 unpacked_int64 = 90 [packed = false];
  int unpacked_int64_size() const;
  private:
  int _internal_unpacked_int64_size() const;
  public:
  void clear_unpacked_int64();
  private:
  int64_t _internal_unpacked_int64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_unpacked_int64() const;
  void _internal_add_unpacked_int64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_unpacked_int64();
  public:
  int64_t unpacked_int64(int index) const;
  void set_unpacked_int64(int index, int64_t value);
  void add_unpacked_int64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      unpacked_int64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_unpacked_int64();

  // repeated uint32 unpacked_uint32 = 91 [packed = false];
  int unpacked_uint32_size() const;
  private:
  int _internal_unpacked_uint32_size() const;
  public:
  void clear_unpacked_uint32();
  private:
  uint32_t _internal_unpacked_uint32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_unpacked_uint32() const;
  void _internal_add_unpacked_uint32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_unpacked_uint32();
  public:
  uint32_t unpacked_uint32(int index) const;
  void set_unpacked_uint32(int index, uint32_t value);
  void add_unpacked_uint32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      unpacked_uint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_unpacked_uint32();

  // repeated uint64 unpacked_uint64 = 92 [packed = false];
  int unpacked_uint64_size() const;
  private:
  int _internal_unpacked_uint64_size() const;
  public:
  void clear_unpacked_uint64();
  private:
  uint64_t _internal_unpacked_uint64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_unpacked_uint64() const;
  void _internal_add_unpacked_uint64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_unpacked_uint64();
  public:
  uint64_t unpacked_uint64(int index) const;
  void set_unpacked_uint64(int index, uint64_t value);
  void add_unpacked_uint64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      unpacked_uint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_unpacked_uint64();

  // repeated sint32 unpacked_sint32 = 93 [packed = false];
  int unpacked_sint32_size() const;
  private:
  int _internal_unpacked_sint32_size() const;
  public:
  void clear_unpacked_sint32();
  private:
  int32_t _internal_unpacked_sint32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_unpacked_sint32() const;
  void _internal_add_unpacked_sint32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_unpacked_sint32();
  public:
  int32_t unpacked_sint32(int index) const;
  void set_unpacked_sint32(int index, int32_t value);
  void add_unpacked_sint32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      unpacked_sint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_unpacked_sint32();

  // repeated sint64 unpacked_sint64 = 94 [packed = false];
  int unpacked_sint64_size() const;
  private:
  int _internal_unpacked_sint64_size() const;
  public:
  void clear_unpacked_sint64();
  private:
  int64_t _internal_unpacked_sint64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_unpacked_sint64() const;
  void _internal_add_unpacked_sint64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_unpacked_sint64();
  public:
  int64_t unpacked_sint64(int index) const;
  void set_unpacked_sint64(int index, int64_t value);
  void add_unpacked_sint64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      unpacked_sint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_unpacked_sint64();

  // repeated fixed32 unpacked_fixed32 = 95 [packed = false];
  int unpacked_fixed32_size() const;
  private:
  int _internal_unpacked_fixed32_size() const;
  public:
  void clear_unpacked_fixed32();
  private:
  uint32_t _internal_unpacked_fixed32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_unpacked_fixed32() const;
  void _internal_add_unpacked_fixed32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_unpacked_fixed32();
  public:
  uint32_t unpacked_fixed32(int index) const;
  void set_unpacked_fixed32(int index, uint32_t value);
  void add_unpacked_fixed32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      unpacked_fixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_unpacked_fixed32();

  // repeated fixed64 unpacked_fixed64 = 96 [packed = false];
  int unpacked_fixed64_size() const;
  private:
  int _internal_unpacked_fixed64_size() const;
  public:
  void clear_unpacked_fixed64();
  private:
  uint64_t _internal_unpacked_fixed64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_unpacked_fixed64() const;
  void _internal_add_unpacked_fixed64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_unpacked_fixed64();
  public:
  uint64_t unpacked_fixed64(int index) const;
  void set_unpacked_fixed64(int index, uint64_t value);
  void add_unpacked_fixed64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      unpacked_fixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_unpacked_fixed64();

  // repeated sfixed32 unpacked_sfixed32 = 97 [packed = false];
  int unpacked_sfixed32_size() const;
  private:
  int _internal_unpacked_sfixed32_size() const;
  public:
  void clear_unpacked_sfixed32();
  private:
  int32_t _internal_unpacked_sfixed32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_unpacked_sfixed32() const;
  void _internal_add_unpacked_sfixed32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_unpacked_sfixed32();
  public:
  int32_t unpacked_sfixed32(int index) const;
  void set_unpacked_sfixed32(int index, int32_t value);
  void add_unpacked_sfixed32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      unpacked_sfixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_unpacked_sfixed32();

  // repeated sfixed64 unpacked_sfixed64 = 98 [packed = false];
  int unpacked_sfixed64_size() const;
  private:
  int _internal_unpacked_sfixed64_size() const;
  public:
  void clear_unpacked_sfixed64();
  private:
  int64_t _internal_unpacked_sfixed64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_unpacked_sfixed64() const;
  void _internal_add_unpacked_sfixed64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_unpacked_sfixed64();
  public:
  int64_t unpacked_sfixed64(int index) const;
  void set_unpacked_sfixed64(int index, int64_t value);
  void add_unpacked_sfixed64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      unpacked_sfixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_unpacked_sfixed64();

  // repeated float unpacked_float = 99 [packed = false];
  int unpacked_float_size() const;
  private:
  int _internal_unpacked_float_size() const;
  public:
  void clear_unpacked_float();
  private:
  float _internal_unpacked_float(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_unpacked_float() const;
  void _internal_add_unpacked_float(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_unpacked_float();
  public:
  float unpacked_float(int index) const;
  void set_unpacked_float(int index, float value);
  void add_unpacked_float(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      unpacked_float() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_unpacked_float();

  // repeated double unpacked_double = 100 [packed = false];
  int unpacked_double_size() const;
  private:
  int _internal_unpacked_double_size() const;
  public:
  void clear_unpacked_double();
  private:
  double _internal_unpacked_double(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_unpacked_double() const;
  void _internal_add_unpacked_double(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_unpacked_double();
  public:
  double unpacked_double(int index) const;
  void set_unpacked_double(int index, double value);
  void add_unpacked_double(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      unpacked_double() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_unpacked_double();

  // repeated bool unpacked_bool = 101 [packed = false];
  int unpacked_bool_size() const;
  private:
  int _internal_unpacked_bool_size() const;
  public:
  void clear_unpacked_bool();
  private:
  bool _internal_unpacked_bool(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_unpacked_bool() const;
  void _internal_add_unpacked_bool(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_unpacked_bool();
  public:
  bool unpacked_bool(int index) const;
  void set_unpacked_bool(int index, bool value);
  void add_unpacked_bool(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      unpacked_bool() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_unpacked_bool();

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum unpacked_nested_enum = 102 [packed = false];
  int unpacked_nested_enum_size() const;
  private:
  int _internal_unpacked_nested_enum_size() const;
  public:
  void clear_unpacked_nested_enum();
  private:
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum _internal_unpacked_nested_enum(int index) const;
  void _internal_add_unpacked_nested_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_unpacked_nested_enum();
  public:
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum unpacked_nested_enum(int index) const;
  void set_unpacked_nested_enum(int index, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value);
  void add_unpacked_nested_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& unpacked_nested_enum() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_unpacked_nested_enum();

  // optional string optional_string = 14;
  bool has_optional_string() const;
  private:
  bool _internal_has_optional_string() const;
  public:
  void clear_optional_string();
  const std::string& optional_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optional_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optional_string();
  PROTOBUF_NODISCARD std::string* release_optional_string();
  void set_allocated_optional_string(std::string* optional_string);
  private:
  const std::string& _internal_optional_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_string(const std::string& value);
  std::string* _internal_mutable_optional_string();
  public:

  // optional bytes optional_bytes = 15;
  bool has_optional_bytes() const;
  private:
  bool _internal_has_optional_bytes() const;
  public:
  void clear_optional_bytes();
  const std::string& optional_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optional_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optional_bytes();
  PROTOBUF_NODISCARD std::string* release_optional_bytes();
  void set_allocated_optional_bytes(std::string* optional_bytes);
  private:
  const std::string& _internal_optional_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_bytes(const std::string& value);
  std::string* _internal_mutable_optional_bytes();
  public:

  // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
  bool has_optional_string_piece() const;
  private:
  bool _internal_has_optional_string_piece() const;
  public:
  void clear_optional_string_piece();
 private:
  // Hidden due to unknown ctype option.
  const std::string& optional_string_piece() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optional_string_piece(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optional_string_piece();
  PROTOBUF_NODISCARD std::string* release_optional_string_piece();
  void set_allocated_optional_string_piece(std::string* optional_string_piece);
  private:
  const std::string& _internal_optional_string_piece() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_string_piece(const std::string& value);
  std::string* _internal_mutable_optional_string_piece();
  public:
 public:

  // optional string optional_cord = 25 [ctype = CORD];
  bool has_optional_cord() const;
  private:
  bool _internal_has_optional_cord() const;
  public:
  void clear_optional_cord();
 private:
  // Hidden due to unknown ctype option.
  const std::string& optional_cord() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optional_cord(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optional_cord();
  PROTOBUF_NODISCARD std::string* release_optional_cord();
  void set_allocated_optional_cord(std::string* optional_cord);
  private:
  const std::string& _internal_optional_cord() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_cord(const std::string& value);
  std::string* _internal_mutable_optional_cord();
  public:
 public:

  // optional string default_string = 254 [default = "Rosebud"];
  bool has_default_string() const;
  private:
  bool _internal_has_default_string() const;
  public:
  void clear_default_string();
  const std::string& default_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_string();
  PROTOBUF_NODISCARD std::string* release_default_string();
  void set_allocated_default_string(std::string* default_string);
  private:
  const std::string& _internal_default_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_string(const std::string& value);
  std::string* _internal_mutable_default_string();
  public:

  // optional bytes default_bytes = 255 [default = "joshua"];
  bool has_default_bytes() const;
  private:
  bool _internal_has_default_bytes() const;
  public:
  void clear_default_bytes();
  const std::string& default_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_bytes();
  PROTOBUF_NODISCARD std::string* release_default_bytes();
  void set_allocated_default_bytes(std::string* default_bytes);
  private:
  const std::string& _internal_default_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_bytes(const std::string& value);
  std::string* _internal_mutable_default_bytes();
  public:

  // optional .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage optional_nested_message = 18;
  bool has_optional_nested_message() const;
  private:
  bool _internal_has_optional_nested_message() const;
  public:
  void clear_optional_nested_message();
  const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage& optional_nested_message() const;
  PROTOBUF_NODISCARD ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* release_optional_nested_message();
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* mutable_optional_nested_message();
  void set_allocated_optional_nested_message(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* optional_nested_message);
  private:
  const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage& _internal_optional_nested_message() const;
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* _internal_mutable_optional_nested_message();
  public:
  void unsafe_arena_set_allocated_optional_nested_message(
      ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* optional_nested_message);
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* unsafe_arena_release_optional_nested_message();

  // optional .protobuf_test_messages.proto2.ForeignMessageProto2 optional_foreign_message = 19;
  bool has_optional_foreign_message() const;
  private:
  bool _internal_has_optional_foreign_message() const;
  public:
  void clear_optional_foreign_message();
  const ::protobuf_test_messages::proto2::ForeignMessageProto2& optional_foreign_message() const;
  PROTOBUF_NODISCARD ::protobuf_test_messages::proto2::ForeignMessageProto2* release_optional_foreign_message();
  ::protobuf_test_messages::proto2::ForeignMessageProto2* mutable_optional_foreign_message();
  void set_allocated_optional_foreign_message(::protobuf_test_messages::proto2::ForeignMessageProto2* optional_foreign_message);
  private:
  const ::protobuf_test_messages::proto2::ForeignMessageProto2& _internal_optional_foreign_message() const;
  ::protobuf_test_messages::proto2::ForeignMessageProto2* _internal_mutable_optional_foreign_message();
  public:
  void unsafe_arena_set_allocated_optional_foreign_message(
      ::protobuf_test_messages::proto2::ForeignMessageProto2* optional_foreign_message);
  ::protobuf_test_messages::proto2::ForeignMessageProto2* unsafe_arena_release_optional_foreign_message();

  // optional .protobuf_test_messages.proto2.TestAllTypesProto2 recursive_message = 27;
  bool has_recursive_message() const;
  private:
  bool _internal_has_recursive_message() const;
  public:
  void clear_recursive_message();
  const ::protobuf_test_messages::proto2::TestAllTypesProto2& recursive_message() const;
  PROTOBUF_NODISCARD ::protobuf_test_messages::proto2::TestAllTypesProto2* release_recursive_message();
  ::protobuf_test_messages::proto2::TestAllTypesProto2* mutable_recursive_message();
  void set_allocated_recursive_message(::protobuf_test_messages::proto2::TestAllTypesProto2* recursive_message);
  private:
  const ::protobuf_test_messages::proto2::TestAllTypesProto2& _internal_recursive_message() const;
  ::protobuf_test_messages::proto2::TestAllTypesProto2* _internal_mutable_recursive_message();
  public:
  void unsafe_arena_set_allocated_recursive_message(
      ::protobuf_test_messages::proto2::TestAllTypesProto2* recursive_message);
  ::protobuf_test_messages::proto2::TestAllTypesProto2* unsafe_arena_release_recursive_message();

  // optional group Data = 201 { ... };
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::protobuf_test_messages::proto2::TestAllTypesProto2_Data& data() const;
  PROTOBUF_NODISCARD ::protobuf_test_messages::proto2::TestAllTypesProto2_Data* release_data();
  ::protobuf_test_messages::proto2::TestAllTypesProto2_Data* mutable_data();
  void set_allocated_data(::protobuf_test_messages::proto2::TestAllTypesProto2_Data* data);
  private:
  const ::protobuf_test_messages::proto2::TestAllTypesProto2_Data& _internal_data() const;
  ::protobuf_test_messages::proto2::TestAllTypesProto2_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::protobuf_test_messages::proto2::TestAllTypesProto2_Data* data);
  ::protobuf_test_messages::proto2::TestAllTypesProto2_Data* unsafe_arena_release_data();

  // optional int64 optional_int64 = 2;
  bool has_optional_int64() const;
  private:
  bool _internal_has_optional_int64() const;
  public:
  void clear_optional_int64();
  int64_t optional_int64() const;
  void set_optional_int64(int64_t value);
  private:
  int64_t _internal_optional_int64() const;
  void _internal_set_optional_int64(int64_t value);
  public:

  // optional int32 optional_int32 = 1;
  bool has_optional_int32() const;
  private:
  bool _internal_has_optional_int32() const;
  public:
  void clear_optional_int32();
  int32_t optional_int32() const;
  void set_optional_int32(int32_t value);
  private:
  int32_t _internal_optional_int32() const;
  void _internal_set_optional_int32(int32_t value);
  public:

  // optional uint32 optional_uint32 = 3;
  bool has_optional_uint32() const;
  private:
  bool _internal_has_optional_uint32() const;
  public:
  void clear_optional_uint32();
  uint32_t optional_uint32() const;
  void set_optional_uint32(uint32_t value);
  private:
  uint32_t _internal_optional_uint32() const;
  void _internal_set_optional_uint32(uint32_t value);
  public:

  // optional uint64 optional_uint64 = 4;
  bool has_optional_uint64() const;
  private:
  bool _internal_has_optional_uint64() const;
  public:
  void clear_optional_uint64();
  uint64_t optional_uint64() const;
  void set_optional_uint64(uint64_t value);
  private:
  uint64_t _internal_optional_uint64() const;
  void _internal_set_optional_uint64(uint64_t value);
  public:

  // optional sint64 optional_sint64 = 6;
  bool has_optional_sint64() const;
  private:
  bool _internal_has_optional_sint64() const;
  public:
  void clear_optional_sint64();
  int64_t optional_sint64() const;
  void set_optional_sint64(int64_t value);
  private:
  int64_t _internal_optional_sint64() const;
  void _internal_set_optional_sint64(int64_t value);
  public:

  // optional sint32 optional_sint32 = 5;
  bool has_optional_sint32() const;
  private:
  bool _internal_has_optional_sint32() const;
  public:
  void clear_optional_sint32();
  int32_t optional_sint32() const;
  void set_optional_sint32(int32_t value);
  private:
  int32_t _internal_optional_sint32() const;
  void _internal_set_optional_sint32(int32_t value);
  public:

  // optional fixed32 optional_fixed32 = 7;
  bool has_optional_fixed32() const;
  private:
  bool _internal_has_optional_fixed32() const;
  public:
  void clear_optional_fixed32();
  uint32_t optional_fixed32() const;
  void set_optional_fixed32(uint32_t value);
  private:
  uint32_t _internal_optional_fixed32() const;
  void _internal_set_optional_fixed32(uint32_t value);
  public:

  // optional fixed64 optional_fixed64 = 8;
  bool has_optional_fixed64() const;
  private:
  bool _internal_has_optional_fixed64() const;
  public:
  void clear_optional_fixed64();
  uint64_t optional_fixed64() const;
  void set_optional_fixed64(uint64_t value);
  private:
  uint64_t _internal_optional_fixed64() const;
  void _internal_set_optional_fixed64(uint64_t value);
  public:

  // optional sfixed64 optional_sfixed64 = 10;
  bool has_optional_sfixed64() const;
  private:
  bool _internal_has_optional_sfixed64() const;
  public:
  void clear_optional_sfixed64();
  int64_t optional_sfixed64() const;
  void set_optional_sfixed64(int64_t value);
  private:
  int64_t _internal_optional_sfixed64() const;
  void _internal_set_optional_sfixed64(int64_t value);
  public:

  // optional sfixed32 optional_sfixed32 = 9;
  bool has_optional_sfixed32() const;
  private:
  bool _internal_has_optional_sfixed32() const;
  public:
  void clear_optional_sfixed32();
  int32_t optional_sfixed32() const;
  void set_optional_sfixed32(int32_t value);
  private:
  int32_t _internal_optional_sfixed32() const;
  void _internal_set_optional_sfixed32(int32_t value);
  public:

  // optional float optional_float = 11;
  bool has_optional_float() const;
  private:
  bool _internal_has_optional_float() const;
  public:
  void clear_optional_float();
  float optional_float() const;
  void set_optional_float(float value);
  private:
  float _internal_optional_float() const;
  void _internal_set_optional_float(float value);
  public:

  // optional double optional_double = 12;
  bool has_optional_double() const;
  private:
  bool _internal_has_optional_double() const;
  public:
  void clear_optional_double();
  double optional_double() const;
  void set_optional_double(double value);
  private:
  double _internal_optional_double() const;
  void _internal_set_optional_double(double value);
  public:

  // optional bool optional_bool = 13;
  bool has_optional_bool() const;
  private:
  bool _internal_has_optional_bool() const;
  public:
  void clear_optional_bool();
  bool optional_bool() const;
  void set_optional_bool(bool value);
  private:
  bool _internal_optional_bool() const;
  void _internal_set_optional_bool(bool value);
  public:

  // optional .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum optional_nested_enum = 21;
  bool has_optional_nested_enum() const;
  private:
  bool _internal_has_optional_nested_enum() const;
  public:
  void clear_optional_nested_enum();
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum optional_nested_enum() const;
  void set_optional_nested_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value);
  private:
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum _internal_optional_nested_enum() const;
  void _internal_set_optional_nested_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value);
  public:

  // optional .protobuf_test_messages.proto2.ForeignEnumProto2 optional_foreign_enum = 22;
  bool has_optional_foreign_enum() const;
  private:
  bool _internal_has_optional_foreign_enum() const;
  public:
  void clear_optional_foreign_enum();
  ::protobuf_test_messages::proto2::ForeignEnumProto2 optional_foreign_enum() const;
  void set_optional_foreign_enum(::protobuf_test_messages::proto2::ForeignEnumProto2 value);
  private:
  ::protobuf_test_messages::proto2::ForeignEnumProto2 _internal_optional_foreign_enum() const;
  void _internal_set_optional_foreign_enum(::protobuf_test_messages::proto2::ForeignEnumProto2 value);
  public:

  // optional int32 fieldname1 = 401;
  bool has_fieldname1() const;
  private:
  bool _internal_has_fieldname1() const;
  public:
  void clear_fieldname1();
  int32_t fieldname1() const;
  void set_fieldname1(int32_t value);
  private:
  int32_t _internal_fieldname1() const;
  void _internal_set_fieldname1(int32_t value);
  public:

  // optional int32 field_name2 = 402;
  bool has_field_name2() const;
  private:
  bool _internal_has_field_name2() const;
  public:
  void clear_field_name2();
  int32_t field_name2() const;
  void set_field_name2(int32_t value);
  private:
  int32_t _internal_field_name2() const;
  void _internal_set_field_name2(int32_t value);
  public:

  // optional int32 _field_name3 = 403;
  bool has__field_name3() const;
  private:
  bool _internal_has__field_name3() const;
  public:
  void clear__field_name3();
  int32_t _field_name3() const;
  void set__field_name3(int32_t value);
  private:
  int32_t _internal__field_name3() const;
  void _internal_set__field_name3(int32_t value);
  public:

  // optional int32 field__name4_ = 404;
  bool has_field__name4_() const;
  private:
  bool _internal_has_field__name4_() const;
  public:
  void clear_field__name4_();
  int32_t field__name4_() const;
  void set_field__name4_(int32_t value);
  private:
  int32_t _internal_field__name4_() const;
  void _internal_set_field__name4_(int32_t value);
  public:

  // optional int32 field0name5 = 405;
  bool has_field0name5() const;
  private:
  bool _internal_has_field0name5() const;
  public:
  void clear_field0name5();
  int32_t field0name5() const;
  void set_field0name5(int32_t value);
  private:
  int32_t _internal_field0name5() const;
  void _internal_set_field0name5(int32_t value);
  public:

  // optional int32 field_0_name6 = 406;
  bool has_field_0_name6() const;
  private:
  bool _internal_has_field_0_name6() const;
  public:
  void clear_field_0_name6();
  int32_t field_0_name6() const;
  void set_field_0_name6(int32_t value);
  private:
  int32_t _internal_field_0_name6() const;
  void _internal_set_field_0_name6(int32_t value);
  public:

  // optional int32 fieldName7 = 407;
  bool has_fieldname7() const;
  private:
  bool _internal_has_fieldname7() const;
  public:
  void clear_fieldname7();
  int32_t fieldname7() const;
  void set_fieldname7(int32_t value);
  private:
  int32_t _internal_fieldname7() const;
  void _internal_set_fieldname7(int32_t value);
  public:

  // optional int32 FieldName8 = 408;
  bool has_fieldname8() const;
  private:
  bool _internal_has_fieldname8() const;
  public:
  void clear_fieldname8();
  int32_t fieldname8() const;
  void set_fieldname8(int32_t value);
  private:
  int32_t _internal_fieldname8() const;
  void _internal_set_fieldname8(int32_t value);
  public:

  // optional int32 field_Name9 = 409;
  bool has_field_name9() const;
  private:
  bool _internal_has_field_name9() const;
  public:
  void clear_field_name9();
  int32_t field_name9() const;
  void set_field_name9(int32_t value);
  private:
  int32_t _internal_field_name9() const;
  void _internal_set_field_name9(int32_t value);
  public:

  // optional int32 Field_Name10 = 410;
  bool has_field_name10() const;
  private:
  bool _internal_has_field_name10() const;
  public:
  void clear_field_name10();
  int32_t field_name10() const;
  void set_field_name10(int32_t value);
  private:
  int32_t _internal_field_name10() const;
  void _internal_set_field_name10(int32_t value);
  public:

  // optional int32 FIELD_NAME11 = 411;
  bool has_field_name11() const;
  private:
  bool _internal_has_field_name11() const;
  public:
  void clear_field_name11();
  int32_t field_name11() const;
  void set_field_name11(int32_t value);
  private:
  int32_t _internal_field_name11() const;
  void _internal_set_field_name11(int32_t value);
  public:

  // optional int32 FIELD_name12 = 412;
  bool has_field_name12() const;
  private:
  bool _internal_has_field_name12() const;
  public:
  void clear_field_name12();
  int32_t field_name12() const;
  void set_field_name12(int32_t value);
  private:
  int32_t _internal_field_name12() const;
  void _internal_set_field_name12(int32_t value);
  public:

  // optional int32 __field_name13 = 413;
  bool has___field_name13() const;
  private:
  bool _internal_has___field_name13() const;
  public:
  void clear___field_name13();
  int32_t __field_name13() const;
  void set___field_name13(int32_t value);
  private:
  int32_t _internal___field_name13() const;
  void _internal_set___field_name13(int32_t value);
  public:

  // optional int32 __Field_name14 = 414;
  bool has___field_name14() const;
  private:
  bool _internal_has___field_name14() const;
  public:
  void clear___field_name14();
  int32_t __field_name14() const;
  void set___field_name14(int32_t value);
  private:
  int32_t _internal___field_name14() const;
  void _internal_set___field_name14(int32_t value);
  public:

  // optional int32 field__name15 = 415;
  bool has_field__name15() const;
  private:
  bool _internal_has_field__name15() const;
  public:
  void clear_field__name15();
  int32_t field__name15() const;
  void set_field__name15(int32_t value);
  private:
  int32_t _internal_field__name15() const;
  void _internal_set_field__name15(int32_t value);
  public:

  // optional int32 field__Name16 = 416;
  bool has_field__name16() const;
  private:
  bool _internal_has_field__name16() const;
  public:
  void clear_field__name16();
  int32_t field__name16() const;
  void set_field__name16(int32_t value);
  private:
  int32_t _internal_field__name16() const;
  void _internal_set_field__name16(int32_t value);
  public:

  // optional int32 field_name17__ = 417;
  bool has_field_name17__() const;
  private:
  bool _internal_has_field_name17__() const;
  public:
  void clear_field_name17__();
  int32_t field_name17__() const;
  void set_field_name17__(int32_t value);
  private:
  int32_t _internal_field_name17__() const;
  void _internal_set_field_name17__(int32_t value);
  public:

  // optional int32 Field_name18__ = 418;
  bool has_field_name18__() const;
  private:
  bool _internal_has_field_name18__() const;
  public:
  void clear_field_name18__();
  int32_t field_name18__() const;
  void set_field_name18__(int32_t value);
  private:
  int32_t _internal_field_name18__() const;
  void _internal_set_field_name18__(int32_t value);
  public:

  // optional bool default_bool = 253 [default = true];
  bool has_default_bool() const;
  private:
  bool _internal_has_default_bool() const;
  public:
  void clear_default_bool();
  bool default_bool() const;
  void set_default_bool(bool value);
  private:
  bool _internal_default_bool() const;
  void _internal_set_default_bool(bool value);
  public:

  // optional int64 default_int64 = 242 [default = -9123456789123456789];
  bool has_default_int64() const;
  private:
  bool _internal_has_default_int64() const;
  public:
  void clear_default_int64();
  int64_t default_int64() const;
  void set_default_int64(int64_t value);
  private:
  int64_t _internal_default_int64() const;
  void _internal_set_default_int64(int64_t value);
  public:

  // optional int32 default_int32 = 241 [default = -123456789];
  bool has_default_int32() const;
  private:
  bool _internal_has_default_int32() const;
  public:
  void clear_default_int32();
  int32_t default_int32() const;
  void set_default_int32(int32_t value);
  private:
  int32_t _internal_default_int32() const;
  void _internal_set_default_int32(int32_t value);
  public:

  // optional uint32 default_uint32 = 243 [default = 2123456789];
  bool has_default_uint32() const;
  private:
  bool _internal_has_default_uint32() const;
  public:
  void clear_default_uint32();
  uint32_t default_uint32() const;
  void set_default_uint32(uint32_t value);
  private:
  uint32_t _internal_default_uint32() const;
  void _internal_set_default_uint32(uint32_t value);
  public:

  // optional uint64 default_uint64 = 244 [default = 10123456789123456789];
  bool has_default_uint64() const;
  private:
  bool _internal_has_default_uint64() const;
  public:
  void clear_default_uint64();
  uint64_t default_uint64() const;
  void set_default_uint64(uint64_t value);
  private:
  uint64_t _internal_default_uint64() const;
  void _internal_set_default_uint64(uint64_t value);
  public:

  // optional sint64 default_sint64 = 246 [default = -9123456789123456789];
  bool has_default_sint64() const;
  private:
  bool _internal_has_default_sint64() const;
  public:
  void clear_default_sint64();
  int64_t default_sint64() const;
  void set_default_sint64(int64_t value);
  private:
  int64_t _internal_default_sint64() const;
  void _internal_set_default_sint64(int64_t value);
  public:

  // optional sint32 default_sint32 = 245 [default = -123456789];
  bool has_default_sint32() const;
  private:
  bool _internal_has_default_sint32() const;
  public:
  void clear_default_sint32();
  int32_t default_sint32() const;
  void set_default_sint32(int32_t value);
  private:
  int32_t _internal_default_sint32() const;
  void _internal_set_default_sint32(int32_t value);
  public:

  // optional fixed32 default_fixed32 = 247 [default = 2123456789];
  bool has_default_fixed32() const;
  private:
  bool _internal_has_default_fixed32() const;
  public:
  void clear_default_fixed32();
  uint32_t default_fixed32() const;
  void set_default_fixed32(uint32_t value);
  private:
  uint32_t _internal_default_fixed32() const;
  void _internal_set_default_fixed32(uint32_t value);
  public:

  // optional fixed64 default_fixed64 = 248 [default = 10123456789123456789];
  bool has_default_fixed64() const;
  private:
  bool _internal_has_default_fixed64() const;
  public:
  void clear_default_fixed64();
  uint64_t default_fixed64() const;
  void set_default_fixed64(uint64_t value);
  private:
  uint64_t _internal_default_fixed64() const;
  void _internal_set_default_fixed64(uint64_t value);
  public:

  // optional sfixed64 default_sfixed64 = 250 [default = -9123456789123456789];
  bool has_default_sfixed64() const;
  private:
  bool _internal_has_default_sfixed64() const;
  public:
  void clear_default_sfixed64();
  int64_t default_sfixed64() const;
  void set_default_sfixed64(int64_t value);
  private:
  int64_t _internal_default_sfixed64() const;
  void _internal_set_default_sfixed64(int64_t value);
  public:

  // optional sfixed32 default_sfixed32 = 249 [default = -123456789];
  bool has_default_sfixed32() const;
  private:
  bool _internal_has_default_sfixed32() const;
  public:
  void clear_default_sfixed32();
  int32_t default_sfixed32() const;
  void set_default_sfixed32(int32_t value);
  private:
  int32_t _internal_default_sfixed32() const;
  void _internal_set_default_sfixed32(int32_t value);
  public:

  // optional float default_float = 251 [default = 9e+009];
  bool has_default_float() const;
  private:
  bool _internal_has_default_float() const;
  public:
  void clear_default_float();
  float default_float() const;
  void set_default_float(float value);
  private:
  float _internal_default_float() const;
  void _internal_set_default_float(float value);
  public:

  // optional double default_double = 252 [default = 7e+022];
  bool has_default_double() const;
  private:
  bool _internal_has_default_double() const;
  public:
  void clear_default_double();
  double default_double() const;
  void set_default_double(double value);
  private:
  double _internal_default_double() const;
  void _internal_set_default_double(double value);
  public:

  // uint32 oneof_uint32 = 111;
  bool has_oneof_uint32() const;
  private:
  bool _internal_has_oneof_uint32() const;
  public:
  void clear_oneof_uint32();
  uint32_t oneof_uint32() const;
  void set_oneof_uint32(uint32_t value);
  private:
  uint32_t _internal_oneof_uint32() const;
  void _internal_set_oneof_uint32(uint32_t value);
  public:

  // .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage oneof_nested_message = 112;
  bool has_oneof_nested_message() const;
  private:
  bool _internal_has_oneof_nested_message() const;
  public:
  void clear_oneof_nested_message();
  const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage& oneof_nested_message() const;
  PROTOBUF_NODISCARD ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* release_oneof_nested_message();
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* mutable_oneof_nested_message();
  void set_allocated_oneof_nested_message(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* oneof_nested_message);
  private:
  const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage& _internal_oneof_nested_message() const;
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* _internal_mutable_oneof_nested_message();
  public:
  void unsafe_arena_set_allocated_oneof_nested_message(
      ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* oneof_nested_message);
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* unsafe_arena_release_oneof_nested_message();

  // string oneof_string = 113;
  bool has_oneof_string() const;
  private:
  bool _internal_has_oneof_string() const;
  public:
  void clear_oneof_string();
  const std::string& oneof_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oneof_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oneof_string();
  PROTOBUF_NODISCARD std::string* release_oneof_string();
  void set_allocated_oneof_string(std::string* oneof_string);
  private:
  const std::string& _internal_oneof_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oneof_string(const std::string& value);
  std::string* _internal_mutable_oneof_string();
  public:

  // bytes oneof_bytes = 114;
  bool has_oneof_bytes() const;
  private:
  bool _internal_has_oneof_bytes() const;
  public:
  void clear_oneof_bytes();
  const std::string& oneof_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oneof_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oneof_bytes();
  PROTOBUF_NODISCARD std::string* release_oneof_bytes();
  void set_allocated_oneof_bytes(std::string* oneof_bytes);
  private:
  const std::string& _internal_oneof_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oneof_bytes(const std::string& value);
  std::string* _internal_mutable_oneof_bytes();
  public:

  // bool oneof_bool = 115;
  bool has_oneof_bool() const;
  private:
  bool _internal_has_oneof_bool() const;
  public:
  void clear_oneof_bool();
  bool oneof_bool() const;
  void set_oneof_bool(bool value);
  private:
  bool _internal_oneof_bool() const;
  void _internal_set_oneof_bool(bool value);
  public:

  // uint64 oneof_uint64 = 116;
  bool has_oneof_uint64() const;
  private:
  bool _internal_has_oneof_uint64() const;
  public:
  void clear_oneof_uint64();
  uint64_t oneof_uint64() const;
  void set_oneof_uint64(uint64_t value);
  private:
  uint64_t _internal_oneof_uint64() const;
  void _internal_set_oneof_uint64(uint64_t value);
  public:

  // float oneof_float = 117;
  bool has_oneof_float() const;
  private:
  bool _internal_has_oneof_float() const;
  public:
  void clear_oneof_float();
  float oneof_float() const;
  void set_oneof_float(float value);
  private:
  float _internal_oneof_float() const;
  void _internal_set_oneof_float(float value);
  public:

  // double oneof_double = 118;
  bool has_oneof_double() const;
  private:
  bool _internal_has_oneof_double() const;
  public:
  void clear_oneof_double();
  double oneof_double() const;
  void set_oneof_double(double value);
  private:
  double _internal_oneof_double() const;
  void _internal_set_oneof_double(double value);
  public:

  // .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum oneof_enum = 119;
  bool has_oneof_enum() const;
  private:
  bool _internal_has_oneof_enum() const;
  public:
  void clear_oneof_enum();
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum oneof_enum() const;
  void set_oneof_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value);
  private:
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum _internal_oneof_enum() const;
  void _internal_set_oneof_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value);
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              TestAllTypesProto2, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TestAllTypesProto2, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }

  void clear_oneof_field();
  OneofFieldCase oneof_field_case() const;
  // @@protoc_insertion_point(class_scope:protobuf_test_messages.proto2.TestAllTypesProto2)
 private:
  class _Internal;
  void set_has_oneof_uint32();
  void set_has_oneof_nested_message();
  void set_has_oneof_string();
  void set_has_oneof_bytes();
  void set_has_oneof_bool();
  void set_has_oneof_uint64();
  void set_has_oneof_float();
  void set_has_oneof_double();
  void set_has_oneof_enum();

  inline bool has_oneof_field() const;
  inline void clear_has_oneof_field();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > repeated_int32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > repeated_int64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > repeated_uint32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > repeated_uint64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > repeated_sint32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > repeated_sint64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > repeated_fixed32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > repeated_fixed64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > repeated_sfixed32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > repeated_sfixed64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > repeated_float_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > repeated_double_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > repeated_bool_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeated_string_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeated_bytes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage > repeated_nested_message_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_test_messages::proto2::ForeignMessageProto2 > repeated_foreign_message_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> repeated_nested_enum_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> repeated_foreign_enum_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeated_string_piece_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeated_cord_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestAllTypesProto2_MapInt32Int32Entry_DoNotUse,
        int32_t, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> map_int32_int32_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestAllTypesProto2_MapInt64Int64Entry_DoNotUse,
        int64_t, int64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64> map_int64_int64_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> map_uint32_uint32_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse,
        uint64_t, uint64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> map_uint64_uint64_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse,
        int32_t, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32> map_sint32_sint32_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse,
        int64_t, int64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT64> map_sint64_sint64_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse,
        uint32_t, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32> map_fixed32_fixed32_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse,
        uint64_t, uint64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64> map_fixed64_fixed64_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse,
        int32_t, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SFIXED32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SFIXED32> map_sfixed32_sfixed32_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse,
        int64_t, int64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SFIXED64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SFIXED64> map_sfixed64_sfixed64_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestAllTypesProto2_MapInt32FloatEntry_DoNotUse,
        int32_t, float,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> map_int32_float_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse,
        int32_t, double,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> map_int32_double_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestAllTypesProto2_MapBoolBoolEntry_DoNotUse,
        bool, bool,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL> map_bool_bool_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestAllTypesProto2_MapStringStringEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> map_string_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestAllTypesProto2_MapStringBytesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> map_string_bytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse,
        std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> map_string_nested_message_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse,
        std::string, ::protobuf_test_messages::proto2::ForeignMessageProto2,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> map_string_foreign_message_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse,
        std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> map_string_nested_enum_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse,
        std::string, ::protobuf_test_messages::proto2::ForeignEnumProto2,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM> map_string_foreign_enum_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > packed_int32_;
    mutable std::atomic<int> _packed_int32_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > packed_int64_;
    mutable std::atomic<int> _packed_int64_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > packed_uint32_;
    mutable std::atomic<int> _packed_uint32_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > packed_uint64_;
    mutable std::atomic<int> _packed_uint64_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > packed_sint32_;
    mutable std::atomic<int> _packed_sint32_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > packed_sint64_;
    mutable std::atomic<int> _packed_sint64_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > packed_fixed32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > packed_fixed64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > packed_sfixed32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > packed_sfixed64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > packed_float_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > packed_double_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > packed_bool_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> packed_nested_enum_;
    mutable std::atomic<int> _packed_nested_enum_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > unpacked_int32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > unpacked_int64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > unpacked_uint32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > unpacked_uint64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > unpacked_sint32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > unpacked_sint64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > unpacked_fixed32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > unpacked_fixed64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > unpacked_sfixed32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > unpacked_sfixed64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > unpacked_float_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > unpacked_double_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > unpacked_bool_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> unpacked_nested_enum_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_bytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_string_piece_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_cord_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_default_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_string_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_default_bytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_bytes_;
    ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* optional_nested_message_;
    ::protobuf_test_messages::proto2::ForeignMessageProto2* optional_foreign_message_;
    ::protobuf_test_messages::proto2::TestAllTypesProto2* recursive_message_;
    ::protobuf_test_messages::proto2::TestAllTypesProto2_Data* data_;
    int64_t optional_int64_;
    int32_t optional_int32_;
    uint32_t optional_uint32_;
    uint64_t optional_uint64_;
    int64_t optional_sint64_;
    int32_t optional_sint32_;
    uint32_t optional_fixed32_;
    uint64_t optional_fixed64_;
    int64_t optional_sfixed64_;
    int32_t optional_sfixed32_;
    float optional_float_;
    double optional_double_;
    bool optional_bool_;
    int optional_nested_enum_;
    int optional_foreign_enum_;
    int32_t fieldname1_;
    int32_t field_name2_;
    int32_t _field_name3_;
    int32_t field__name4__;
    int32_t field0name5_;
    int32_t field_0_name6_;
    int32_t fieldname7_;
    int32_t fieldname8_;
    int32_t field_name9_;
    int32_t field_name10_;
    int32_t field_name11_;
    int32_t field_name12_;
    int32_t __field_name13_;
    int32_t __field_name14_;
    int32_t field__name15_;
    int32_t field__name16_;
    int32_t field_name17___;
    int32_t field_name18___;
    bool default_bool_;
    int64_t default_int64_;
    int32_t default_int32_;
    uint32_t default_uint32_;
    uint64_t default_uint64_;
    int64_t default_sint64_;
    int32_t default_sint32_;
    uint32_t default_fixed32_;
    uint64_t default_fixed64_;
    int64_t default_sfixed64_;
    int32_t default_sfixed32_;
    float default_float_;
    double default_double_;
    union OneofFieldUnion {
      constexpr OneofFieldUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t oneof_uint32_;
      ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* oneof_nested_message_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_string_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oneof_bytes_;
      bool oneof_bool_;
      uint64_t oneof_uint64_;
      float oneof_float_;
      double oneof_double_;
      int oneof_enum_;
    } oneof_field_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};
// -------------------------------------------------------------------

class ForeignMessageProto2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_test_messages.proto2.ForeignMessageProto2) */ {
 public:
  inline ForeignMessageProto2() : ForeignMessageProto2(nullptr) {}
  ~ForeignMessageProto2() override;
  explicit PROTOBUF_CONSTEXPR ForeignMessageProto2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForeignMessageProto2(const ForeignMessageProto2& from);
  ForeignMessageProto2(ForeignMessageProto2&& from) noexcept
    : ForeignMessageProto2() {
    *this = ::std::move(from);
  }

  inline ForeignMessageProto2& operator=(const ForeignMessageProto2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForeignMessageProto2& operator=(ForeignMessageProto2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForeignMessageProto2& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForeignMessageProto2* internal_default_instance() {
    return reinterpret_cast<const ForeignMessageProto2*>(
               &_ForeignMessageProto2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ForeignMessageProto2& a, ForeignMessageProto2& b) {
    a.Swap(&b);
  }
  inline void Swap(ForeignMessageProto2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForeignMessageProto2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ForeignMessageProto2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ForeignMessageProto2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ForeignMessageProto2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ForeignMessageProto2& from) {
    ForeignMessageProto2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForeignMessageProto2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_test_messages.proto2.ForeignMessageProto2";
  }
  protected:
  explicit ForeignMessageProto2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCFieldNumber = 1,
  };
  // optional int32 c = 1;
  bool has_c() const;
  private:
  bool _internal_has_c() const;
  public:
  void clear_c();
  int32_t c() const;
  void set_c(int32_t value);
  private:
  int32_t _internal_c() const;
  void _internal_set_c(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_test_messages.proto2.ForeignMessageProto2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t c_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};
// -------------------------------------------------------------------

class UnknownToTestAllTypes_OptionalGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup) */ {
 public:
  inline UnknownToTestAllTypes_OptionalGroup() : UnknownToTestAllTypes_OptionalGroup(nullptr) {}
  ~UnknownToTestAllTypes_OptionalGroup() override;
  explicit PROTOBUF_CONSTEXPR UnknownToTestAllTypes_OptionalGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnknownToTestAllTypes_OptionalGroup(const UnknownToTestAllTypes_OptionalGroup& from);
  UnknownToTestAllTypes_OptionalGroup(UnknownToTestAllTypes_OptionalGroup&& from) noexcept
    : UnknownToTestAllTypes_OptionalGroup() {
    *this = ::std::move(from);
  }

  inline UnknownToTestAllTypes_OptionalGroup& operator=(const UnknownToTestAllTypes_OptionalGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnknownToTestAllTypes_OptionalGroup& operator=(UnknownToTestAllTypes_OptionalGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnknownToTestAllTypes_OptionalGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnknownToTestAllTypes_OptionalGroup* internal_default_instance() {
    return reinterpret_cast<const UnknownToTestAllTypes_OptionalGroup*>(
               &_UnknownToTestAllTypes_OptionalGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(UnknownToTestAllTypes_OptionalGroup& a, UnknownToTestAllTypes_OptionalGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(UnknownToTestAllTypes_OptionalGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnknownToTestAllTypes_OptionalGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnknownToTestAllTypes_OptionalGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnknownToTestAllTypes_OptionalGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnknownToTestAllTypes_OptionalGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnknownToTestAllTypes_OptionalGroup& from) {
    UnknownToTestAllTypes_OptionalGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnknownToTestAllTypes_OptionalGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup";
  }
  protected:
  explicit UnknownToTestAllTypes_OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
  };
  // optional int32 a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  int32_t a() const;
  void set_a(int32_t value);
  private:
  int32_t _internal_a() const;
  void _internal_set_a(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t a_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};
// -------------------------------------------------------------------

class UnknownToTestAllTypes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_test_messages.proto2.UnknownToTestAllTypes) */ {
 public:
  inline UnknownToTestAllTypes() : UnknownToTestAllTypes(nullptr) {}
  ~UnknownToTestAllTypes() override;
  explicit PROTOBUF_CONSTEXPR UnknownToTestAllTypes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnknownToTestAllTypes(const UnknownToTestAllTypes& from);
  UnknownToTestAllTypes(UnknownToTestAllTypes&& from) noexcept
    : UnknownToTestAllTypes() {
    *this = ::std::move(from);
  }

  inline UnknownToTestAllTypes& operator=(const UnknownToTestAllTypes& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnknownToTestAllTypes& operator=(UnknownToTestAllTypes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnknownToTestAllTypes& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnknownToTestAllTypes* internal_default_instance() {
    return reinterpret_cast<const UnknownToTestAllTypes*>(
               &_UnknownToTestAllTypes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(UnknownToTestAllTypes& a, UnknownToTestAllTypes& b) {
    a.Swap(&b);
  }
  inline void Swap(UnknownToTestAllTypes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnknownToTestAllTypes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnknownToTestAllTypes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnknownToTestAllTypes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnknownToTestAllTypes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnknownToTestAllTypes& from) {
    UnknownToTestAllTypes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnknownToTestAllTypes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_test_messages.proto2.UnknownToTestAllTypes";
  }
  protected:
  explicit UnknownToTestAllTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UnknownToTestAllTypes_OptionalGroup OptionalGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedInt32FieldNumber = 1011,
    kOptionalStringFieldNumber = 1002,
    kNestedMessageFieldNumber = 1003,
    kOptionalgroupFieldNumber = 1004,
    kOptionalInt32FieldNumber = 1001,
    kOptionalBoolFieldNumber = 1006,
  };
  // repeated int32 repeated_int32 = 1011;
  int repeated_int32_size() const;
  private:
  int _internal_repeated_int32_size() const;
  public:
  void clear_repeated_int32();
  private:
  int32_t _internal_repeated_int32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_repeated_int32() const;
  void _internal_add_repeated_int32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_repeated_int32();
  public:
  int32_t repeated_int32(int index) const;
  void set_repeated_int32(int index, int32_t value);
  void add_repeated_int32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      repeated_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_repeated_int32();

  // optional string optional_string = 1002;
  bool has_optional_string() const;
  private:
  bool _internal_has_optional_string() const;
  public:
  void clear_optional_string();
  const std::string& optional_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_optional_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_optional_string();
  PROTOBUF_NODISCARD std::string* release_optional_string();
  void set_allocated_optional_string(std::string* optional_string);
  private:
  const std::string& _internal_optional_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_optional_string(const std::string& value);
  std::string* _internal_mutable_optional_string();
  public:

  // optional .protobuf_test_messages.proto2.ForeignMessageProto2 nested_message = 1003;
  bool has_nested_message() const;
  private:
  bool _internal_has_nested_message() const;
  public:
  void clear_nested_message();
  const ::protobuf_test_messages::proto2::ForeignMessageProto2& nested_message() const;
  PROTOBUF_NODISCARD ::protobuf_test_messages::proto2::ForeignMessageProto2* release_nested_message();
  ::protobuf_test_messages::proto2::ForeignMessageProto2* mutable_nested_message();
  void set_allocated_nested_message(::protobuf_test_messages::proto2::ForeignMessageProto2* nested_message);
  private:
  const ::protobuf_test_messages::proto2::ForeignMessageProto2& _internal_nested_message() const;
  ::protobuf_test_messages::proto2::ForeignMessageProto2* _internal_mutable_nested_message();
  public:
  void unsafe_arena_set_allocated_nested_message(
      ::protobuf_test_messages::proto2::ForeignMessageProto2* nested_message);
  ::protobuf_test_messages::proto2::ForeignMessageProto2* unsafe_arena_release_nested_message();

  // optional group OptionalGroup = 1004 { ... };
  bool has_optionalgroup() const;
  private:
  bool _internal_has_optionalgroup() const;
  public:
  void clear_optionalgroup();
  const ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup& optionalgroup() const;
  PROTOBUF_NODISCARD ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup* release_optionalgroup();
  ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup* mutable_optionalgroup();
  void set_allocated_optionalgroup(::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup* optionalgroup);
  private:
  const ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup& _internal_optionalgroup() const;
  ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup* _internal_mutable_optionalgroup();
  public:
  void unsafe_arena_set_allocated_optionalgroup(
      ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup* optionalgroup);
  ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup* unsafe_arena_release_optionalgroup();

  // optional int32 optional_int32 = 1001;
  bool has_optional_int32() const;
  private:
  bool _internal_has_optional_int32() const;
  public:
  void clear_optional_int32();
  int32_t optional_int32() const;
  void set_optional_int32(int32_t value);
  private:
  int32_t _internal_optional_int32() const;
  void _internal_set_optional_int32(int32_t value);
  public:

  // optional bool optional_bool = 1006;
  bool has_optional_bool() const;
  private:
  bool _internal_has_optional_bool() const;
  public:
  void clear_optional_bool();
  bool optional_bool() const;
  void set_optional_bool(bool value);
  private:
  bool _internal_optional_bool() const;
  void _internal_set_optional_bool(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protobuf_test_messages.proto2.UnknownToTestAllTypes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > repeated_int32_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr optional_string_;
    ::protobuf_test_messages::proto2::ForeignMessageProto2* nested_message_;
    ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup* optionalgroup_;
    int32_t optional_int32_;
    bool optional_bool_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};
// -------------------------------------------------------------------

class NullHypothesisProto2 final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protobuf_test_messages.proto2.NullHypothesisProto2) */ {
 public:
  inline NullHypothesisProto2() : NullHypothesisProto2(nullptr) {}
  explicit PROTOBUF_CONSTEXPR NullHypothesisProto2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NullHypothesisProto2(const NullHypothesisProto2& from);
  NullHypothesisProto2(NullHypothesisProto2&& from) noexcept
    : NullHypothesisProto2() {
    *this = ::std::move(from);
  }

  inline NullHypothesisProto2& operator=(const NullHypothesisProto2& from) {
    CopyFrom(from);
    return *this;
  }
  inline NullHypothesisProto2& operator=(NullHypothesisProto2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NullHypothesisProto2& default_instance() {
    return *internal_default_instance();
  }
  static inline const NullHypothesisProto2* internal_default_instance() {
    return reinterpret_cast<const NullHypothesisProto2*>(
               &_NullHypothesisProto2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(NullHypothesisProto2& a, NullHypothesisProto2& b) {
    a.Swap(&b);
  }
  inline void Swap(NullHypothesisProto2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NullHypothesisProto2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NullHypothesisProto2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NullHypothesisProto2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NullHypothesisProto2& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NullHypothesisProto2& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_test_messages.proto2.NullHypothesisProto2";
  }
  protected:
  explicit NullHypothesisProto2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_test_messages.proto2.NullHypothesisProto2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};
// -------------------------------------------------------------------

class EnumOnlyProto2 final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protobuf_test_messages.proto2.EnumOnlyProto2) */ {
 public:
  inline EnumOnlyProto2() : EnumOnlyProto2(nullptr) {}
  explicit PROTOBUF_CONSTEXPR EnumOnlyProto2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnumOnlyProto2(const EnumOnlyProto2& from);
  EnumOnlyProto2(EnumOnlyProto2&& from) noexcept
    : EnumOnlyProto2() {
    *this = ::std::move(from);
  }

  inline EnumOnlyProto2& operator=(const EnumOnlyProto2& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnumOnlyProto2& operator=(EnumOnlyProto2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnumOnlyProto2& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnumOnlyProto2* internal_default_instance() {
    return reinterpret_cast<const EnumOnlyProto2*>(
               &_EnumOnlyProto2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(EnumOnlyProto2& a, EnumOnlyProto2& b) {
    a.Swap(&b);
  }
  inline void Swap(EnumOnlyProto2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnumOnlyProto2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnumOnlyProto2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnumOnlyProto2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EnumOnlyProto2& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EnumOnlyProto2& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_test_messages.proto2.EnumOnlyProto2";
  }
  protected:
  explicit EnumOnlyProto2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EnumOnlyProto2_Bool Bool;
  static constexpr Bool kFalse =
    EnumOnlyProto2_Bool_kFalse;
  static constexpr Bool kTrue =
    EnumOnlyProto2_Bool_kTrue;
  static inline bool Bool_IsValid(int value) {
    return EnumOnlyProto2_Bool_IsValid(value);
  }
  static constexpr Bool Bool_MIN =
    EnumOnlyProto2_Bool_Bool_MIN;
  static constexpr Bool Bool_MAX =
    EnumOnlyProto2_Bool_Bool_MAX;
  static constexpr int Bool_ARRAYSIZE =
    EnumOnlyProto2_Bool_Bool_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Bool_descriptor() {
    return EnumOnlyProto2_Bool_descriptor();
  }
  template<typename T>
  static inline const std::string& Bool_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Bool>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Bool_Name.");
    return EnumOnlyProto2_Bool_Name(enum_t_value);
  }
  static inline bool Bool_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Bool* value) {
    return EnumOnlyProto2_Bool_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_test_messages.proto2.EnumOnlyProto2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};
// -------------------------------------------------------------------

class OneStringProto2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_test_messages.proto2.OneStringProto2) */ {
 public:
  inline OneStringProto2() : OneStringProto2(nullptr) {}
  ~OneStringProto2() override;
  explicit PROTOBUF_CONSTEXPR OneStringProto2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OneStringProto2(const OneStringProto2& from);
  OneStringProto2(OneStringProto2&& from) noexcept
    : OneStringProto2() {
    *this = ::std::move(from);
  }

  inline OneStringProto2& operator=(const OneStringProto2& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneStringProto2& operator=(OneStringProto2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OneStringProto2& default_instance() {
    return *internal_default_instance();
  }
  static inline const OneStringProto2* internal_default_instance() {
    return reinterpret_cast<const OneStringProto2*>(
               &_OneStringProto2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(OneStringProto2& a, OneStringProto2& b) {
    a.Swap(&b);
  }
  inline void Swap(OneStringProto2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneStringProto2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OneStringProto2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OneStringProto2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OneStringProto2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OneStringProto2& from) {
    OneStringProto2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneStringProto2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protobuf_test_messages.proto2.OneStringProto2";
  }
  protected:
  explicit OneStringProto2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional string data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:protobuf_test_messages.proto2.OneStringProto2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
};
// ===================================================================

static const int kExtensionInt32FieldNumber = 120;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_test_messages::proto2::TestAllTypesProto2,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
  extension_int32;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestAllTypesProto2_NestedMessage

// optional int32 a = 1;
inline bool TestAllTypesProto2_NestedMessage::_internal_has_a() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestAllTypesProto2_NestedMessage::has_a() const {
  return _internal_has_a();
}
inline void TestAllTypesProto2_NestedMessage::clear_a() {
  _impl_.a_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t TestAllTypesProto2_NestedMessage::_internal_a() const {
  return _impl_.a_;
}
inline int32_t TestAllTypesProto2_NestedMessage::a() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage.a)
  return _internal_a();
}
inline void TestAllTypesProto2_NestedMessage::_internal_set_a(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.a_ = value;
}
inline void TestAllTypesProto2_NestedMessage::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage.a)
}

// optional .protobuf_test_messages.proto2.TestAllTypesProto2 corecursive = 2;
inline bool TestAllTypesProto2_NestedMessage::_internal_has_corecursive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.corecursive_ != nullptr);
  return value;
}
inline bool TestAllTypesProto2_NestedMessage::has_corecursive() const {
  return _internal_has_corecursive();
}
inline void TestAllTypesProto2_NestedMessage::clear_corecursive() {
  if (_impl_.corecursive_ != nullptr) _impl_.corecursive_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::protobuf_test_messages::proto2::TestAllTypesProto2& TestAllTypesProto2_NestedMessage::_internal_corecursive() const {
  const ::protobuf_test_messages::proto2::TestAllTypesProto2* p = _impl_.corecursive_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_test_messages::proto2::TestAllTypesProto2&>(
      ::protobuf_test_messages::proto2::_TestAllTypesProto2_default_instance_);
}
inline const ::protobuf_test_messages::proto2::TestAllTypesProto2& TestAllTypesProto2_NestedMessage::corecursive() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage.corecursive)
  return _internal_corecursive();
}
inline void TestAllTypesProto2_NestedMessage::unsafe_arena_set_allocated_corecursive(
    ::protobuf_test_messages::proto2::TestAllTypesProto2* corecursive) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.corecursive_);
  }
  _impl_.corecursive_ = corecursive;
  if (corecursive) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage.corecursive)
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2* TestAllTypesProto2_NestedMessage::release_corecursive() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protobuf_test_messages::proto2::TestAllTypesProto2* temp = _impl_.corecursive_;
  _impl_.corecursive_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2* TestAllTypesProto2_NestedMessage::unsafe_arena_release_corecursive() {
  // @@protoc_insertion_point(field_release:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage.corecursive)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protobuf_test_messages::proto2::TestAllTypesProto2* temp = _impl_.corecursive_;
  _impl_.corecursive_ = nullptr;
  return temp;
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2* TestAllTypesProto2_NestedMessage::_internal_mutable_corecursive() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.corecursive_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2>(GetArenaForAllocation());
    _impl_.corecursive_ = p;
  }
  return _impl_.corecursive_;
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2* TestAllTypesProto2_NestedMessage::mutable_corecursive() {
  ::protobuf_test_messages::proto2::TestAllTypesProto2* _msg = _internal_mutable_corecursive();
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage.corecursive)
  return _msg;
}
inline void TestAllTypesProto2_NestedMessage::set_allocated_corecursive(::protobuf_test_messages::proto2::TestAllTypesProto2* corecursive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.corecursive_;
  }
  if (corecursive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(corecursive);
    if (message_arena != submessage_arena) {
      corecursive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, corecursive, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.corecursive_ = corecursive;
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage.corecursive)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TestAllTypesProto2_Data

// optional int32 group_int32 = 202;
inline bool TestAllTypesProto2_Data::_internal_has_group_int32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestAllTypesProto2_Data::has_group_int32() const {
  return _internal_has_group_int32();
}
inline void TestAllTypesProto2_Data::clear_group_int32() {
  _impl_.group_int32_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestAllTypesProto2_Data::_internal_group_int32() const {
  return _impl_.group_int32_;
}
inline int32_t TestAllTypesProto2_Data::group_int32() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.Data.group_int32)
  return _internal_group_int32();
}
inline void TestAllTypesProto2_Data::_internal_set_group_int32(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.group_int32_ = value;
}
inline void TestAllTypesProto2_Data::set_group_int32(int32_t value) {
  _internal_set_group_int32(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.Data.group_int32)
}

// optional uint32 group_uint32 = 203;
inline bool TestAllTypesProto2_Data::_internal_has_group_uint32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestAllTypesProto2_Data::has_group_uint32() const {
  return _internal_has_group_uint32();
}
inline void TestAllTypesProto2_Data::clear_group_uint32() {
  _impl_.group_uint32_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t TestAllTypesProto2_Data::_internal_group_uint32() const {
  return _impl_.group_uint32_;
}
inline uint32_t TestAllTypesProto2_Data::group_uint32() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.Data.group_uint32)
  return _internal_group_uint32();
}
inline void TestAllTypesProto2_Data::_internal_set_group_uint32(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_uint32_ = value;
}
inline void TestAllTypesProto2_Data::set_group_uint32(uint32_t value) {
  _internal_set_group_uint32(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.Data.group_uint32)
}

// -------------------------------------------------------------------

// TestAllTypesProto2_MessageSetCorrect

// -------------------------------------------------------------------

// TestAllTypesProto2_MessageSetCorrectExtension1

// optional string str = 25;
inline bool TestAllTypesProto2_MessageSetCorrectExtension1::_internal_has_str() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestAllTypesProto2_MessageSetCorrectExtension1::has_str() const {
  return _internal_has_str();
}
inline void TestAllTypesProto2_MessageSetCorrectExtension1::clear_str() {
  _impl_.str_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestAllTypesProto2_MessageSetCorrectExtension1::str() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestAllTypesProto2_MessageSetCorrectExtension1::set_str(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1.str)
}
inline std::string* TestAllTypesProto2_MessageSetCorrectExtension1::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1.str)
  return _s;
}
inline const std::string& TestAllTypesProto2_MessageSetCorrectExtension1::_internal_str() const {
  return _impl_.str_.Get();
}
inline void TestAllTypesProto2_MessageSetCorrectExtension1::_internal_set_str(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.str_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAllTypesProto2_MessageSetCorrectExtension1::_internal_mutable_str() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.str_.Mutable(GetArenaForAllocation());
}
inline std::string* TestAllTypesProto2_MessageSetCorrectExtension1::release_str() {
  // @@protoc_insertion_point(field_release:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1.str)
  if (!_internal_has_str()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.str_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.str_.IsDefault()) {
    _impl_.str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestAllTypesProto2_MessageSetCorrectExtension1::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.str_.SetAllocated(str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.str_.IsDefault()) {
    _impl_.str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1.str)
}

// -------------------------------------------------------------------

// TestAllTypesProto2_MessageSetCorrectExtension2

// optional int32 i = 9;
inline bool TestAllTypesProto2_MessageSetCorrectExtension2::_internal_has_i() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestAllTypesProto2_MessageSetCorrectExtension2::has_i() const {
  return _internal_has_i();
}
inline void TestAllTypesProto2_MessageSetCorrectExtension2::clear_i() {
  _impl_.i_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t TestAllTypesProto2_MessageSetCorrectExtension2::_internal_i() const {
  return _impl_.i_;
}
inline int32_t TestAllTypesProto2_MessageSetCorrectExtension2::i() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2.i)
  return _internal_i();
}
inline void TestAllTypesProto2_MessageSetCorrectExtension2::_internal_set_i(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.i_ = value;
}
inline void TestAllTypesProto2_MessageSetCorrectExtension2::set_i(int32_t value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2.i)
}

// -------------------------------------------------------------------

// TestAllTypesProto2

// optional int32 optional_int32 = 1;
inline bool TestAllTypesProto2::_internal_has_optional_int32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_optional_int32() const {
  return _internal_has_optional_int32();
}
inline void TestAllTypesProto2::clear_optional_int32() {
  _impl_.optional_int32_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t TestAllTypesProto2::_internal_optional_int32() const {
  return _impl_.optional_int32_;
}
inline int32_t TestAllTypesProto2::optional_int32() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_int32)
  return _internal_optional_int32();
}
inline void TestAllTypesProto2::_internal_set_optional_int32(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.optional_int32_ = value;
}
inline void TestAllTypesProto2::set_optional_int32(int32_t value) {
  _internal_set_optional_int32(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.optional_int32)
}

// optional int64 optional_int64 = 2;
inline bool TestAllTypesProto2::_internal_has_optional_int64() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_optional_int64() const {
  return _internal_has_optional_int64();
}
inline void TestAllTypesProto2::clear_optional_int64() {
  _impl_.optional_int64_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int64_t TestAllTypesProto2::_internal_optional_int64() const {
  return _impl_.optional_int64_;
}
inline int64_t TestAllTypesProto2::optional_int64() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_int64)
  return _internal_optional_int64();
}
inline void TestAllTypesProto2::_internal_set_optional_int64(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.optional_int64_ = value;
}
inline void TestAllTypesProto2::set_optional_int64(int64_t value) {
  _internal_set_optional_int64(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.optional_int64)
}

// optional uint32 optional_uint32 = 3;
inline bool TestAllTypesProto2::_internal_has_optional_uint32() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_optional_uint32() const {
  return _internal_has_optional_uint32();
}
inline void TestAllTypesProto2::clear_optional_uint32() {
  _impl_.optional_uint32_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t TestAllTypesProto2::_internal_optional_uint32() const {
  return _impl_.optional_uint32_;
}
inline uint32_t TestAllTypesProto2::optional_uint32() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_uint32)
  return _internal_optional_uint32();
}
inline void TestAllTypesProto2::_internal_set_optional_uint32(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.optional_uint32_ = value;
}
inline void TestAllTypesProto2::set_optional_uint32(uint32_t value) {
  _internal_set_optional_uint32(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.optional_uint32)
}

// optional uint64 optional_uint64 = 4;
inline bool TestAllTypesProto2::_internal_has_optional_uint64() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_optional_uint64() const {
  return _internal_has_optional_uint64();
}
inline void TestAllTypesProto2::clear_optional_uint64() {
  _impl_.optional_uint64_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint64_t TestAllTypesProto2::_internal_optional_uint64() const {
  return _impl_.optional_uint64_;
}
inline uint64_t TestAllTypesProto2::optional_uint64() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_uint64)
  return _internal_optional_uint64();
}
inline void TestAllTypesProto2::_internal_set_optional_uint64(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.optional_uint64_ = value;
}
inline void TestAllTypesProto2::set_optional_uint64(uint64_t value) {
  _internal_set_optional_uint64(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.optional_uint64)
}

// optional sint32 optional_sint32 = 5;
inline bool TestAllTypesProto2::_internal_has_optional_sint32() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_optional_sint32() const {
  return _internal_has_optional_sint32();
}
inline void TestAllTypesProto2::clear_optional_sint32() {
  _impl_.optional_sint32_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int32_t TestAllTypesProto2::_internal_optional_sint32() const {
  return _impl_.optional_sint32_;
}
inline int32_t TestAllTypesProto2::optional_sint32() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_sint32)
  return _internal_optional_sint32();
}
inline void TestAllTypesProto2::_internal_set_optional_sint32(int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.optional_sint32_ = value;
}
inline void TestAllTypesProto2::set_optional_sint32(int32_t value) {
  _internal_set_optional_sint32(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.optional_sint32)
}

// optional sint64 optional_sint64 = 6;
inline bool TestAllTypesProto2::_internal_has_optional_sint64() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_optional_sint64() const {
  return _internal_has_optional_sint64();
}
inline void TestAllTypesProto2::clear_optional_sint64() {
  _impl_.optional_sint64_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int64_t TestAllTypesProto2::_internal_optional_sint64() const {
  return _impl_.optional_sint64_;
}
inline int64_t TestAllTypesProto2::optional_sint64() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_sint64)
  return _internal_optional_sint64();
}
inline void TestAllTypesProto2::_internal_set_optional_sint64(int64_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.optional_sint64_ = value;
}
inline void TestAllTypesProto2::set_optional_sint64(int64_t value) {
  _internal_set_optional_sint64(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.optional_sint64)
}

// optional fixed32 optional_fixed32 = 7;
inline bool TestAllTypesProto2::_internal_has_optional_fixed32() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_optional_fixed32() const {
  return _internal_has_optional_fixed32();
}
inline void TestAllTypesProto2::clear_optional_fixed32() {
  _impl_.optional_fixed32_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t TestAllTypesProto2::_internal_optional_fixed32() const {
  return _impl_.optional_fixed32_;
}
inline uint32_t TestAllTypesProto2::optional_fixed32() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_fixed32)
  return _internal_optional_fixed32();
}
inline void TestAllTypesProto2::_internal_set_optional_fixed32(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.optional_fixed32_ = value;
}
inline void TestAllTypesProto2::set_optional_fixed32(uint32_t value) {
  _internal_set_optional_fixed32(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.optional_fixed32)
}

// optional fixed64 optional_fixed64 = 8;
inline bool TestAllTypesProto2::_internal_has_optional_fixed64() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_optional_fixed64() const {
  return _internal_has_optional_fixed64();
}
inline void TestAllTypesProto2::clear_optional_fixed64() {
  _impl_.optional_fixed64_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint64_t TestAllTypesProto2::_internal_optional_fixed64() const {
  return _impl_.optional_fixed64_;
}
inline uint64_t TestAllTypesProto2::optional_fixed64() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_fixed64)
  return _internal_optional_fixed64();
}
inline void TestAllTypesProto2::_internal_set_optional_fixed64(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.optional_fixed64_ = value;
}
inline void TestAllTypesProto2::set_optional_fixed64(uint64_t value) {
  _internal_set_optional_fixed64(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.optional_fixed64)
}

// optional sfixed32 optional_sfixed32 = 9;
inline bool TestAllTypesProto2::_internal_has_optional_sfixed32() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_optional_sfixed32() const {
  return _internal_has_optional_sfixed32();
}
inline void TestAllTypesProto2::clear_optional_sfixed32() {
  _impl_.optional_sfixed32_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline int32_t TestAllTypesProto2::_internal_optional_sfixed32() const {
  return _impl_.optional_sfixed32_;
}
inline int32_t TestAllTypesProto2::optional_sfixed32() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_sfixed32)
  return _internal_optional_sfixed32();
}
inline void TestAllTypesProto2::_internal_set_optional_sfixed32(int32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.optional_sfixed32_ = value;
}
inline void TestAllTypesProto2::set_optional_sfixed32(int32_t value) {
  _internal_set_optional_sfixed32(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.optional_sfixed32)
}

// optional sfixed64 optional_sfixed64 = 10;
inline bool TestAllTypesProto2::_internal_has_optional_sfixed64() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_optional_sfixed64() const {
  return _internal_has_optional_sfixed64();
}
inline void TestAllTypesProto2::clear_optional_sfixed64() {
  _impl_.optional_sfixed64_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline int64_t TestAllTypesProto2::_internal_optional_sfixed64() const {
  return _impl_.optional_sfixed64_;
}
inline int64_t TestAllTypesProto2::optional_sfixed64() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_sfixed64)
  return _internal_optional_sfixed64();
}
inline void TestAllTypesProto2::_internal_set_optional_sfixed64(int64_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.optional_sfixed64_ = value;
}
inline void TestAllTypesProto2::set_optional_sfixed64(int64_t value) {
  _internal_set_optional_sfixed64(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.optional_sfixed64)
}

// optional float optional_float = 11;
inline bool TestAllTypesProto2::_internal_has_optional_float() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_optional_float() const {
  return _internal_has_optional_float();
}
inline void TestAllTypesProto2::clear_optional_float() {
  _impl_.optional_float_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline float TestAllTypesProto2::_internal_optional_float() const {
  return _impl_.optional_float_;
}
inline float TestAllTypesProto2::optional_float() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_float)
  return _internal_optional_float();
}
inline void TestAllTypesProto2::_internal_set_optional_float(float value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.optional_float_ = value;
}
inline void TestAllTypesProto2::set_optional_float(float value) {
  _internal_set_optional_float(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.optional_float)
}

// optional double optional_double = 12;
inline bool TestAllTypesProto2::_internal_has_optional_double() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_optional_double() const {
  return _internal_has_optional_double();
}
inline void TestAllTypesProto2::clear_optional_double() {
  _impl_.optional_double_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline double TestAllTypesProto2::_internal_optional_double() const {
  return _impl_.optional_double_;
}
inline double TestAllTypesProto2::optional_double() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_double)
  return _internal_optional_double();
}
inline void TestAllTypesProto2::_internal_set_optional_double(double value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.optional_double_ = value;
}
inline void TestAllTypesProto2::set_optional_double(double value) {
  _internal_set_optional_double(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.optional_double)
}

// optional bool optional_bool = 13;
inline bool TestAllTypesProto2::_internal_has_optional_bool() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_optional_bool() const {
  return _internal_has_optional_bool();
}
inline void TestAllTypesProto2::clear_optional_bool() {
  _impl_.optional_bool_ = false;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline bool TestAllTypesProto2::_internal_optional_bool() const {
  return _impl_.optional_bool_;
}
inline bool TestAllTypesProto2::optional_bool() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_bool)
  return _internal_optional_bool();
}
inline void TestAllTypesProto2::_internal_set_optional_bool(bool value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.optional_bool_ = value;
}
inline void TestAllTypesProto2::set_optional_bool(bool value) {
  _internal_set_optional_bool(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.optional_bool)
}

// optional string optional_string = 14;
inline bool TestAllTypesProto2::_internal_has_optional_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_optional_string() const {
  return _internal_has_optional_string();
}
inline void TestAllTypesProto2::clear_optional_string() {
  _impl_.optional_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TestAllTypesProto2::optional_string() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_string)
  return _internal_optional_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestAllTypesProto2::set_optional_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.optional_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.optional_string)
}
inline std::string* TestAllTypesProto2::mutable_optional_string() {
  std::string* _s = _internal_mutable_optional_string();
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.optional_string)
  return _s;
}
inline const std::string& TestAllTypesProto2::_internal_optional_string() const {
  return _impl_.optional_string_.Get();
}
inline void TestAllTypesProto2::_internal_set_optional_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.optional_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAllTypesProto2::_internal_mutable_optional_string() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.optional_string_.Mutable(GetArenaForAllocation());
}
inline std::string* TestAllTypesProto2::release_optional_string() {
  // @@protoc_insertion_point(field_release:protobuf_test_messages.proto2.TestAllTypesProto2.optional_string)
  if (!_internal_has_optional_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.optional_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optional_string_.IsDefault()) {
    _impl_.optional_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestAllTypesProto2::set_allocated_optional_string(std::string* optional_string) {
  if (optional_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.optional_string_.SetAllocated(optional_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optional_string_.IsDefault()) {
    _impl_.optional_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.optional_string)
}

// optional bytes optional_bytes = 15;
inline bool TestAllTypesProto2::_internal_has_optional_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_optional_bytes() const {
  return _internal_has_optional_bytes();
}
inline void TestAllTypesProto2::clear_optional_bytes() {
  _impl_.optional_bytes_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TestAllTypesProto2::optional_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_bytes)
  return _internal_optional_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestAllTypesProto2::set_optional_bytes(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.optional_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.optional_bytes)
}
inline std::string* TestAllTypesProto2::mutable_optional_bytes() {
  std::string* _s = _internal_mutable_optional_bytes();
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.optional_bytes)
  return _s;
}
inline const std::string& TestAllTypesProto2::_internal_optional_bytes() const {
  return _impl_.optional_bytes_.Get();
}
inline void TestAllTypesProto2::_internal_set_optional_bytes(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.optional_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAllTypesProto2::_internal_mutable_optional_bytes() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.optional_bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* TestAllTypesProto2::release_optional_bytes() {
  // @@protoc_insertion_point(field_release:protobuf_test_messages.proto2.TestAllTypesProto2.optional_bytes)
  if (!_internal_has_optional_bytes()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.optional_bytes_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optional_bytes_.IsDefault()) {
    _impl_.optional_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestAllTypesProto2::set_allocated_optional_bytes(std::string* optional_bytes) {
  if (optional_bytes != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.optional_bytes_.SetAllocated(optional_bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optional_bytes_.IsDefault()) {
    _impl_.optional_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.optional_bytes)
}

// optional .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage optional_nested_message = 18;
inline bool TestAllTypesProto2::_internal_has_optional_nested_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.optional_nested_message_ != nullptr);
  return value;
}
inline bool TestAllTypesProto2::has_optional_nested_message() const {
  return _internal_has_optional_nested_message();
}
inline void TestAllTypesProto2::clear_optional_nested_message() {
  if (_impl_.optional_nested_message_ != nullptr) _impl_.optional_nested_message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage& TestAllTypesProto2::_internal_optional_nested_message() const {
  const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* p = _impl_.optional_nested_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage&>(
      ::protobuf_test_messages::proto2::_TestAllTypesProto2_NestedMessage_default_instance_);
}
inline const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage& TestAllTypesProto2::optional_nested_message() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_nested_message)
  return _internal_optional_nested_message();
}
inline void TestAllTypesProto2::unsafe_arena_set_allocated_optional_nested_message(
    ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* optional_nested_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optional_nested_message_);
  }
  _impl_.optional_nested_message_ = optional_nested_message;
  if (optional_nested_message) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.optional_nested_message)
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* TestAllTypesProto2::release_optional_nested_message() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* temp = _impl_.optional_nested_message_;
  _impl_.optional_nested_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* TestAllTypesProto2::unsafe_arena_release_optional_nested_message() {
  // @@protoc_insertion_point(field_release:protobuf_test_messages.proto2.TestAllTypesProto2.optional_nested_message)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* temp = _impl_.optional_nested_message_;
  _impl_.optional_nested_message_ = nullptr;
  return temp;
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* TestAllTypesProto2::_internal_mutable_optional_nested_message() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.optional_nested_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage>(GetArenaForAllocation());
    _impl_.optional_nested_message_ = p;
  }
  return _impl_.optional_nested_message_;
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* TestAllTypesProto2::mutable_optional_nested_message() {
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* _msg = _internal_mutable_optional_nested_message();
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.optional_nested_message)
  return _msg;
}
inline void TestAllTypesProto2::set_allocated_optional_nested_message(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* optional_nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.optional_nested_message_;
  }
  if (optional_nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optional_nested_message);
    if (message_arena != submessage_arena) {
      optional_nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_nested_message, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.optional_nested_message_ = optional_nested_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.optional_nested_message)
}

// optional .protobuf_test_messages.proto2.ForeignMessageProto2 optional_foreign_message = 19;
inline bool TestAllTypesProto2::_internal_has_optional_foreign_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.optional_foreign_message_ != nullptr);
  return value;
}
inline bool TestAllTypesProto2::has_optional_foreign_message() const {
  return _internal_has_optional_foreign_message();
}
inline void TestAllTypesProto2::clear_optional_foreign_message() {
  if (_impl_.optional_foreign_message_ != nullptr) _impl_.optional_foreign_message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::protobuf_test_messages::proto2::ForeignMessageProto2& TestAllTypesProto2::_internal_optional_foreign_message() const {
  const ::protobuf_test_messages::proto2::ForeignMessageProto2* p = _impl_.optional_foreign_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_test_messages::proto2::ForeignMessageProto2&>(
      ::protobuf_test_messages::proto2::_ForeignMessageProto2_default_instance_);
}
inline const ::protobuf_test_messages::proto2::ForeignMessageProto2& TestAllTypesProto2::optional_foreign_message() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_foreign_message)
  return _internal_optional_foreign_message();
}
inline void TestAllTypesProto2::unsafe_arena_set_allocated_optional_foreign_message(
    ::protobuf_test_messages::proto2::ForeignMessageProto2* optional_foreign_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optional_foreign_message_);
  }
  _impl_.optional_foreign_message_ = optional_foreign_message;
  if (optional_foreign_message) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.optional_foreign_message)
}
inline ::protobuf_test_messages::proto2::ForeignMessageProto2* TestAllTypesProto2::release_optional_foreign_message() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::protobuf_test_messages::proto2::ForeignMessageProto2* temp = _impl_.optional_foreign_message_;
  _impl_.optional_foreign_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_test_messages::proto2::ForeignMessageProto2* TestAllTypesProto2::unsafe_arena_release_optional_foreign_message() {
  // @@protoc_insertion_point(field_release:protobuf_test_messages.proto2.TestAllTypesProto2.optional_foreign_message)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::protobuf_test_messages::proto2::ForeignMessageProto2* temp = _impl_.optional_foreign_message_;
  _impl_.optional_foreign_message_ = nullptr;
  return temp;
}
inline ::protobuf_test_messages::proto2::ForeignMessageProto2* TestAllTypesProto2::_internal_mutable_optional_foreign_message() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.optional_foreign_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_test_messages::proto2::ForeignMessageProto2>(GetArenaForAllocation());
    _impl_.optional_foreign_message_ = p;
  }
  return _impl_.optional_foreign_message_;
}
inline ::protobuf_test_messages::proto2::ForeignMessageProto2* TestAllTypesProto2::mutable_optional_foreign_message() {
  ::protobuf_test_messages::proto2::ForeignMessageProto2* _msg = _internal_mutable_optional_foreign_message();
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.optional_foreign_message)
  return _msg;
}
inline void TestAllTypesProto2::set_allocated_optional_foreign_message(::protobuf_test_messages::proto2::ForeignMessageProto2* optional_foreign_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.optional_foreign_message_;
  }
  if (optional_foreign_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optional_foreign_message);
    if (message_arena != submessage_arena) {
      optional_foreign_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optional_foreign_message, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.optional_foreign_message_ = optional_foreign_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.optional_foreign_message)
}

// optional .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum optional_nested_enum = 21;
inline bool TestAllTypesProto2::_internal_has_optional_nested_enum() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_optional_nested_enum() const {
  return _internal_has_optional_nested_enum();
}
inline void TestAllTypesProto2::clear_optional_nested_enum() {
  _impl_.optional_nested_enum_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum TestAllTypesProto2::_internal_optional_nested_enum() const {
  return static_cast< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >(_impl_.optional_nested_enum_);
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum TestAllTypesProto2::optional_nested_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_nested_enum)
  return _internal_optional_nested_enum();
}
inline void TestAllTypesProto2::_internal_set_optional_nested_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value) {
  assert(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid(value));
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.optional_nested_enum_ = value;
}
inline void TestAllTypesProto2::set_optional_nested_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value) {
  _internal_set_optional_nested_enum(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.optional_nested_enum)
}

// optional .protobuf_test_messages.proto2.ForeignEnumProto2 optional_foreign_enum = 22;
inline bool TestAllTypesProto2::_internal_has_optional_foreign_enum() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_optional_foreign_enum() const {
  return _internal_has_optional_foreign_enum();
}
inline void TestAllTypesProto2::clear_optional_foreign_enum() {
  _impl_.optional_foreign_enum_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::protobuf_test_messages::proto2::ForeignEnumProto2 TestAllTypesProto2::_internal_optional_foreign_enum() const {
  return static_cast< ::protobuf_test_messages::proto2::ForeignEnumProto2 >(_impl_.optional_foreign_enum_);
}
inline ::protobuf_test_messages::proto2::ForeignEnumProto2 TestAllTypesProto2::optional_foreign_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_foreign_enum)
  return _internal_optional_foreign_enum();
}
inline void TestAllTypesProto2::_internal_set_optional_foreign_enum(::protobuf_test_messages::proto2::ForeignEnumProto2 value) {
  assert(::protobuf_test_messages::proto2::ForeignEnumProto2_IsValid(value));
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.optional_foreign_enum_ = value;
}
inline void TestAllTypesProto2::set_optional_foreign_enum(::protobuf_test_messages::proto2::ForeignEnumProto2 value) {
  _internal_set_optional_foreign_enum(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.optional_foreign_enum)
}

// optional string optional_string_piece = 24 [ctype = STRING_PIECE];
inline bool TestAllTypesProto2::_internal_has_optional_string_piece() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_optional_string_piece() const {
  return _internal_has_optional_string_piece();
}
inline void TestAllTypesProto2::clear_optional_string_piece() {
  _impl_.optional_string_piece_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TestAllTypesProto2::optional_string_piece() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_string_piece)
  return _internal_optional_string_piece();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestAllTypesProto2::set_optional_string_piece(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.optional_string_piece_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.optional_string_piece)
}
inline std::string* TestAllTypesProto2::mutable_optional_string_piece() {
  std::string* _s = _internal_mutable_optional_string_piece();
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.optional_string_piece)
  return _s;
}
inline const std::string& TestAllTypesProto2::_internal_optional_string_piece() const {
  return _impl_.optional_string_piece_.Get();
}
inline void TestAllTypesProto2::_internal_set_optional_string_piece(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.optional_string_piece_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAllTypesProto2::_internal_mutable_optional_string_piece() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.optional_string_piece_.Mutable(GetArenaForAllocation());
}
inline std::string* TestAllTypesProto2::release_optional_string_piece() {
  // @@protoc_insertion_point(field_release:protobuf_test_messages.proto2.TestAllTypesProto2.optional_string_piece)
  if (!_internal_has_optional_string_piece()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.optional_string_piece_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optional_string_piece_.IsDefault()) {
    _impl_.optional_string_piece_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestAllTypesProto2::set_allocated_optional_string_piece(std::string* optional_string_piece) {
  if (optional_string_piece != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.optional_string_piece_.SetAllocated(optional_string_piece, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optional_string_piece_.IsDefault()) {
    _impl_.optional_string_piece_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.optional_string_piece)
}

// optional string optional_cord = 25 [ctype = CORD];
inline bool TestAllTypesProto2::_internal_has_optional_cord() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_optional_cord() const {
  return _internal_has_optional_cord();
}
inline void TestAllTypesProto2::clear_optional_cord() {
  _impl_.optional_cord_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TestAllTypesProto2::optional_cord() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.optional_cord)
  return _internal_optional_cord();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestAllTypesProto2::set_optional_cord(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.optional_cord_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.optional_cord)
}
inline std::string* TestAllTypesProto2::mutable_optional_cord() {
  std::string* _s = _internal_mutable_optional_cord();
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.optional_cord)
  return _s;
}
inline const std::string& TestAllTypesProto2::_internal_optional_cord() const {
  return _impl_.optional_cord_.Get();
}
inline void TestAllTypesProto2::_internal_set_optional_cord(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.optional_cord_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAllTypesProto2::_internal_mutable_optional_cord() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.optional_cord_.Mutable(GetArenaForAllocation());
}
inline std::string* TestAllTypesProto2::release_optional_cord() {
  // @@protoc_insertion_point(field_release:protobuf_test_messages.proto2.TestAllTypesProto2.optional_cord)
  if (!_internal_has_optional_cord()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.optional_cord_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optional_cord_.IsDefault()) {
    _impl_.optional_cord_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TestAllTypesProto2::set_allocated_optional_cord(std::string* optional_cord) {
  if (optional_cord != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.optional_cord_.SetAllocated(optional_cord, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optional_cord_.IsDefault()) {
    _impl_.optional_cord_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.optional_cord)
}

// optional .protobuf_test_messages.proto2.TestAllTypesProto2 recursive_message = 27;
inline bool TestAllTypesProto2::_internal_has_recursive_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.recursive_message_ != nullptr);
  return value;
}
inline bool TestAllTypesProto2::has_recursive_message() const {
  return _internal_has_recursive_message();
}
inline void TestAllTypesProto2::clear_recursive_message() {
  if (_impl_.recursive_message_ != nullptr) _impl_.recursive_message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::protobuf_test_messages::proto2::TestAllTypesProto2& TestAllTypesProto2::_internal_recursive_message() const {
  const ::protobuf_test_messages::proto2::TestAllTypesProto2* p = _impl_.recursive_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_test_messages::proto2::TestAllTypesProto2&>(
      ::protobuf_test_messages::proto2::_TestAllTypesProto2_default_instance_);
}
inline const ::protobuf_test_messages::proto2::TestAllTypesProto2& TestAllTypesProto2::recursive_message() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.recursive_message)
  return _internal_recursive_message();
}
inline void TestAllTypesProto2::unsafe_arena_set_allocated_recursive_message(
    ::protobuf_test_messages::proto2::TestAllTypesProto2* recursive_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recursive_message_);
  }
  _impl_.recursive_message_ = recursive_message;
  if (recursive_message) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.recursive_message)
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2* TestAllTypesProto2::release_recursive_message() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::protobuf_test_messages::proto2::TestAllTypesProto2* temp = _impl_.recursive_message_;
  _impl_.recursive_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2* TestAllTypesProto2::unsafe_arena_release_recursive_message() {
  // @@protoc_insertion_point(field_release:protobuf_test_messages.proto2.TestAllTypesProto2.recursive_message)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::protobuf_test_messages::proto2::TestAllTypesProto2* temp = _impl_.recursive_message_;
  _impl_.recursive_message_ = nullptr;
  return temp;
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2* TestAllTypesProto2::_internal_mutable_recursive_message() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.recursive_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2>(GetArenaForAllocation());
    _impl_.recursive_message_ = p;
  }
  return _impl_.recursive_message_;
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2* TestAllTypesProto2::mutable_recursive_message() {
  ::protobuf_test_messages::proto2::TestAllTypesProto2* _msg = _internal_mutable_recursive_message();
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.recursive_message)
  return _msg;
}
inline void TestAllTypesProto2::set_allocated_recursive_message(::protobuf_test_messages::proto2::TestAllTypesProto2* recursive_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recursive_message_;
  }
  if (recursive_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recursive_message);
    if (message_arena != submessage_arena) {
      recursive_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recursive_message, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.recursive_message_ = recursive_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.recursive_message)
}

// repeated int32 repeated_int32 = 31;
inline int TestAllTypesProto2::_internal_repeated_int32_size() const {
  return _impl_.repeated_int32_.size();
}
inline int TestAllTypesProto2::repeated_int32_size() const {
  return _internal_repeated_int32_size();
}
inline void TestAllTypesProto2::clear_repeated_int32() {
  _impl_.repeated_int32_.Clear();
}
inline int32_t TestAllTypesProto2::_internal_repeated_int32(int index) const {
  return _impl_.repeated_int32_.Get(index);
}
inline int32_t TestAllTypesProto2::repeated_int32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_int32)
  return _internal_repeated_int32(index);
}
inline void TestAllTypesProto2::set_repeated_int32(int index, int32_t value) {
  _impl_.repeated_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_int32)
}
inline void TestAllTypesProto2::_internal_add_repeated_int32(int32_t value) {
  _impl_.repeated_int32_.Add(value);
}
inline void TestAllTypesProto2::add_repeated_int32(int32_t value) {
  _internal_add_repeated_int32(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypesProto2::_internal_repeated_int32() const {
  return _impl_.repeated_int32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypesProto2::repeated_int32() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_int32)
  return _internal_repeated_int32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypesProto2::_internal_mutable_repeated_int32() {
  return &_impl_.repeated_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypesProto2::mutable_repeated_int32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_int32)
  return _internal_mutable_repeated_int32();
}

// repeated int64 repeated_int64 = 32;
inline int TestAllTypesProto2::_internal_repeated_int64_size() const {
  return _impl_.repeated_int64_.size();
}
inline int TestAllTypesProto2::repeated_int64_size() const {
  return _internal_repeated_int64_size();
}
inline void TestAllTypesProto2::clear_repeated_int64() {
  _impl_.repeated_int64_.Clear();
}
inline int64_t TestAllTypesProto2::_internal_repeated_int64(int index) const {
  return _impl_.repeated_int64_.Get(index);
}
inline int64_t TestAllTypesProto2::repeated_int64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_int64)
  return _internal_repeated_int64(index);
}
inline void TestAllTypesProto2::set_repeated_int64(int index, int64_t value) {
  _impl_.repeated_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_int64)
}
inline void TestAllTypesProto2::_internal_add_repeated_int64(int64_t value) {
  _impl_.repeated_int64_.Add(value);
}
inline void TestAllTypesProto2::add_repeated_int64(int64_t value) {
  _internal_add_repeated_int64(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_int64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypesProto2::_internal_repeated_int64() const {
  return _impl_.repeated_int64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypesProto2::repeated_int64() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_int64)
  return _internal_repeated_int64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypesProto2::_internal_mutable_repeated_int64() {
  return &_impl_.repeated_int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypesProto2::mutable_repeated_int64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_int64)
  return _internal_mutable_repeated_int64();
}

// repeated uint32 repeated_uint32 = 33;
inline int TestAllTypesProto2::_internal_repeated_uint32_size() const {
  return _impl_.repeated_uint32_.size();
}
inline int TestAllTypesProto2::repeated_uint32_size() const {
  return _internal_repeated_uint32_size();
}
inline void TestAllTypesProto2::clear_repeated_uint32() {
  _impl_.repeated_uint32_.Clear();
}
inline uint32_t TestAllTypesProto2::_internal_repeated_uint32(int index) const {
  return _impl_.repeated_uint32_.Get(index);
}
inline uint32_t TestAllTypesProto2::repeated_uint32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_uint32)
  return _internal_repeated_uint32(index);
}
inline void TestAllTypesProto2::set_repeated_uint32(int index, uint32_t value) {
  _impl_.repeated_uint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_uint32)
}
inline void TestAllTypesProto2::_internal_add_repeated_uint32(uint32_t value) {
  _impl_.repeated_uint32_.Add(value);
}
inline void TestAllTypesProto2::add_repeated_uint32(uint32_t value) {
  _internal_add_repeated_uint32(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_uint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestAllTypesProto2::_internal_repeated_uint32() const {
  return _impl_.repeated_uint32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestAllTypesProto2::repeated_uint32() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_uint32)
  return _internal_repeated_uint32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestAllTypesProto2::_internal_mutable_repeated_uint32() {
  return &_impl_.repeated_uint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestAllTypesProto2::mutable_repeated_uint32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_uint32)
  return _internal_mutable_repeated_uint32();
}

// repeated uint64 repeated_uint64 = 34;
inline int TestAllTypesProto2::_internal_repeated_uint64_size() const {
  return _impl_.repeated_uint64_.size();
}
inline int TestAllTypesProto2::repeated_uint64_size() const {
  return _internal_repeated_uint64_size();
}
inline void TestAllTypesProto2::clear_repeated_uint64() {
  _impl_.repeated_uint64_.Clear();
}
inline uint64_t TestAllTypesProto2::_internal_repeated_uint64(int index) const {
  return _impl_.repeated_uint64_.Get(index);
}
inline uint64_t TestAllTypesProto2::repeated_uint64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_uint64)
  return _internal_repeated_uint64(index);
}
inline void TestAllTypesProto2::set_repeated_uint64(int index, uint64_t value) {
  _impl_.repeated_uint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_uint64)
}
inline void TestAllTypesProto2::_internal_add_repeated_uint64(uint64_t value) {
  _impl_.repeated_uint64_.Add(value);
}
inline void TestAllTypesProto2::add_repeated_uint64(uint64_t value) {
  _internal_add_repeated_uint64(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_uint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestAllTypesProto2::_internal_repeated_uint64() const {
  return _impl_.repeated_uint64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestAllTypesProto2::repeated_uint64() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_uint64)
  return _internal_repeated_uint64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestAllTypesProto2::_internal_mutable_repeated_uint64() {
  return &_impl_.repeated_uint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestAllTypesProto2::mutable_repeated_uint64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_uint64)
  return _internal_mutable_repeated_uint64();
}

// repeated sint32 repeated_sint32 = 35;
inline int TestAllTypesProto2::_internal_repeated_sint32_size() const {
  return _impl_.repeated_sint32_.size();
}
inline int TestAllTypesProto2::repeated_sint32_size() const {
  return _internal_repeated_sint32_size();
}
inline void TestAllTypesProto2::clear_repeated_sint32() {
  _impl_.repeated_sint32_.Clear();
}
inline int32_t TestAllTypesProto2::_internal_repeated_sint32(int index) const {
  return _impl_.repeated_sint32_.Get(index);
}
inline int32_t TestAllTypesProto2::repeated_sint32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sint32)
  return _internal_repeated_sint32(index);
}
inline void TestAllTypesProto2::set_repeated_sint32(int index, int32_t value) {
  _impl_.repeated_sint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sint32)
}
inline void TestAllTypesProto2::_internal_add_repeated_sint32(int32_t value) {
  _impl_.repeated_sint32_.Add(value);
}
inline void TestAllTypesProto2::add_repeated_sint32(int32_t value) {
  _internal_add_repeated_sint32(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypesProto2::_internal_repeated_sint32() const {
  return _impl_.repeated_sint32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypesProto2::repeated_sint32() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sint32)
  return _internal_repeated_sint32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypesProto2::_internal_mutable_repeated_sint32() {
  return &_impl_.repeated_sint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypesProto2::mutable_repeated_sint32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sint32)
  return _internal_mutable_repeated_sint32();
}

// repeated sint64 repeated_sint64 = 36;
inline int TestAllTypesProto2::_internal_repeated_sint64_size() const {
  return _impl_.repeated_sint64_.size();
}
inline int TestAllTypesProto2::repeated_sint64_size() const {
  return _internal_repeated_sint64_size();
}
inline void TestAllTypesProto2::clear_repeated_sint64() {
  _impl_.repeated_sint64_.Clear();
}
inline int64_t TestAllTypesProto2::_internal_repeated_sint64(int index) const {
  return _impl_.repeated_sint64_.Get(index);
}
inline int64_t TestAllTypesProto2::repeated_sint64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sint64)
  return _internal_repeated_sint64(index);
}
inline void TestAllTypesProto2::set_repeated_sint64(int index, int64_t value) {
  _impl_.repeated_sint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sint64)
}
inline void TestAllTypesProto2::_internal_add_repeated_sint64(int64_t value) {
  _impl_.repeated_sint64_.Add(value);
}
inline void TestAllTypesProto2::add_repeated_sint64(int64_t value) {
  _internal_add_repeated_sint64(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypesProto2::_internal_repeated_sint64() const {
  return _impl_.repeated_sint64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypesProto2::repeated_sint64() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sint64)
  return _internal_repeated_sint64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypesProto2::_internal_mutable_repeated_sint64() {
  return &_impl_.repeated_sint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypesProto2::mutable_repeated_sint64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sint64)
  return _internal_mutable_repeated_sint64();
}

// repeated fixed32 repeated_fixed32 = 37;
inline int TestAllTypesProto2::_internal_repeated_fixed32_size() const {
  return _impl_.repeated_fixed32_.size();
}
inline int TestAllTypesProto2::repeated_fixed32_size() const {
  return _internal_repeated_fixed32_size();
}
inline void TestAllTypesProto2::clear_repeated_fixed32() {
  _impl_.repeated_fixed32_.Clear();
}
inline uint32_t TestAllTypesProto2::_internal_repeated_fixed32(int index) const {
  return _impl_.repeated_fixed32_.Get(index);
}
inline uint32_t TestAllTypesProto2::repeated_fixed32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_fixed32)
  return _internal_repeated_fixed32(index);
}
inline void TestAllTypesProto2::set_repeated_fixed32(int index, uint32_t value) {
  _impl_.repeated_fixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_fixed32)
}
inline void TestAllTypesProto2::_internal_add_repeated_fixed32(uint32_t value) {
  _impl_.repeated_fixed32_.Add(value);
}
inline void TestAllTypesProto2::add_repeated_fixed32(uint32_t value) {
  _internal_add_repeated_fixed32(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_fixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestAllTypesProto2::_internal_repeated_fixed32() const {
  return _impl_.repeated_fixed32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestAllTypesProto2::repeated_fixed32() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_fixed32)
  return _internal_repeated_fixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestAllTypesProto2::_internal_mutable_repeated_fixed32() {
  return &_impl_.repeated_fixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestAllTypesProto2::mutable_repeated_fixed32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_fixed32)
  return _internal_mutable_repeated_fixed32();
}

// repeated fixed64 repeated_fixed64 = 38;
inline int TestAllTypesProto2::_internal_repeated_fixed64_size() const {
  return _impl_.repeated_fixed64_.size();
}
inline int TestAllTypesProto2::repeated_fixed64_size() const {
  return _internal_repeated_fixed64_size();
}
inline void TestAllTypesProto2::clear_repeated_fixed64() {
  _impl_.repeated_fixed64_.Clear();
}
inline uint64_t TestAllTypesProto2::_internal_repeated_fixed64(int index) const {
  return _impl_.repeated_fixed64_.Get(index);
}
inline uint64_t TestAllTypesProto2::repeated_fixed64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_fixed64)
  return _internal_repeated_fixed64(index);
}
inline void TestAllTypesProto2::set_repeated_fixed64(int index, uint64_t value) {
  _impl_.repeated_fixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_fixed64)
}
inline void TestAllTypesProto2::_internal_add_repeated_fixed64(uint64_t value) {
  _impl_.repeated_fixed64_.Add(value);
}
inline void TestAllTypesProto2::add_repeated_fixed64(uint64_t value) {
  _internal_add_repeated_fixed64(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_fixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestAllTypesProto2::_internal_repeated_fixed64() const {
  return _impl_.repeated_fixed64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestAllTypesProto2::repeated_fixed64() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_fixed64)
  return _internal_repeated_fixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestAllTypesProto2::_internal_mutable_repeated_fixed64() {
  return &_impl_.repeated_fixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestAllTypesProto2::mutable_repeated_fixed64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_fixed64)
  return _internal_mutable_repeated_fixed64();
}

// repeated sfixed32 repeated_sfixed32 = 39;
inline int TestAllTypesProto2::_internal_repeated_sfixed32_size() const {
  return _impl_.repeated_sfixed32_.size();
}
inline int TestAllTypesProto2::repeated_sfixed32_size() const {
  return _internal_repeated_sfixed32_size();
}
inline void TestAllTypesProto2::clear_repeated_sfixed32() {
  _impl_.repeated_sfixed32_.Clear();
}
inline int32_t TestAllTypesProto2::_internal_repeated_sfixed32(int index) const {
  return _impl_.repeated_sfixed32_.Get(index);
}
inline int32_t TestAllTypesProto2::repeated_sfixed32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sfixed32)
  return _internal_repeated_sfixed32(index);
}
inline void TestAllTypesProto2::set_repeated_sfixed32(int index, int32_t value) {
  _impl_.repeated_sfixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sfixed32)
}
inline void TestAllTypesProto2::_internal_add_repeated_sfixed32(int32_t value) {
  _impl_.repeated_sfixed32_.Add(value);
}
inline void TestAllTypesProto2::add_repeated_sfixed32(int32_t value) {
  _internal_add_repeated_sfixed32(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sfixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypesProto2::_internal_repeated_sfixed32() const {
  return _impl_.repeated_sfixed32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypesProto2::repeated_sfixed32() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sfixed32)
  return _internal_repeated_sfixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypesProto2::_internal_mutable_repeated_sfixed32() {
  return &_impl_.repeated_sfixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypesProto2::mutable_repeated_sfixed32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sfixed32)
  return _internal_mutable_repeated_sfixed32();
}

// repeated sfixed64 repeated_sfixed64 = 40;
inline int TestAllTypesProto2::_internal_repeated_sfixed64_size() const {
  return _impl_.repeated_sfixed64_.size();
}
inline int TestAllTypesProto2::repeated_sfixed64_size() const {
  return _internal_repeated_sfixed64_size();
}
inline void TestAllTypesProto2::clear_repeated_sfixed64() {
  _impl_.repeated_sfixed64_.Clear();
}
inline int64_t TestAllTypesProto2::_internal_repeated_sfixed64(int index) const {
  return _impl_.repeated_sfixed64_.Get(index);
}
inline int64_t TestAllTypesProto2::repeated_sfixed64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sfixed64)
  return _internal_repeated_sfixed64(index);
}
inline void TestAllTypesProto2::set_repeated_sfixed64(int index, int64_t value) {
  _impl_.repeated_sfixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sfixed64)
}
inline void TestAllTypesProto2::_internal_add_repeated_sfixed64(int64_t value) {
  _impl_.repeated_sfixed64_.Add(value);
}
inline void TestAllTypesProto2::add_repeated_sfixed64(int64_t value) {
  _internal_add_repeated_sfixed64(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sfixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypesProto2::_internal_repeated_sfixed64() const {
  return _impl_.repeated_sfixed64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypesProto2::repeated_sfixed64() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sfixed64)
  return _internal_repeated_sfixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypesProto2::_internal_mutable_repeated_sfixed64() {
  return &_impl_.repeated_sfixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypesProto2::mutable_repeated_sfixed64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_sfixed64)
  return _internal_mutable_repeated_sfixed64();
}

// repeated float repeated_float = 41;
inline int TestAllTypesProto2::_internal_repeated_float_size() const {
  return _impl_.repeated_float_.size();
}
inline int TestAllTypesProto2::repeated_float_size() const {
  return _internal_repeated_float_size();
}
inline void TestAllTypesProto2::clear_repeated_float() {
  _impl_.repeated_float_.Clear();
}
inline float TestAllTypesProto2::_internal_repeated_float(int index) const {
  return _impl_.repeated_float_.Get(index);
}
inline float TestAllTypesProto2::repeated_float(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_float)
  return _internal_repeated_float(index);
}
inline void TestAllTypesProto2::set_repeated_float(int index, float value) {
  _impl_.repeated_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_float)
}
inline void TestAllTypesProto2::_internal_add_repeated_float(float value) {
  _impl_.repeated_float_.Add(value);
}
inline void TestAllTypesProto2::add_repeated_float(float value) {
  _internal_add_repeated_float(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_float)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestAllTypesProto2::_internal_repeated_float() const {
  return _impl_.repeated_float_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestAllTypesProto2::repeated_float() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_float)
  return _internal_repeated_float();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestAllTypesProto2::_internal_mutable_repeated_float() {
  return &_impl_.repeated_float_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestAllTypesProto2::mutable_repeated_float() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_float)
  return _internal_mutable_repeated_float();
}

// repeated double repeated_double = 42;
inline int TestAllTypesProto2::_internal_repeated_double_size() const {
  return _impl_.repeated_double_.size();
}
inline int TestAllTypesProto2::repeated_double_size() const {
  return _internal_repeated_double_size();
}
inline void TestAllTypesProto2::clear_repeated_double() {
  _impl_.repeated_double_.Clear();
}
inline double TestAllTypesProto2::_internal_repeated_double(int index) const {
  return _impl_.repeated_double_.Get(index);
}
inline double TestAllTypesProto2::repeated_double(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_double)
  return _internal_repeated_double(index);
}
inline void TestAllTypesProto2::set_repeated_double(int index, double value) {
  _impl_.repeated_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_double)
}
inline void TestAllTypesProto2::_internal_add_repeated_double(double value) {
  _impl_.repeated_double_.Add(value);
}
inline void TestAllTypesProto2::add_repeated_double(double value) {
  _internal_add_repeated_double(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_double)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestAllTypesProto2::_internal_repeated_double() const {
  return _impl_.repeated_double_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestAllTypesProto2::repeated_double() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_double)
  return _internal_repeated_double();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestAllTypesProto2::_internal_mutable_repeated_double() {
  return &_impl_.repeated_double_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestAllTypesProto2::mutable_repeated_double() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_double)
  return _internal_mutable_repeated_double();
}

// repeated bool repeated_bool = 43;
inline int TestAllTypesProto2::_internal_repeated_bool_size() const {
  return _impl_.repeated_bool_.size();
}
inline int TestAllTypesProto2::repeated_bool_size() const {
  return _internal_repeated_bool_size();
}
inline void TestAllTypesProto2::clear_repeated_bool() {
  _impl_.repeated_bool_.Clear();
}
inline bool TestAllTypesProto2::_internal_repeated_bool(int index) const {
  return _impl_.repeated_bool_.Get(index);
}
inline bool TestAllTypesProto2::repeated_bool(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_bool)
  return _internal_repeated_bool(index);
}
inline void TestAllTypesProto2::set_repeated_bool(int index, bool value) {
  _impl_.repeated_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_bool)
}
inline void TestAllTypesProto2::_internal_add_repeated_bool(bool value) {
  _impl_.repeated_bool_.Add(value);
}
inline void TestAllTypesProto2::add_repeated_bool(bool value) {
  _internal_add_repeated_bool(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_bool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestAllTypesProto2::_internal_repeated_bool() const {
  return _impl_.repeated_bool_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestAllTypesProto2::repeated_bool() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_bool)
  return _internal_repeated_bool();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestAllTypesProto2::_internal_mutable_repeated_bool() {
  return &_impl_.repeated_bool_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestAllTypesProto2::mutable_repeated_bool() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_bool)
  return _internal_mutable_repeated_bool();
}

// repeated string repeated_string = 44;
inline int TestAllTypesProto2::_internal_repeated_string_size() const {
  return _impl_.repeated_string_.size();
}
inline int TestAllTypesProto2::repeated_string_size() const {
  return _internal_repeated_string_size();
}
inline void TestAllTypesProto2::clear_repeated_string() {
  _impl_.repeated_string_.Clear();
}
inline std::string* TestAllTypesProto2::add_repeated_string() {
  std::string* _s = _internal_add_repeated_string();
  // @@protoc_insertion_point(field_add_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string)
  return _s;
}
inline const std::string& TestAllTypesProto2::_internal_repeated_string(int index) const {
  return _impl_.repeated_string_.Get(index);
}
inline const std::string& TestAllTypesProto2::repeated_string(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string)
  return _internal_repeated_string(index);
}
inline std::string* TestAllTypesProto2::mutable_repeated_string(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string)
  return _impl_.repeated_string_.Mutable(index);
}
inline void TestAllTypesProto2::set_repeated_string(int index, const std::string& value) {
  _impl_.repeated_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string)
}
inline void TestAllTypesProto2::set_repeated_string(int index, std::string&& value) {
  _impl_.repeated_string_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string)
}
inline void TestAllTypesProto2::set_repeated_string(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.repeated_string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string)
}
inline void TestAllTypesProto2::set_repeated_string(int index, const char* value, size_t size) {
  _impl_.repeated_string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string)
}
inline std::string* TestAllTypesProto2::_internal_add_repeated_string() {
  return _impl_.repeated_string_.Add();
}
inline void TestAllTypesProto2::add_repeated_string(const std::string& value) {
  _impl_.repeated_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string)
}
inline void TestAllTypesProto2::add_repeated_string(std::string&& value) {
  _impl_.repeated_string_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string)
}
inline void TestAllTypesProto2::add_repeated_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.repeated_string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string)
}
inline void TestAllTypesProto2::add_repeated_string(const char* value, size_t size) {
  _impl_.repeated_string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestAllTypesProto2::repeated_string() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string)
  return _impl_.repeated_string_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestAllTypesProto2::mutable_repeated_string() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string)
  return &_impl_.repeated_string_;
}

// repeated bytes repeated_bytes = 45;
inline int TestAllTypesProto2::_internal_repeated_bytes_size() const {
  return _impl_.repeated_bytes_.size();
}
inline int TestAllTypesProto2::repeated_bytes_size() const {
  return _internal_repeated_bytes_size();
}
inline void TestAllTypesProto2::clear_repeated_bytes() {
  _impl_.repeated_bytes_.Clear();
}
inline std::string* TestAllTypesProto2::add_repeated_bytes() {
  std::string* _s = _internal_add_repeated_bytes();
  // @@protoc_insertion_point(field_add_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_bytes)
  return _s;
}
inline const std::string& TestAllTypesProto2::_internal_repeated_bytes(int index) const {
  return _impl_.repeated_bytes_.Get(index);
}
inline const std::string& TestAllTypesProto2::repeated_bytes(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_bytes)
  return _internal_repeated_bytes(index);
}
inline std::string* TestAllTypesProto2::mutable_repeated_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_bytes)
  return _impl_.repeated_bytes_.Mutable(index);
}
inline void TestAllTypesProto2::set_repeated_bytes(int index, const std::string& value) {
  _impl_.repeated_bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_bytes)
}
inline void TestAllTypesProto2::set_repeated_bytes(int index, std::string&& value) {
  _impl_.repeated_bytes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_bytes)
}
inline void TestAllTypesProto2::set_repeated_bytes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.repeated_bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_bytes)
}
inline void TestAllTypesProto2::set_repeated_bytes(int index, const void* value, size_t size) {
  _impl_.repeated_bytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_bytes)
}
inline std::string* TestAllTypesProto2::_internal_add_repeated_bytes() {
  return _impl_.repeated_bytes_.Add();
}
inline void TestAllTypesProto2::add_repeated_bytes(const std::string& value) {
  _impl_.repeated_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_bytes)
}
inline void TestAllTypesProto2::add_repeated_bytes(std::string&& value) {
  _impl_.repeated_bytes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_bytes)
}
inline void TestAllTypesProto2::add_repeated_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.repeated_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_bytes)
}
inline void TestAllTypesProto2::add_repeated_bytes(const void* value, size_t size) {
  _impl_.repeated_bytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_bytes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestAllTypesProto2::repeated_bytes() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_bytes)
  return _impl_.repeated_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestAllTypesProto2::mutable_repeated_bytes() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_bytes)
  return &_impl_.repeated_bytes_;
}

// repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage repeated_nested_message = 48;
inline int TestAllTypesProto2::_internal_repeated_nested_message_size() const {
  return _impl_.repeated_nested_message_.size();
}
inline int TestAllTypesProto2::repeated_nested_message_size() const {
  return _internal_repeated_nested_message_size();
}
inline void TestAllTypesProto2::clear_repeated_nested_message() {
  _impl_.repeated_nested_message_.Clear();
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* TestAllTypesProto2::mutable_repeated_nested_message(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_nested_message)
  return _impl_.repeated_nested_message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >*
TestAllTypesProto2::mutable_repeated_nested_message() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_nested_message)
  return &_impl_.repeated_nested_message_;
}
inline const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage& TestAllTypesProto2::_internal_repeated_nested_message(int index) const {
  return _impl_.repeated_nested_message_.Get(index);
}
inline const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage& TestAllTypesProto2::repeated_nested_message(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_nested_message)
  return _internal_repeated_nested_message(index);
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* TestAllTypesProto2::_internal_add_repeated_nested_message() {
  return _impl_.repeated_nested_message_.Add();
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* TestAllTypesProto2::add_repeated_nested_message() {
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* _add = _internal_add_repeated_nested_message();
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_nested_message)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >&
TestAllTypesProto2::repeated_nested_message() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_nested_message)
  return _impl_.repeated_nested_message_;
}

// repeated .protobuf_test_messages.proto2.ForeignMessageProto2 repeated_foreign_message = 49;
inline int TestAllTypesProto2::_internal_repeated_foreign_message_size() const {
  return _impl_.repeated_foreign_message_.size();
}
inline int TestAllTypesProto2::repeated_foreign_message_size() const {
  return _internal_repeated_foreign_message_size();
}
inline void TestAllTypesProto2::clear_repeated_foreign_message() {
  _impl_.repeated_foreign_message_.Clear();
}
inline ::protobuf_test_messages::proto2::ForeignMessageProto2* TestAllTypesProto2::mutable_repeated_foreign_message(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_foreign_message)
  return _impl_.repeated_foreign_message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_test_messages::proto2::ForeignMessageProto2 >*
TestAllTypesProto2::mutable_repeated_foreign_message() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_foreign_message)
  return &_impl_.repeated_foreign_message_;
}
inline const ::protobuf_test_messages::proto2::ForeignMessageProto2& TestAllTypesProto2::_internal_repeated_foreign_message(int index) const {
  return _impl_.repeated_foreign_message_.Get(index);
}
inline const ::protobuf_test_messages::proto2::ForeignMessageProto2& TestAllTypesProto2::repeated_foreign_message(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_foreign_message)
  return _internal_repeated_foreign_message(index);
}
inline ::protobuf_test_messages::proto2::ForeignMessageProto2* TestAllTypesProto2::_internal_add_repeated_foreign_message() {
  return _impl_.repeated_foreign_message_.Add();
}
inline ::protobuf_test_messages::proto2::ForeignMessageProto2* TestAllTypesProto2::add_repeated_foreign_message() {
  ::protobuf_test_messages::proto2::ForeignMessageProto2* _add = _internal_add_repeated_foreign_message();
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_foreign_message)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protobuf_test_messages::proto2::ForeignMessageProto2 >&
TestAllTypesProto2::repeated_foreign_message() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_foreign_message)
  return _impl_.repeated_foreign_message_;
}

// repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum repeated_nested_enum = 51;
inline int TestAllTypesProto2::_internal_repeated_nested_enum_size() const {
  return _impl_.repeated_nested_enum_.size();
}
inline int TestAllTypesProto2::repeated_nested_enum_size() const {
  return _internal_repeated_nested_enum_size();
}
inline void TestAllTypesProto2::clear_repeated_nested_enum() {
  _impl_.repeated_nested_enum_.Clear();
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum TestAllTypesProto2::_internal_repeated_nested_enum(int index) const {
  return static_cast< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >(_impl_.repeated_nested_enum_.Get(index));
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum TestAllTypesProto2::repeated_nested_enum(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_nested_enum)
  return _internal_repeated_nested_enum(index);
}
inline void TestAllTypesProto2::set_repeated_nested_enum(int index, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value) {
  assert(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid(value));
  _impl_.repeated_nested_enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_nested_enum)
}
inline void TestAllTypesProto2::_internal_add_repeated_nested_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value) {
  assert(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid(value));
  _impl_.repeated_nested_enum_.Add(value);
}
inline void TestAllTypesProto2::add_repeated_nested_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value) {
  _internal_add_repeated_nested_enum(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_nested_enum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TestAllTypesProto2::repeated_nested_enum() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_nested_enum)
  return _impl_.repeated_nested_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestAllTypesProto2::_internal_mutable_repeated_nested_enum() {
  return &_impl_.repeated_nested_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestAllTypesProto2::mutable_repeated_nested_enum() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_nested_enum)
  return _internal_mutable_repeated_nested_enum();
}

// repeated .protobuf_test_messages.proto2.ForeignEnumProto2 repeated_foreign_enum = 52;
inline int TestAllTypesProto2::_internal_repeated_foreign_enum_size() const {
  return _impl_.repeated_foreign_enum_.size();
}
inline int TestAllTypesProto2::repeated_foreign_enum_size() const {
  return _internal_repeated_foreign_enum_size();
}
inline void TestAllTypesProto2::clear_repeated_foreign_enum() {
  _impl_.repeated_foreign_enum_.Clear();
}
inline ::protobuf_test_messages::proto2::ForeignEnumProto2 TestAllTypesProto2::_internal_repeated_foreign_enum(int index) const {
  return static_cast< ::protobuf_test_messages::proto2::ForeignEnumProto2 >(_impl_.repeated_foreign_enum_.Get(index));
}
inline ::protobuf_test_messages::proto2::ForeignEnumProto2 TestAllTypesProto2::repeated_foreign_enum(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_foreign_enum)
  return _internal_repeated_foreign_enum(index);
}
inline void TestAllTypesProto2::set_repeated_foreign_enum(int index, ::protobuf_test_messages::proto2::ForeignEnumProto2 value) {
  assert(::protobuf_test_messages::proto2::ForeignEnumProto2_IsValid(value));
  _impl_.repeated_foreign_enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_foreign_enum)
}
inline void TestAllTypesProto2::_internal_add_repeated_foreign_enum(::protobuf_test_messages::proto2::ForeignEnumProto2 value) {
  assert(::protobuf_test_messages::proto2::ForeignEnumProto2_IsValid(value));
  _impl_.repeated_foreign_enum_.Add(value);
}
inline void TestAllTypesProto2::add_repeated_foreign_enum(::protobuf_test_messages::proto2::ForeignEnumProto2 value) {
  _internal_add_repeated_foreign_enum(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_foreign_enum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TestAllTypesProto2::repeated_foreign_enum() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_foreign_enum)
  return _impl_.repeated_foreign_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestAllTypesProto2::_internal_mutable_repeated_foreign_enum() {
  return &_impl_.repeated_foreign_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestAllTypesProto2::mutable_repeated_foreign_enum() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_foreign_enum)
  return _internal_mutable_repeated_foreign_enum();
}

// repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
inline int TestAllTypesProto2::_internal_repeated_string_piece_size() const {
  return _impl_.repeated_string_piece_.size();
}
inline int TestAllTypesProto2::repeated_string_piece_size() const {
  return _internal_repeated_string_piece_size();
}
inline void TestAllTypesProto2::clear_repeated_string_piece() {
  _impl_.repeated_string_piece_.Clear();
}
inline std::string* TestAllTypesProto2::add_repeated_string_piece() {
  std::string* _s = _internal_add_repeated_string_piece();
  // @@protoc_insertion_point(field_add_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string_piece)
  return _s;
}
inline const std::string& TestAllTypesProto2::_internal_repeated_string_piece(int index) const {
  return _impl_.repeated_string_piece_.Get(index);
}
inline const std::string& TestAllTypesProto2::repeated_string_piece(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string_piece)
  return _internal_repeated_string_piece(index);
}
inline std::string* TestAllTypesProto2::mutable_repeated_string_piece(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string_piece)
  return _impl_.repeated_string_piece_.Mutable(index);
}
inline void TestAllTypesProto2::set_repeated_string_piece(int index, const std::string& value) {
  _impl_.repeated_string_piece_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string_piece)
}
inline void TestAllTypesProto2::set_repeated_string_piece(int index, std::string&& value) {
  _impl_.repeated_string_piece_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string_piece)
}
inline void TestAllTypesProto2::set_repeated_string_piece(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.repeated_string_piece_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string_piece)
}
inline void TestAllTypesProto2::set_repeated_string_piece(int index, const char* value, size_t size) {
  _impl_.repeated_string_piece_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string_piece)
}
inline std::string* TestAllTypesProto2::_internal_add_repeated_string_piece() {
  return _impl_.repeated_string_piece_.Add();
}
inline void TestAllTypesProto2::add_repeated_string_piece(const std::string& value) {
  _impl_.repeated_string_piece_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string_piece)
}
inline void TestAllTypesProto2::add_repeated_string_piece(std::string&& value) {
  _impl_.repeated_string_piece_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string_piece)
}
inline void TestAllTypesProto2::add_repeated_string_piece(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.repeated_string_piece_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string_piece)
}
inline void TestAllTypesProto2::add_repeated_string_piece(const char* value, size_t size) {
  _impl_.repeated_string_piece_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string_piece)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestAllTypesProto2::repeated_string_piece() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string_piece)
  return _impl_.repeated_string_piece_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestAllTypesProto2::mutable_repeated_string_piece() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string_piece)
  return &_impl_.repeated_string_piece_;
}

// repeated string repeated_cord = 55 [ctype = CORD];
inline int TestAllTypesProto2::_internal_repeated_cord_size() const {
  return _impl_.repeated_cord_.size();
}
inline int TestAllTypesProto2::repeated_cord_size() const {
  return _internal_repeated_cord_size();
}
inline void TestAllTypesProto2::clear_repeated_cord() {
  _impl_.repeated_cord_.Clear();
}
inline std::string* TestAllTypesProto2::add_repeated_cord() {
  std::string* _s = _internal_add_repeated_cord();
  // @@protoc_insertion_point(field_add_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_cord)
  return _s;
}
inline const std::string& TestAllTypesProto2::_internal_repeated_cord(int index) const {
  return _impl_.repeated_cord_.Get(index);
}
inline const std::string& TestAllTypesProto2::repeated_cord(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_cord)
  return _internal_repeated_cord(index);
}
inline std::string* TestAllTypesProto2::mutable_repeated_cord(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_cord)
  return _impl_.repeated_cord_.Mutable(index);
}
inline void TestAllTypesProto2::set_repeated_cord(int index, const std::string& value) {
  _impl_.repeated_cord_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_cord)
}
inline void TestAllTypesProto2::set_repeated_cord(int index, std::string&& value) {
  _impl_.repeated_cord_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_cord)
}
inline void TestAllTypesProto2::set_repeated_cord(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.repeated_cord_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_cord)
}
inline void TestAllTypesProto2::set_repeated_cord(int index, const char* value, size_t size) {
  _impl_.repeated_cord_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_cord)
}
inline std::string* TestAllTypesProto2::_internal_add_repeated_cord() {
  return _impl_.repeated_cord_.Add();
}
inline void TestAllTypesProto2::add_repeated_cord(const std::string& value) {
  _impl_.repeated_cord_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_cord)
}
inline void TestAllTypesProto2::add_repeated_cord(std::string&& value) {
  _impl_.repeated_cord_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_cord)
}
inline void TestAllTypesProto2::add_repeated_cord(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.repeated_cord_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_cord)
}
inline void TestAllTypesProto2::add_repeated_cord(const char* value, size_t size) {
  _impl_.repeated_cord_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_cord)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestAllTypesProto2::repeated_cord() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_cord)
  return _impl_.repeated_cord_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestAllTypesProto2::mutable_repeated_cord() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.repeated_cord)
  return &_impl_.repeated_cord_;
}

// repeated int32 packed_int32 = 75 [packed = true];
inline int TestAllTypesProto2::_internal_packed_int32_size() const {
  return _impl_.packed_int32_.size();
}
inline int TestAllTypesProto2::packed_int32_size() const {
  return _internal_packed_int32_size();
}
inline void TestAllTypesProto2::clear_packed_int32() {
  _impl_.packed_int32_.Clear();
}
inline int32_t TestAllTypesProto2::_internal_packed_int32(int index) const {
  return _impl_.packed_int32_.Get(index);
}
inline int32_t TestAllTypesProto2::packed_int32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.packed_int32)
  return _internal_packed_int32(index);
}
inline void TestAllTypesProto2::set_packed_int32(int index, int32_t value) {
  _impl_.packed_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.packed_int32)
}
inline void TestAllTypesProto2::_internal_add_packed_int32(int32_t value) {
  _impl_.packed_int32_.Add(value);
}
inline void TestAllTypesProto2::add_packed_int32(int32_t value) {
  _internal_add_packed_int32(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.packed_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypesProto2::_internal_packed_int32() const {
  return _impl_.packed_int32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypesProto2::packed_int32() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_int32)
  return _internal_packed_int32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypesProto2::_internal_mutable_packed_int32() {
  return &_impl_.packed_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypesProto2::mutable_packed_int32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_int32)
  return _internal_mutable_packed_int32();
}

// repeated int64 packed_int64 = 76 [packed = true];
inline int TestAllTypesProto2::_internal_packed_int64_size() const {
  return _impl_.packed_int64_.size();
}
inline int TestAllTypesProto2::packed_int64_size() const {
  return _internal_packed_int64_size();
}
inline void TestAllTypesProto2::clear_packed_int64() {
  _impl_.packed_int64_.Clear();
}
inline int64_t TestAllTypesProto2::_internal_packed_int64(int index) const {
  return _impl_.packed_int64_.Get(index);
}
inline int64_t TestAllTypesProto2::packed_int64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.packed_int64)
  return _internal_packed_int64(index);
}
inline void TestAllTypesProto2::set_packed_int64(int index, int64_t value) {
  _impl_.packed_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.packed_int64)
}
inline void TestAllTypesProto2::_internal_add_packed_int64(int64_t value) {
  _impl_.packed_int64_.Add(value);
}
inline void TestAllTypesProto2::add_packed_int64(int64_t value) {
  _internal_add_packed_int64(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.packed_int64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypesProto2::_internal_packed_int64() const {
  return _impl_.packed_int64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypesProto2::packed_int64() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_int64)
  return _internal_packed_int64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypesProto2::_internal_mutable_packed_int64() {
  return &_impl_.packed_int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypesProto2::mutable_packed_int64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_int64)
  return _internal_mutable_packed_int64();
}

// repeated uint32 packed_uint32 = 77 [packed = true];
inline int TestAllTypesProto2::_internal_packed_uint32_size() const {
  return _impl_.packed_uint32_.size();
}
inline int TestAllTypesProto2::packed_uint32_size() const {
  return _internal_packed_uint32_size();
}
inline void TestAllTypesProto2::clear_packed_uint32() {
  _impl_.packed_uint32_.Clear();
}
inline uint32_t TestAllTypesProto2::_internal_packed_uint32(int index) const {
  return _impl_.packed_uint32_.Get(index);
}
inline uint32_t TestAllTypesProto2::packed_uint32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.packed_uint32)
  return _internal_packed_uint32(index);
}
inline void TestAllTypesProto2::set_packed_uint32(int index, uint32_t value) {
  _impl_.packed_uint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.packed_uint32)
}
inline void TestAllTypesProto2::_internal_add_packed_uint32(uint32_t value) {
  _impl_.packed_uint32_.Add(value);
}
inline void TestAllTypesProto2::add_packed_uint32(uint32_t value) {
  _internal_add_packed_uint32(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.packed_uint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestAllTypesProto2::_internal_packed_uint32() const {
  return _impl_.packed_uint32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestAllTypesProto2::packed_uint32() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_uint32)
  return _internal_packed_uint32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestAllTypesProto2::_internal_mutable_packed_uint32() {
  return &_impl_.packed_uint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestAllTypesProto2::mutable_packed_uint32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_uint32)
  return _internal_mutable_packed_uint32();
}

// repeated uint64 packed_uint64 = 78 [packed = true];
inline int TestAllTypesProto2::_internal_packed_uint64_size() const {
  return _impl_.packed_uint64_.size();
}
inline int TestAllTypesProto2::packed_uint64_size() const {
  return _internal_packed_uint64_size();
}
inline void TestAllTypesProto2::clear_packed_uint64() {
  _impl_.packed_uint64_.Clear();
}
inline uint64_t TestAllTypesProto2::_internal_packed_uint64(int index) const {
  return _impl_.packed_uint64_.Get(index);
}
inline uint64_t TestAllTypesProto2::packed_uint64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.packed_uint64)
  return _internal_packed_uint64(index);
}
inline void TestAllTypesProto2::set_packed_uint64(int index, uint64_t value) {
  _impl_.packed_uint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.packed_uint64)
}
inline void TestAllTypesProto2::_internal_add_packed_uint64(uint64_t value) {
  _impl_.packed_uint64_.Add(value);
}
inline void TestAllTypesProto2::add_packed_uint64(uint64_t value) {
  _internal_add_packed_uint64(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.packed_uint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestAllTypesProto2::_internal_packed_uint64() const {
  return _impl_.packed_uint64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestAllTypesProto2::packed_uint64() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_uint64)
  return _internal_packed_uint64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestAllTypesProto2::_internal_mutable_packed_uint64() {
  return &_impl_.packed_uint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestAllTypesProto2::mutable_packed_uint64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_uint64)
  return _internal_mutable_packed_uint64();
}

// repeated sint32 packed_sint32 = 79 [packed = true];
inline int TestAllTypesProto2::_internal_packed_sint32_size() const {
  return _impl_.packed_sint32_.size();
}
inline int TestAllTypesProto2::packed_sint32_size() const {
  return _internal_packed_sint32_size();
}
inline void TestAllTypesProto2::clear_packed_sint32() {
  _impl_.packed_sint32_.Clear();
}
inline int32_t TestAllTypesProto2::_internal_packed_sint32(int index) const {
  return _impl_.packed_sint32_.Get(index);
}
inline int32_t TestAllTypesProto2::packed_sint32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sint32)
  return _internal_packed_sint32(index);
}
inline void TestAllTypesProto2::set_packed_sint32(int index, int32_t value) {
  _impl_.packed_sint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sint32)
}
inline void TestAllTypesProto2::_internal_add_packed_sint32(int32_t value) {
  _impl_.packed_sint32_.Add(value);
}
inline void TestAllTypesProto2::add_packed_sint32(int32_t value) {
  _internal_add_packed_sint32(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypesProto2::_internal_packed_sint32() const {
  return _impl_.packed_sint32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypesProto2::packed_sint32() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sint32)
  return _internal_packed_sint32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypesProto2::_internal_mutable_packed_sint32() {
  return &_impl_.packed_sint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypesProto2::mutable_packed_sint32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sint32)
  return _internal_mutable_packed_sint32();
}

// repeated sint64 packed_sint64 = 80 [packed = true];
inline int TestAllTypesProto2::_internal_packed_sint64_size() const {
  return _impl_.packed_sint64_.size();
}
inline int TestAllTypesProto2::packed_sint64_size() const {
  return _internal_packed_sint64_size();
}
inline void TestAllTypesProto2::clear_packed_sint64() {
  _impl_.packed_sint64_.Clear();
}
inline int64_t TestAllTypesProto2::_internal_packed_sint64(int index) const {
  return _impl_.packed_sint64_.Get(index);
}
inline int64_t TestAllTypesProto2::packed_sint64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sint64)
  return _internal_packed_sint64(index);
}
inline void TestAllTypesProto2::set_packed_sint64(int index, int64_t value) {
  _impl_.packed_sint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sint64)
}
inline void TestAllTypesProto2::_internal_add_packed_sint64(int64_t value) {
  _impl_.packed_sint64_.Add(value);
}
inline void TestAllTypesProto2::add_packed_sint64(int64_t value) {
  _internal_add_packed_sint64(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypesProto2::_internal_packed_sint64() const {
  return _impl_.packed_sint64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypesProto2::packed_sint64() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sint64)
  return _internal_packed_sint64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypesProto2::_internal_mutable_packed_sint64() {
  return &_impl_.packed_sint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypesProto2::mutable_packed_sint64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sint64)
  return _internal_mutable_packed_sint64();
}

// repeated fixed32 packed_fixed32 = 81 [packed = true];
inline int TestAllTypesProto2::_internal_packed_fixed32_size() const {
  return _impl_.packed_fixed32_.size();
}
inline int TestAllTypesProto2::packed_fixed32_size() const {
  return _internal_packed_fixed32_size();
}
inline void TestAllTypesProto2::clear_packed_fixed32() {
  _impl_.packed_fixed32_.Clear();
}
inline uint32_t TestAllTypesProto2::_internal_packed_fixed32(int index) const {
  return _impl_.packed_fixed32_.Get(index);
}
inline uint32_t TestAllTypesProto2::packed_fixed32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.packed_fixed32)
  return _internal_packed_fixed32(index);
}
inline void TestAllTypesProto2::set_packed_fixed32(int index, uint32_t value) {
  _impl_.packed_fixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.packed_fixed32)
}
inline void TestAllTypesProto2::_internal_add_packed_fixed32(uint32_t value) {
  _impl_.packed_fixed32_.Add(value);
}
inline void TestAllTypesProto2::add_packed_fixed32(uint32_t value) {
  _internal_add_packed_fixed32(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.packed_fixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestAllTypesProto2::_internal_packed_fixed32() const {
  return _impl_.packed_fixed32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestAllTypesProto2::packed_fixed32() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_fixed32)
  return _internal_packed_fixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestAllTypesProto2::_internal_mutable_packed_fixed32() {
  return &_impl_.packed_fixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestAllTypesProto2::mutable_packed_fixed32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_fixed32)
  return _internal_mutable_packed_fixed32();
}

// repeated fixed64 packed_fixed64 = 82 [packed = true];
inline int TestAllTypesProto2::_internal_packed_fixed64_size() const {
  return _impl_.packed_fixed64_.size();
}
inline int TestAllTypesProto2::packed_fixed64_size() const {
  return _internal_packed_fixed64_size();
}
inline void TestAllTypesProto2::clear_packed_fixed64() {
  _impl_.packed_fixed64_.Clear();
}
inline uint64_t TestAllTypesProto2::_internal_packed_fixed64(int index) const {
  return _impl_.packed_fixed64_.Get(index);
}
inline uint64_t TestAllTypesProto2::packed_fixed64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.packed_fixed64)
  return _internal_packed_fixed64(index);
}
inline void TestAllTypesProto2::set_packed_fixed64(int index, uint64_t value) {
  _impl_.packed_fixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.packed_fixed64)
}
inline void TestAllTypesProto2::_internal_add_packed_fixed64(uint64_t value) {
  _impl_.packed_fixed64_.Add(value);
}
inline void TestAllTypesProto2::add_packed_fixed64(uint64_t value) {
  _internal_add_packed_fixed64(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.packed_fixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestAllTypesProto2::_internal_packed_fixed64() const {
  return _impl_.packed_fixed64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestAllTypesProto2::packed_fixed64() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_fixed64)
  return _internal_packed_fixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestAllTypesProto2::_internal_mutable_packed_fixed64() {
  return &_impl_.packed_fixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestAllTypesProto2::mutable_packed_fixed64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_fixed64)
  return _internal_mutable_packed_fixed64();
}

// repeated sfixed32 packed_sfixed32 = 83 [packed = true];
inline int TestAllTypesProto2::_internal_packed_sfixed32_size() const {
  return _impl_.packed_sfixed32_.size();
}
inline int TestAllTypesProto2::packed_sfixed32_size() const {
  return _internal_packed_sfixed32_size();
}
inline void TestAllTypesProto2::clear_packed_sfixed32() {
  _impl_.packed_sfixed32_.Clear();
}
inline int32_t TestAllTypesProto2::_internal_packed_sfixed32(int index) const {
  return _impl_.packed_sfixed32_.Get(index);
}
inline int32_t TestAllTypesProto2::packed_sfixed32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sfixed32)
  return _internal_packed_sfixed32(index);
}
inline void TestAllTypesProto2::set_packed_sfixed32(int index, int32_t value) {
  _impl_.packed_sfixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sfixed32)
}
inline void TestAllTypesProto2::_internal_add_packed_sfixed32(int32_t value) {
  _impl_.packed_sfixed32_.Add(value);
}
inline void TestAllTypesProto2::add_packed_sfixed32(int32_t value) {
  _internal_add_packed_sfixed32(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sfixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypesProto2::_internal_packed_sfixed32() const {
  return _impl_.packed_sfixed32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypesProto2::packed_sfixed32() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sfixed32)
  return _internal_packed_sfixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypesProto2::_internal_mutable_packed_sfixed32() {
  return &_impl_.packed_sfixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypesProto2::mutable_packed_sfixed32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sfixed32)
  return _internal_mutable_packed_sfixed32();
}

// repeated sfixed64 packed_sfixed64 = 84 [packed = true];
inline int TestAllTypesProto2::_internal_packed_sfixed64_size() const {
  return _impl_.packed_sfixed64_.size();
}
inline int TestAllTypesProto2::packed_sfixed64_size() const {
  return _internal_packed_sfixed64_size();
}
inline void TestAllTypesProto2::clear_packed_sfixed64() {
  _impl_.packed_sfixed64_.Clear();
}
inline int64_t TestAllTypesProto2::_internal_packed_sfixed64(int index) const {
  return _impl_.packed_sfixed64_.Get(index);
}
inline int64_t TestAllTypesProto2::packed_sfixed64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sfixed64)
  return _internal_packed_sfixed64(index);
}
inline void TestAllTypesProto2::set_packed_sfixed64(int index, int64_t value) {
  _impl_.packed_sfixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sfixed64)
}
inline void TestAllTypesProto2::_internal_add_packed_sfixed64(int64_t value) {
  _impl_.packed_sfixed64_.Add(value);
}
inline void TestAllTypesProto2::add_packed_sfixed64(int64_t value) {
  _internal_add_packed_sfixed64(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sfixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypesProto2::_internal_packed_sfixed64() const {
  return _impl_.packed_sfixed64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypesProto2::packed_sfixed64() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sfixed64)
  return _internal_packed_sfixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypesProto2::_internal_mutable_packed_sfixed64() {
  return &_impl_.packed_sfixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypesProto2::mutable_packed_sfixed64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_sfixed64)
  return _internal_mutable_packed_sfixed64();
}

// repeated float packed_float = 85 [packed = true];
inline int TestAllTypesProto2::_internal_packed_float_size() const {
  return _impl_.packed_float_.size();
}
inline int TestAllTypesProto2::packed_float_size() const {
  return _internal_packed_float_size();
}
inline void TestAllTypesProto2::clear_packed_float() {
  _impl_.packed_float_.Clear();
}
inline float TestAllTypesProto2::_internal_packed_float(int index) const {
  return _impl_.packed_float_.Get(index);
}
inline float TestAllTypesProto2::packed_float(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.packed_float)
  return _internal_packed_float(index);
}
inline void TestAllTypesProto2::set_packed_float(int index, float value) {
  _impl_.packed_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.packed_float)
}
inline void TestAllTypesProto2::_internal_add_packed_float(float value) {
  _impl_.packed_float_.Add(value);
}
inline void TestAllTypesProto2::add_packed_float(float value) {
  _internal_add_packed_float(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.packed_float)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestAllTypesProto2::_internal_packed_float() const {
  return _impl_.packed_float_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestAllTypesProto2::packed_float() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_float)
  return _internal_packed_float();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestAllTypesProto2::_internal_mutable_packed_float() {
  return &_impl_.packed_float_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestAllTypesProto2::mutable_packed_float() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_float)
  return _internal_mutable_packed_float();
}

// repeated double packed_double = 86 [packed = true];
inline int TestAllTypesProto2::_internal_packed_double_size() const {
  return _impl_.packed_double_.size();
}
inline int TestAllTypesProto2::packed_double_size() const {
  return _internal_packed_double_size();
}
inline void TestAllTypesProto2::clear_packed_double() {
  _impl_.packed_double_.Clear();
}
inline double TestAllTypesProto2::_internal_packed_double(int index) const {
  return _impl_.packed_double_.Get(index);
}
inline double TestAllTypesProto2::packed_double(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.packed_double)
  return _internal_packed_double(index);
}
inline void TestAllTypesProto2::set_packed_double(int index, double value) {
  _impl_.packed_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.packed_double)
}
inline void TestAllTypesProto2::_internal_add_packed_double(double value) {
  _impl_.packed_double_.Add(value);
}
inline void TestAllTypesProto2::add_packed_double(double value) {
  _internal_add_packed_double(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.packed_double)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestAllTypesProto2::_internal_packed_double() const {
  return _impl_.packed_double_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestAllTypesProto2::packed_double() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_double)
  return _internal_packed_double();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestAllTypesProto2::_internal_mutable_packed_double() {
  return &_impl_.packed_double_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestAllTypesProto2::mutable_packed_double() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_double)
  return _internal_mutable_packed_double();
}

// repeated bool packed_bool = 87 [packed = true];
inline int TestAllTypesProto2::_internal_packed_bool_size() const {
  return _impl_.packed_bool_.size();
}
inline int TestAllTypesProto2::packed_bool_size() const {
  return _internal_packed_bool_size();
}
inline void TestAllTypesProto2::clear_packed_bool() {
  _impl_.packed_bool_.Clear();
}
inline bool TestAllTypesProto2::_internal_packed_bool(int index) const {
  return _impl_.packed_bool_.Get(index);
}
inline bool TestAllTypesProto2::packed_bool(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.packed_bool)
  return _internal_packed_bool(index);
}
inline void TestAllTypesProto2::set_packed_bool(int index, bool value) {
  _impl_.packed_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.packed_bool)
}
inline void TestAllTypesProto2::_internal_add_packed_bool(bool value) {
  _impl_.packed_bool_.Add(value);
}
inline void TestAllTypesProto2::add_packed_bool(bool value) {
  _internal_add_packed_bool(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.packed_bool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestAllTypesProto2::_internal_packed_bool() const {
  return _impl_.packed_bool_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestAllTypesProto2::packed_bool() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_bool)
  return _internal_packed_bool();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestAllTypesProto2::_internal_mutable_packed_bool() {
  return &_impl_.packed_bool_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestAllTypesProto2::mutable_packed_bool() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_bool)
  return _internal_mutable_packed_bool();
}

// repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum packed_nested_enum = 88 [packed = true];
inline int TestAllTypesProto2::_internal_packed_nested_enum_size() const {
  return _impl_.packed_nested_enum_.size();
}
inline int TestAllTypesProto2::packed_nested_enum_size() const {
  return _internal_packed_nested_enum_size();
}
inline void TestAllTypesProto2::clear_packed_nested_enum() {
  _impl_.packed_nested_enum_.Clear();
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum TestAllTypesProto2::_internal_packed_nested_enum(int index) const {
  return static_cast< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >(_impl_.packed_nested_enum_.Get(index));
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum TestAllTypesProto2::packed_nested_enum(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.packed_nested_enum)
  return _internal_packed_nested_enum(index);
}
inline void TestAllTypesProto2::set_packed_nested_enum(int index, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value) {
  assert(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid(value));
  _impl_.packed_nested_enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.packed_nested_enum)
}
inline void TestAllTypesProto2::_internal_add_packed_nested_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value) {
  assert(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid(value));
  _impl_.packed_nested_enum_.Add(value);
}
inline void TestAllTypesProto2::add_packed_nested_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value) {
  _internal_add_packed_nested_enum(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.packed_nested_enum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TestAllTypesProto2::packed_nested_enum() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_nested_enum)
  return _impl_.packed_nested_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestAllTypesProto2::_internal_mutable_packed_nested_enum() {
  return &_impl_.packed_nested_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestAllTypesProto2::mutable_packed_nested_enum() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.packed_nested_enum)
  return _internal_mutable_packed_nested_enum();
}

// repeated int32 unpacked_int32 = 89 [packed = false];
inline int TestAllTypesProto2::_internal_unpacked_int32_size() const {
  return _impl_.unpacked_int32_.size();
}
inline int TestAllTypesProto2::unpacked_int32_size() const {
  return _internal_unpacked_int32_size();
}
inline void TestAllTypesProto2::clear_unpacked_int32() {
  _impl_.unpacked_int32_.Clear();
}
inline int32_t TestAllTypesProto2::_internal_unpacked_int32(int index) const {
  return _impl_.unpacked_int32_.Get(index);
}
inline int32_t TestAllTypesProto2::unpacked_int32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_int32)
  return _internal_unpacked_int32(index);
}
inline void TestAllTypesProto2::set_unpacked_int32(int index, int32_t value) {
  _impl_.unpacked_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_int32)
}
inline void TestAllTypesProto2::_internal_add_unpacked_int32(int32_t value) {
  _impl_.unpacked_int32_.Add(value);
}
inline void TestAllTypesProto2::add_unpacked_int32(int32_t value) {
  _internal_add_unpacked_int32(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypesProto2::_internal_unpacked_int32() const {
  return _impl_.unpacked_int32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypesProto2::unpacked_int32() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_int32)
  return _internal_unpacked_int32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypesProto2::_internal_mutable_unpacked_int32() {
  return &_impl_.unpacked_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypesProto2::mutable_unpacked_int32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_int32)
  return _internal_mutable_unpacked_int32();
}

// repeated int64 unpacked_int64 = 90 [packed = false];
inline int TestAllTypesProto2::_internal_unpacked_int64_size() const {
  return _impl_.unpacked_int64_.size();
}
inline int TestAllTypesProto2::unpacked_int64_size() const {
  return _internal_unpacked_int64_size();
}
inline void TestAllTypesProto2::clear_unpacked_int64() {
  _impl_.unpacked_int64_.Clear();
}
inline int64_t TestAllTypesProto2::_internal_unpacked_int64(int index) const {
  return _impl_.unpacked_int64_.Get(index);
}
inline int64_t TestAllTypesProto2::unpacked_int64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_int64)
  return _internal_unpacked_int64(index);
}
inline void TestAllTypesProto2::set_unpacked_int64(int index, int64_t value) {
  _impl_.unpacked_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_int64)
}
inline void TestAllTypesProto2::_internal_add_unpacked_int64(int64_t value) {
  _impl_.unpacked_int64_.Add(value);
}
inline void TestAllTypesProto2::add_unpacked_int64(int64_t value) {
  _internal_add_unpacked_int64(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_int64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypesProto2::_internal_unpacked_int64() const {
  return _impl_.unpacked_int64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypesProto2::unpacked_int64() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_int64)
  return _internal_unpacked_int64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypesProto2::_internal_mutable_unpacked_int64() {
  return &_impl_.unpacked_int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypesProto2::mutable_unpacked_int64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_int64)
  return _internal_mutable_unpacked_int64();
}

// repeated uint32 unpacked_uint32 = 91 [packed = false];
inline int TestAllTypesProto2::_internal_unpacked_uint32_size() const {
  return _impl_.unpacked_uint32_.size();
}
inline int TestAllTypesProto2::unpacked_uint32_size() const {
  return _internal_unpacked_uint32_size();
}
inline void TestAllTypesProto2::clear_unpacked_uint32() {
  _impl_.unpacked_uint32_.Clear();
}
inline uint32_t TestAllTypesProto2::_internal_unpacked_uint32(int index) const {
  return _impl_.unpacked_uint32_.Get(index);
}
inline uint32_t TestAllTypesProto2::unpacked_uint32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_uint32)
  return _internal_unpacked_uint32(index);
}
inline void TestAllTypesProto2::set_unpacked_uint32(int index, uint32_t value) {
  _impl_.unpacked_uint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_uint32)
}
inline void TestAllTypesProto2::_internal_add_unpacked_uint32(uint32_t value) {
  _impl_.unpacked_uint32_.Add(value);
}
inline void TestAllTypesProto2::add_unpacked_uint32(uint32_t value) {
  _internal_add_unpacked_uint32(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_uint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestAllTypesProto2::_internal_unpacked_uint32() const {
  return _impl_.unpacked_uint32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestAllTypesProto2::unpacked_uint32() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_uint32)
  return _internal_unpacked_uint32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestAllTypesProto2::_internal_mutable_unpacked_uint32() {
  return &_impl_.unpacked_uint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestAllTypesProto2::mutable_unpacked_uint32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_uint32)
  return _internal_mutable_unpacked_uint32();
}

// repeated uint64 unpacked_uint64 = 92 [packed = false];
inline int TestAllTypesProto2::_internal_unpacked_uint64_size() const {
  return _impl_.unpacked_uint64_.size();
}
inline int TestAllTypesProto2::unpacked_uint64_size() const {
  return _internal_unpacked_uint64_size();
}
inline void TestAllTypesProto2::clear_unpacked_uint64() {
  _impl_.unpacked_uint64_.Clear();
}
inline uint64_t TestAllTypesProto2::_internal_unpacked_uint64(int index) const {
  return _impl_.unpacked_uint64_.Get(index);
}
inline uint64_t TestAllTypesProto2::unpacked_uint64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_uint64)
  return _internal_unpacked_uint64(index);
}
inline void TestAllTypesProto2::set_unpacked_uint64(int index, uint64_t value) {
  _impl_.unpacked_uint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_uint64)
}
inline void TestAllTypesProto2::_internal_add_unpacked_uint64(uint64_t value) {
  _impl_.unpacked_uint64_.Add(value);
}
inline void TestAllTypesProto2::add_unpacked_uint64(uint64_t value) {
  _internal_add_unpacked_uint64(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_uint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestAllTypesProto2::_internal_unpacked_uint64() const {
  return _impl_.unpacked_uint64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestAllTypesProto2::unpacked_uint64() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_uint64)
  return _internal_unpacked_uint64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestAllTypesProto2::_internal_mutable_unpacked_uint64() {
  return &_impl_.unpacked_uint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestAllTypesProto2::mutable_unpacked_uint64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_uint64)
  return _internal_mutable_unpacked_uint64();
}

// repeated sint32 unpacked_sint32 = 93 [packed = false];
inline int TestAllTypesProto2::_internal_unpacked_sint32_size() const {
  return _impl_.unpacked_sint32_.size();
}
inline int TestAllTypesProto2::unpacked_sint32_size() const {
  return _internal_unpacked_sint32_size();
}
inline void TestAllTypesProto2::clear_unpacked_sint32() {
  _impl_.unpacked_sint32_.Clear();
}
inline int32_t TestAllTypesProto2::_internal_unpacked_sint32(int index) const {
  return _impl_.unpacked_sint32_.Get(index);
}
inline int32_t TestAllTypesProto2::unpacked_sint32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sint32)
  return _internal_unpacked_sint32(index);
}
inline void TestAllTypesProto2::set_unpacked_sint32(int index, int32_t value) {
  _impl_.unpacked_sint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sint32)
}
inline void TestAllTypesProto2::_internal_add_unpacked_sint32(int32_t value) {
  _impl_.unpacked_sint32_.Add(value);
}
inline void TestAllTypesProto2::add_unpacked_sint32(int32_t value) {
  _internal_add_unpacked_sint32(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypesProto2::_internal_unpacked_sint32() const {
  return _impl_.unpacked_sint32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypesProto2::unpacked_sint32() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sint32)
  return _internal_unpacked_sint32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypesProto2::_internal_mutable_unpacked_sint32() {
  return &_impl_.unpacked_sint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypesProto2::mutable_unpacked_sint32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sint32)
  return _internal_mutable_unpacked_sint32();
}

// repeated sint64 unpacked_sint64 = 94 [packed = false];
inline int TestAllTypesProto2::_internal_unpacked_sint64_size() const {
  return _impl_.unpacked_sint64_.size();
}
inline int TestAllTypesProto2::unpacked_sint64_size() const {
  return _internal_unpacked_sint64_size();
}
inline void TestAllTypesProto2::clear_unpacked_sint64() {
  _impl_.unpacked_sint64_.Clear();
}
inline int64_t TestAllTypesProto2::_internal_unpacked_sint64(int index) const {
  return _impl_.unpacked_sint64_.Get(index);
}
inline int64_t TestAllTypesProto2::unpacked_sint64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sint64)
  return _internal_unpacked_sint64(index);
}
inline void TestAllTypesProto2::set_unpacked_sint64(int index, int64_t value) {
  _impl_.unpacked_sint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sint64)
}
inline void TestAllTypesProto2::_internal_add_unpacked_sint64(int64_t value) {
  _impl_.unpacked_sint64_.Add(value);
}
inline void TestAllTypesProto2::add_unpacked_sint64(int64_t value) {
  _internal_add_unpacked_sint64(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypesProto2::_internal_unpacked_sint64() const {
  return _impl_.unpacked_sint64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypesProto2::unpacked_sint64() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sint64)
  return _internal_unpacked_sint64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypesProto2::_internal_mutable_unpacked_sint64() {
  return &_impl_.unpacked_sint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypesProto2::mutable_unpacked_sint64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sint64)
  return _internal_mutable_unpacked_sint64();
}

// repeated fixed32 unpacked_fixed32 = 95 [packed = false];
inline int TestAllTypesProto2::_internal_unpacked_fixed32_size() const {
  return _impl_.unpacked_fixed32_.size();
}
inline int TestAllTypesProto2::unpacked_fixed32_size() const {
  return _internal_unpacked_fixed32_size();
}
inline void TestAllTypesProto2::clear_unpacked_fixed32() {
  _impl_.unpacked_fixed32_.Clear();
}
inline uint32_t TestAllTypesProto2::_internal_unpacked_fixed32(int index) const {
  return _impl_.unpacked_fixed32_.Get(index);
}
inline uint32_t TestAllTypesProto2::unpacked_fixed32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_fixed32)
  return _internal_unpacked_fixed32(index);
}
inline void TestAllTypesProto2::set_unpacked_fixed32(int index, uint32_t value) {
  _impl_.unpacked_fixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_fixed32)
}
inline void TestAllTypesProto2::_internal_add_unpacked_fixed32(uint32_t value) {
  _impl_.unpacked_fixed32_.Add(value);
}
inline void TestAllTypesProto2::add_unpacked_fixed32(uint32_t value) {
  _internal_add_unpacked_fixed32(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_fixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestAllTypesProto2::_internal_unpacked_fixed32() const {
  return _impl_.unpacked_fixed32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TestAllTypesProto2::unpacked_fixed32() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_fixed32)
  return _internal_unpacked_fixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestAllTypesProto2::_internal_mutable_unpacked_fixed32() {
  return &_impl_.unpacked_fixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TestAllTypesProto2::mutable_unpacked_fixed32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_fixed32)
  return _internal_mutable_unpacked_fixed32();
}

// repeated fixed64 unpacked_fixed64 = 96 [packed = false];
inline int TestAllTypesProto2::_internal_unpacked_fixed64_size() const {
  return _impl_.unpacked_fixed64_.size();
}
inline int TestAllTypesProto2::unpacked_fixed64_size() const {
  return _internal_unpacked_fixed64_size();
}
inline void TestAllTypesProto2::clear_unpacked_fixed64() {
  _impl_.unpacked_fixed64_.Clear();
}
inline uint64_t TestAllTypesProto2::_internal_unpacked_fixed64(int index) const {
  return _impl_.unpacked_fixed64_.Get(index);
}
inline uint64_t TestAllTypesProto2::unpacked_fixed64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_fixed64)
  return _internal_unpacked_fixed64(index);
}
inline void TestAllTypesProto2::set_unpacked_fixed64(int index, uint64_t value) {
  _impl_.unpacked_fixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_fixed64)
}
inline void TestAllTypesProto2::_internal_add_unpacked_fixed64(uint64_t value) {
  _impl_.unpacked_fixed64_.Add(value);
}
inline void TestAllTypesProto2::add_unpacked_fixed64(uint64_t value) {
  _internal_add_unpacked_fixed64(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_fixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestAllTypesProto2::_internal_unpacked_fixed64() const {
  return _impl_.unpacked_fixed64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
TestAllTypesProto2::unpacked_fixed64() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_fixed64)
  return _internal_unpacked_fixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestAllTypesProto2::_internal_mutable_unpacked_fixed64() {
  return &_impl_.unpacked_fixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
TestAllTypesProto2::mutable_unpacked_fixed64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_fixed64)
  return _internal_mutable_unpacked_fixed64();
}

// repeated sfixed32 unpacked_sfixed32 = 97 [packed = false];
inline int TestAllTypesProto2::_internal_unpacked_sfixed32_size() const {
  return _impl_.unpacked_sfixed32_.size();
}
inline int TestAllTypesProto2::unpacked_sfixed32_size() const {
  return _internal_unpacked_sfixed32_size();
}
inline void TestAllTypesProto2::clear_unpacked_sfixed32() {
  _impl_.unpacked_sfixed32_.Clear();
}
inline int32_t TestAllTypesProto2::_internal_unpacked_sfixed32(int index) const {
  return _impl_.unpacked_sfixed32_.Get(index);
}
inline int32_t TestAllTypesProto2::unpacked_sfixed32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sfixed32)
  return _internal_unpacked_sfixed32(index);
}
inline void TestAllTypesProto2::set_unpacked_sfixed32(int index, int32_t value) {
  _impl_.unpacked_sfixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sfixed32)
}
inline void TestAllTypesProto2::_internal_add_unpacked_sfixed32(int32_t value) {
  _impl_.unpacked_sfixed32_.Add(value);
}
inline void TestAllTypesProto2::add_unpacked_sfixed32(int32_t value) {
  _internal_add_unpacked_sfixed32(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sfixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypesProto2::_internal_unpacked_sfixed32() const {
  return _impl_.unpacked_sfixed32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestAllTypesProto2::unpacked_sfixed32() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sfixed32)
  return _internal_unpacked_sfixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypesProto2::_internal_mutable_unpacked_sfixed32() {
  return &_impl_.unpacked_sfixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestAllTypesProto2::mutable_unpacked_sfixed32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sfixed32)
  return _internal_mutable_unpacked_sfixed32();
}

// repeated sfixed64 unpacked_sfixed64 = 98 [packed = false];
inline int TestAllTypesProto2::_internal_unpacked_sfixed64_size() const {
  return _impl_.unpacked_sfixed64_.size();
}
inline int TestAllTypesProto2::unpacked_sfixed64_size() const {
  return _internal_unpacked_sfixed64_size();
}
inline void TestAllTypesProto2::clear_unpacked_sfixed64() {
  _impl_.unpacked_sfixed64_.Clear();
}
inline int64_t TestAllTypesProto2::_internal_unpacked_sfixed64(int index) const {
  return _impl_.unpacked_sfixed64_.Get(index);
}
inline int64_t TestAllTypesProto2::unpacked_sfixed64(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sfixed64)
  return _internal_unpacked_sfixed64(index);
}
inline void TestAllTypesProto2::set_unpacked_sfixed64(int index, int64_t value) {
  _impl_.unpacked_sfixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sfixed64)
}
inline void TestAllTypesProto2::_internal_add_unpacked_sfixed64(int64_t value) {
  _impl_.unpacked_sfixed64_.Add(value);
}
inline void TestAllTypesProto2::add_unpacked_sfixed64(int64_t value) {
  _internal_add_unpacked_sfixed64(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sfixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypesProto2::_internal_unpacked_sfixed64() const {
  return _impl_.unpacked_sfixed64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
TestAllTypesProto2::unpacked_sfixed64() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sfixed64)
  return _internal_unpacked_sfixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypesProto2::_internal_mutable_unpacked_sfixed64() {
  return &_impl_.unpacked_sfixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
TestAllTypesProto2::mutable_unpacked_sfixed64() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_sfixed64)
  return _internal_mutable_unpacked_sfixed64();
}

// repeated float unpacked_float = 99 [packed = false];
inline int TestAllTypesProto2::_internal_unpacked_float_size() const {
  return _impl_.unpacked_float_.size();
}
inline int TestAllTypesProto2::unpacked_float_size() const {
  return _internal_unpacked_float_size();
}
inline void TestAllTypesProto2::clear_unpacked_float() {
  _impl_.unpacked_float_.Clear();
}
inline float TestAllTypesProto2::_internal_unpacked_float(int index) const {
  return _impl_.unpacked_float_.Get(index);
}
inline float TestAllTypesProto2::unpacked_float(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_float)
  return _internal_unpacked_float(index);
}
inline void TestAllTypesProto2::set_unpacked_float(int index, float value) {
  _impl_.unpacked_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_float)
}
inline void TestAllTypesProto2::_internal_add_unpacked_float(float value) {
  _impl_.unpacked_float_.Add(value);
}
inline void TestAllTypesProto2::add_unpacked_float(float value) {
  _internal_add_unpacked_float(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_float)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestAllTypesProto2::_internal_unpacked_float() const {
  return _impl_.unpacked_float_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TestAllTypesProto2::unpacked_float() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_float)
  return _internal_unpacked_float();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestAllTypesProto2::_internal_mutable_unpacked_float() {
  return &_impl_.unpacked_float_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TestAllTypesProto2::mutable_unpacked_float() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_float)
  return _internal_mutable_unpacked_float();
}

// repeated double unpacked_double = 100 [packed = false];
inline int TestAllTypesProto2::_internal_unpacked_double_size() const {
  return _impl_.unpacked_double_.size();
}
inline int TestAllTypesProto2::unpacked_double_size() const {
  return _internal_unpacked_double_size();
}
inline void TestAllTypesProto2::clear_unpacked_double() {
  _impl_.unpacked_double_.Clear();
}
inline double TestAllTypesProto2::_internal_unpacked_double(int index) const {
  return _impl_.unpacked_double_.Get(index);
}
inline double TestAllTypesProto2::unpacked_double(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_double)
  return _internal_unpacked_double(index);
}
inline void TestAllTypesProto2::set_unpacked_double(int index, double value) {
  _impl_.unpacked_double_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_double)
}
inline void TestAllTypesProto2::_internal_add_unpacked_double(double value) {
  _impl_.unpacked_double_.Add(value);
}
inline void TestAllTypesProto2::add_unpacked_double(double value) {
  _internal_add_unpacked_double(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_double)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestAllTypesProto2::_internal_unpacked_double() const {
  return _impl_.unpacked_double_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TestAllTypesProto2::unpacked_double() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_double)
  return _internal_unpacked_double();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestAllTypesProto2::_internal_mutable_unpacked_double() {
  return &_impl_.unpacked_double_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TestAllTypesProto2::mutable_unpacked_double() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_double)
  return _internal_mutable_unpacked_double();
}

// repeated bool unpacked_bool = 101 [packed = false];
inline int TestAllTypesProto2::_internal_unpacked_bool_size() const {
  return _impl_.unpacked_bool_.size();
}
inline int TestAllTypesProto2::unpacked_bool_size() const {
  return _internal_unpacked_bool_size();
}
inline void TestAllTypesProto2::clear_unpacked_bool() {
  _impl_.unpacked_bool_.Clear();
}
inline bool TestAllTypesProto2::_internal_unpacked_bool(int index) const {
  return _impl_.unpacked_bool_.Get(index);
}
inline bool TestAllTypesProto2::unpacked_bool(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_bool)
  return _internal_unpacked_bool(index);
}
inline void TestAllTypesProto2::set_unpacked_bool(int index, bool value) {
  _impl_.unpacked_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_bool)
}
inline void TestAllTypesProto2::_internal_add_unpacked_bool(bool value) {
  _impl_.unpacked_bool_.Add(value);
}
inline void TestAllTypesProto2::add_unpacked_bool(bool value) {
  _internal_add_unpacked_bool(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_bool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestAllTypesProto2::_internal_unpacked_bool() const {
  return _impl_.unpacked_bool_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TestAllTypesProto2::unpacked_bool() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_bool)
  return _internal_unpacked_bool();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestAllTypesProto2::_internal_mutable_unpacked_bool() {
  return &_impl_.unpacked_bool_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TestAllTypesProto2::mutable_unpacked_bool() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_bool)
  return _internal_mutable_unpacked_bool();
}

// repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum unpacked_nested_enum = 102 [packed = false];
inline int TestAllTypesProto2::_internal_unpacked_nested_enum_size() const {
  return _impl_.unpacked_nested_enum_.size();
}
inline int TestAllTypesProto2::unpacked_nested_enum_size() const {
  return _internal_unpacked_nested_enum_size();
}
inline void TestAllTypesProto2::clear_unpacked_nested_enum() {
  _impl_.unpacked_nested_enum_.Clear();
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum TestAllTypesProto2::_internal_unpacked_nested_enum(int index) const {
  return static_cast< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >(_impl_.unpacked_nested_enum_.Get(index));
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum TestAllTypesProto2::unpacked_nested_enum(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_nested_enum)
  return _internal_unpacked_nested_enum(index);
}
inline void TestAllTypesProto2::set_unpacked_nested_enum(int index, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value) {
  assert(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid(value));
  _impl_.unpacked_nested_enum_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_nested_enum)
}
inline void TestAllTypesProto2::_internal_add_unpacked_nested_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value) {
  assert(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid(value));
  _impl_.unpacked_nested_enum_.Add(value);
}
inline void TestAllTypesProto2::add_unpacked_nested_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value) {
  _internal_add_unpacked_nested_enum(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_nested_enum)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TestAllTypesProto2::unpacked_nested_enum() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_nested_enum)
  return _impl_.unpacked_nested_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestAllTypesProto2::_internal_mutable_unpacked_nested_enum() {
  return &_impl_.unpacked_nested_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TestAllTypesProto2::mutable_unpacked_nested_enum() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.TestAllTypesProto2.unpacked_nested_enum)
  return _internal_mutable_unpacked_nested_enum();
}

// map<int32, int32> map_int32_int32 = 56;
inline int TestAllTypesProto2::_internal_map_int32_int32_size() const {
  return _impl_.map_int32_int32_.size();
}
inline int TestAllTypesProto2::map_int32_int32_size() const {
  return _internal_map_int32_int32_size();
}
inline void TestAllTypesProto2::clear_map_int32_int32() {
  _impl_.map_int32_int32_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
TestAllTypesProto2::_internal_map_int32_int32() const {
  return _impl_.map_int32_int32_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
TestAllTypesProto2::map_int32_int32() const {
  // @@protoc_insertion_point(field_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_int32_int32)
  return _internal_map_int32_int32();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
TestAllTypesProto2::_internal_mutable_map_int32_int32() {
  return _impl_.map_int32_int32_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
TestAllTypesProto2::mutable_map_int32_int32() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_int32_int32)
  return _internal_mutable_map_int32_int32();
}

// map<int64, int64> map_int64_int64 = 57;
inline int TestAllTypesProto2::_internal_map_int64_int64_size() const {
  return _impl_.map_int64_int64_.size();
}
inline int TestAllTypesProto2::map_int64_int64_size() const {
  return _internal_map_int64_int64_size();
}
inline void TestAllTypesProto2::clear_map_int64_int64() {
  _impl_.map_int64_int64_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
TestAllTypesProto2::_internal_map_int64_int64() const {
  return _impl_.map_int64_int64_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
TestAllTypesProto2::map_int64_int64() const {
  // @@protoc_insertion_point(field_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_int64_int64)
  return _internal_map_int64_int64();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
TestAllTypesProto2::_internal_mutable_map_int64_int64() {
  return _impl_.map_int64_int64_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
TestAllTypesProto2::mutable_map_int64_int64() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_int64_int64)
  return _internal_mutable_map_int64_int64();
}

// map<uint32, uint32> map_uint32_uint32 = 58;
inline int TestAllTypesProto2::_internal_map_uint32_uint32_size() const {
  return _impl_.map_uint32_uint32_.size();
}
inline int TestAllTypesProto2::map_uint32_uint32_size() const {
  return _internal_map_uint32_uint32_size();
}
inline void TestAllTypesProto2::clear_map_uint32_uint32() {
  _impl_.map_uint32_uint32_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
TestAllTypesProto2::_internal_map_uint32_uint32() const {
  return _impl_.map_uint32_uint32_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
TestAllTypesProto2::map_uint32_uint32() const {
  // @@protoc_insertion_point(field_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_uint32_uint32)
  return _internal_map_uint32_uint32();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
TestAllTypesProto2::_internal_mutable_map_uint32_uint32() {
  return _impl_.map_uint32_uint32_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
TestAllTypesProto2::mutable_map_uint32_uint32() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_uint32_uint32)
  return _internal_mutable_map_uint32_uint32();
}

// map<uint64, uint64> map_uint64_uint64 = 59;
inline int TestAllTypesProto2::_internal_map_uint64_uint64_size() const {
  return _impl_.map_uint64_uint64_.size();
}
inline int TestAllTypesProto2::map_uint64_uint64_size() const {
  return _internal_map_uint64_uint64_size();
}
inline void TestAllTypesProto2::clear_map_uint64_uint64() {
  _impl_.map_uint64_uint64_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >&
TestAllTypesProto2::_internal_map_uint64_uint64() const {
  return _impl_.map_uint64_uint64_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >&
TestAllTypesProto2::map_uint64_uint64() const {
  // @@protoc_insertion_point(field_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_uint64_uint64)
  return _internal_map_uint64_uint64();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >*
TestAllTypesProto2::_internal_mutable_map_uint64_uint64() {
  return _impl_.map_uint64_uint64_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >*
TestAllTypesProto2::mutable_map_uint64_uint64() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_uint64_uint64)
  return _internal_mutable_map_uint64_uint64();
}

// map<sint32, sint32> map_sint32_sint32 = 60;
inline int TestAllTypesProto2::_internal_map_sint32_sint32_size() const {
  return _impl_.map_sint32_sint32_.size();
}
inline int TestAllTypesProto2::map_sint32_sint32_size() const {
  return _internal_map_sint32_sint32_size();
}
inline void TestAllTypesProto2::clear_map_sint32_sint32() {
  _impl_.map_sint32_sint32_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
TestAllTypesProto2::_internal_map_sint32_sint32() const {
  return _impl_.map_sint32_sint32_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
TestAllTypesProto2::map_sint32_sint32() const {
  // @@protoc_insertion_point(field_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_sint32_sint32)
  return _internal_map_sint32_sint32();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
TestAllTypesProto2::_internal_mutable_map_sint32_sint32() {
  return _impl_.map_sint32_sint32_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
TestAllTypesProto2::mutable_map_sint32_sint32() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_sint32_sint32)
  return _internal_mutable_map_sint32_sint32();
}

// map<sint64, sint64> map_sint64_sint64 = 61;
inline int TestAllTypesProto2::_internal_map_sint64_sint64_size() const {
  return _impl_.map_sint64_sint64_.size();
}
inline int TestAllTypesProto2::map_sint64_sint64_size() const {
  return _internal_map_sint64_sint64_size();
}
inline void TestAllTypesProto2::clear_map_sint64_sint64() {
  _impl_.map_sint64_sint64_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
TestAllTypesProto2::_internal_map_sint64_sint64() const {
  return _impl_.map_sint64_sint64_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
TestAllTypesProto2::map_sint64_sint64() const {
  // @@protoc_insertion_point(field_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_sint64_sint64)
  return _internal_map_sint64_sint64();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
TestAllTypesProto2::_internal_mutable_map_sint64_sint64() {
  return _impl_.map_sint64_sint64_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
TestAllTypesProto2::mutable_map_sint64_sint64() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_sint64_sint64)
  return _internal_mutable_map_sint64_sint64();
}

// map<fixed32, fixed32> map_fixed32_fixed32 = 62;
inline int TestAllTypesProto2::_internal_map_fixed32_fixed32_size() const {
  return _impl_.map_fixed32_fixed32_.size();
}
inline int TestAllTypesProto2::map_fixed32_fixed32_size() const {
  return _internal_map_fixed32_fixed32_size();
}
inline void TestAllTypesProto2::clear_map_fixed32_fixed32() {
  _impl_.map_fixed32_fixed32_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
TestAllTypesProto2::_internal_map_fixed32_fixed32() const {
  return _impl_.map_fixed32_fixed32_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >&
TestAllTypesProto2::map_fixed32_fixed32() const {
  // @@protoc_insertion_point(field_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_fixed32_fixed32)
  return _internal_map_fixed32_fixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
TestAllTypesProto2::_internal_mutable_map_fixed32_fixed32() {
  return _impl_.map_fixed32_fixed32_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >*
TestAllTypesProto2::mutable_map_fixed32_fixed32() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_fixed32_fixed32)
  return _internal_mutable_map_fixed32_fixed32();
}

// map<fixed64, fixed64> map_fixed64_fixed64 = 63;
inline int TestAllTypesProto2::_internal_map_fixed64_fixed64_size() const {
  return _impl_.map_fixed64_fixed64_.size();
}
inline int TestAllTypesProto2::map_fixed64_fixed64_size() const {
  return _internal_map_fixed64_fixed64_size();
}
inline void TestAllTypesProto2::clear_map_fixed64_fixed64() {
  _impl_.map_fixed64_fixed64_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >&
TestAllTypesProto2::_internal_map_fixed64_fixed64() const {
  return _impl_.map_fixed64_fixed64_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >&
TestAllTypesProto2::map_fixed64_fixed64() const {
  // @@protoc_insertion_point(field_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_fixed64_fixed64)
  return _internal_map_fixed64_fixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >*
TestAllTypesProto2::_internal_mutable_map_fixed64_fixed64() {
  return _impl_.map_fixed64_fixed64_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >*
TestAllTypesProto2::mutable_map_fixed64_fixed64() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_fixed64_fixed64)
  return _internal_mutable_map_fixed64_fixed64();
}

// map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 64;
inline int TestAllTypesProto2::_internal_map_sfixed32_sfixed32_size() const {
  return _impl_.map_sfixed32_sfixed32_.size();
}
inline int TestAllTypesProto2::map_sfixed32_sfixed32_size() const {
  return _internal_map_sfixed32_sfixed32_size();
}
inline void TestAllTypesProto2::clear_map_sfixed32_sfixed32() {
  _impl_.map_sfixed32_sfixed32_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
TestAllTypesProto2::_internal_map_sfixed32_sfixed32() const {
  return _impl_.map_sfixed32_sfixed32_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
TestAllTypesProto2::map_sfixed32_sfixed32() const {
  // @@protoc_insertion_point(field_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_sfixed32_sfixed32)
  return _internal_map_sfixed32_sfixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
TestAllTypesProto2::_internal_mutable_map_sfixed32_sfixed32() {
  return _impl_.map_sfixed32_sfixed32_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
TestAllTypesProto2::mutable_map_sfixed32_sfixed32() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_sfixed32_sfixed32)
  return _internal_mutable_map_sfixed32_sfixed32();
}

// map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 65;
inline int TestAllTypesProto2::_internal_map_sfixed64_sfixed64_size() const {
  return _impl_.map_sfixed64_sfixed64_.size();
}
inline int TestAllTypesProto2::map_sfixed64_sfixed64_size() const {
  return _internal_map_sfixed64_sfixed64_size();
}
inline void TestAllTypesProto2::clear_map_sfixed64_sfixed64() {
  _impl_.map_sfixed64_sfixed64_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
TestAllTypesProto2::_internal_map_sfixed64_sfixed64() const {
  return _impl_.map_sfixed64_sfixed64_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >&
TestAllTypesProto2::map_sfixed64_sfixed64() const {
  // @@protoc_insertion_point(field_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_sfixed64_sfixed64)
  return _internal_map_sfixed64_sfixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
TestAllTypesProto2::_internal_mutable_map_sfixed64_sfixed64() {
  return _impl_.map_sfixed64_sfixed64_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >*
TestAllTypesProto2::mutable_map_sfixed64_sfixed64() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_sfixed64_sfixed64)
  return _internal_mutable_map_sfixed64_sfixed64();
}

// map<int32, float> map_int32_float = 66;
inline int TestAllTypesProto2::_internal_map_int32_float_size() const {
  return _impl_.map_int32_float_.size();
}
inline int TestAllTypesProto2::map_int32_float_size() const {
  return _internal_map_int32_float_size();
}
inline void TestAllTypesProto2::clear_map_int32_float() {
  _impl_.map_int32_float_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, float >&
TestAllTypesProto2::_internal_map_int32_float() const {
  return _impl_.map_int32_float_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, float >&
TestAllTypesProto2::map_int32_float() const {
  // @@protoc_insertion_point(field_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_int32_float)
  return _internal_map_int32_float();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, float >*
TestAllTypesProto2::_internal_mutable_map_int32_float() {
  return _impl_.map_int32_float_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, float >*
TestAllTypesProto2::mutable_map_int32_float() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_int32_float)
  return _internal_mutable_map_int32_float();
}

// map<int32, double> map_int32_double = 67;
inline int TestAllTypesProto2::_internal_map_int32_double_size() const {
  return _impl_.map_int32_double_.size();
}
inline int TestAllTypesProto2::map_int32_double_size() const {
  return _internal_map_int32_double_size();
}
inline void TestAllTypesProto2::clear_map_int32_double() {
  _impl_.map_int32_double_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >&
TestAllTypesProto2::_internal_map_int32_double() const {
  return _impl_.map_int32_double_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >&
TestAllTypesProto2::map_int32_double() const {
  // @@protoc_insertion_point(field_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_int32_double)
  return _internal_map_int32_double();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >*
TestAllTypesProto2::_internal_mutable_map_int32_double() {
  return _impl_.map_int32_double_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >*
TestAllTypesProto2::mutable_map_int32_double() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_int32_double)
  return _internal_mutable_map_int32_double();
}

// map<bool, bool> map_bool_bool = 68;
inline int TestAllTypesProto2::_internal_map_bool_bool_size() const {
  return _impl_.map_bool_bool_.size();
}
inline int TestAllTypesProto2::map_bool_bool_size() const {
  return _internal_map_bool_bool_size();
}
inline void TestAllTypesProto2::clear_map_bool_bool() {
  _impl_.map_bool_bool_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< bool, bool >&
TestAllTypesProto2::_internal_map_bool_bool() const {
  return _impl_.map_bool_bool_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< bool, bool >&
TestAllTypesProto2::map_bool_bool() const {
  // @@protoc_insertion_point(field_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_bool_bool)
  return _internal_map_bool_bool();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< bool, bool >*
TestAllTypesProto2::_internal_mutable_map_bool_bool() {
  return _impl_.map_bool_bool_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< bool, bool >*
TestAllTypesProto2::mutable_map_bool_bool() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_bool_bool)
  return _internal_mutable_map_bool_bool();
}

// map<string, string> map_string_string = 69;
inline int TestAllTypesProto2::_internal_map_string_string_size() const {
  return _impl_.map_string_string_.size();
}
inline int TestAllTypesProto2::map_string_string_size() const {
  return _internal_map_string_string_size();
}
inline void TestAllTypesProto2::clear_map_string_string() {
  _impl_.map_string_string_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TestAllTypesProto2::_internal_map_string_string() const {
  return _impl_.map_string_string_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TestAllTypesProto2::map_string_string() const {
  // @@protoc_insertion_point(field_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_string_string)
  return _internal_map_string_string();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TestAllTypesProto2::_internal_mutable_map_string_string() {
  return _impl_.map_string_string_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TestAllTypesProto2::mutable_map_string_string() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_string_string)
  return _internal_mutable_map_string_string();
}

// map<string, bytes> map_string_bytes = 70;
inline int TestAllTypesProto2::_internal_map_string_bytes_size() const {
  return _impl_.map_string_bytes_.size();
}
inline int TestAllTypesProto2::map_string_bytes_size() const {
  return _internal_map_string_bytes_size();
}
inline void TestAllTypesProto2::clear_map_string_bytes() {
  _impl_.map_string_bytes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TestAllTypesProto2::_internal_map_string_bytes() const {
  return _impl_.map_string_bytes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TestAllTypesProto2::map_string_bytes() const {
  // @@protoc_insertion_point(field_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_string_bytes)
  return _internal_map_string_bytes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TestAllTypesProto2::_internal_mutable_map_string_bytes() {
  return _impl_.map_string_bytes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TestAllTypesProto2::mutable_map_string_bytes() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_string_bytes)
  return _internal_mutable_map_string_bytes();
}

// map<string, .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage> map_string_nested_message = 71;
inline int TestAllTypesProto2::_internal_map_string_nested_message_size() const {
  return _impl_.map_string_nested_message_.size();
}
inline int TestAllTypesProto2::map_string_nested_message_size() const {
  return _internal_map_string_nested_message_size();
}
inline void TestAllTypesProto2::clear_map_string_nested_message() {
  _impl_.map_string_nested_message_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >&
TestAllTypesProto2::_internal_map_string_nested_message() const {
  return _impl_.map_string_nested_message_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >&
TestAllTypesProto2::map_string_nested_message() const {
  // @@protoc_insertion_point(field_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_string_nested_message)
  return _internal_map_string_nested_message();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >*
TestAllTypesProto2::_internal_mutable_map_string_nested_message() {
  return _impl_.map_string_nested_message_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >*
TestAllTypesProto2::mutable_map_string_nested_message() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_string_nested_message)
  return _internal_mutable_map_string_nested_message();
}

// map<string, .protobuf_test_messages.proto2.ForeignMessageProto2> map_string_foreign_message = 72;
inline int TestAllTypesProto2::_internal_map_string_foreign_message_size() const {
  return _impl_.map_string_foreign_message_.size();
}
inline int TestAllTypesProto2::map_string_foreign_message_size() const {
  return _internal_map_string_foreign_message_size();
}
inline void TestAllTypesProto2::clear_map_string_foreign_message() {
  _impl_.map_string_foreign_message_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignMessageProto2 >&
TestAllTypesProto2::_internal_map_string_foreign_message() const {
  return _impl_.map_string_foreign_message_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignMessageProto2 >&
TestAllTypesProto2::map_string_foreign_message() const {
  // @@protoc_insertion_point(field_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_string_foreign_message)
  return _internal_map_string_foreign_message();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignMessageProto2 >*
TestAllTypesProto2::_internal_mutable_map_string_foreign_message() {
  return _impl_.map_string_foreign_message_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignMessageProto2 >*
TestAllTypesProto2::mutable_map_string_foreign_message() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_string_foreign_message)
  return _internal_mutable_map_string_foreign_message();
}

// map<string, .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum> map_string_nested_enum = 73;
inline int TestAllTypesProto2::_internal_map_string_nested_enum_size() const {
  return _impl_.map_string_nested_enum_.size();
}
inline int TestAllTypesProto2::map_string_nested_enum_size() const {
  return _internal_map_string_nested_enum_size();
}
inline void TestAllTypesProto2::clear_map_string_nested_enum() {
  _impl_.map_string_nested_enum_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >&
TestAllTypesProto2::_internal_map_string_nested_enum() const {
  return _impl_.map_string_nested_enum_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >&
TestAllTypesProto2::map_string_nested_enum() const {
  // @@protoc_insertion_point(field_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_string_nested_enum)
  return _internal_map_string_nested_enum();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >*
TestAllTypesProto2::_internal_mutable_map_string_nested_enum() {
  return _impl_.map_string_nested_enum_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >*
TestAllTypesProto2::mutable_map_string_nested_enum() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_string_nested_enum)
  return _internal_mutable_map_string_nested_enum();
}

// map<string, .protobuf_test_messages.proto2.ForeignEnumProto2> map_string_foreign_enum = 74;
inline int TestAllTypesProto2::_internal_map_string_foreign_enum_size() const {
  return _impl_.map_string_foreign_enum_.size();
}
inline int TestAllTypesProto2::map_string_foreign_enum_size() const {
  return _internal_map_string_foreign_enum_size();
}
inline void TestAllTypesProto2::clear_map_string_foreign_enum() {
  _impl_.map_string_foreign_enum_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignEnumProto2 >&
TestAllTypesProto2::_internal_map_string_foreign_enum() const {
  return _impl_.map_string_foreign_enum_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignEnumProto2 >&
TestAllTypesProto2::map_string_foreign_enum() const {
  // @@protoc_insertion_point(field_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_string_foreign_enum)
  return _internal_map_string_foreign_enum();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignEnumProto2 >*
TestAllTypesProto2::_internal_mutable_map_string_foreign_enum() {
  return _impl_.map_string_foreign_enum_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignEnumProto2 >*
TestAllTypesProto2::mutable_map_string_foreign_enum() {
  // @@protoc_insertion_point(field_mutable_map:protobuf_test_messages.proto2.TestAllTypesProto2.map_string_foreign_enum)
  return _internal_mutable_map_string_foreign_enum();
}

// uint32 oneof_uint32 = 111;
inline bool TestAllTypesProto2::_internal_has_oneof_uint32() const {
  return oneof_field_case() == kOneofUint32;
}
inline bool TestAllTypesProto2::has_oneof_uint32() const {
  return _internal_has_oneof_uint32();
}
inline void TestAllTypesProto2::set_has_oneof_uint32() {
  _impl_._oneof_case_[0] = kOneofUint32;
}
inline void TestAllTypesProto2::clear_oneof_uint32() {
  if (_internal_has_oneof_uint32()) {
    _impl_.oneof_field_.oneof_uint32_ = 0u;
    clear_has_oneof_field();
  }
}
inline uint32_t TestAllTypesProto2::_internal_oneof_uint32() const {
  if (_internal_has_oneof_uint32()) {
    return _impl_.oneof_field_.oneof_uint32_;
  }
  return 0u;
}
inline void TestAllTypesProto2::_internal_set_oneof_uint32(uint32_t value) {
  if (!_internal_has_oneof_uint32()) {
    clear_oneof_field();
    set_has_oneof_uint32();
  }
  _impl_.oneof_field_.oneof_uint32_ = value;
}
inline uint32_t TestAllTypesProto2::oneof_uint32() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_uint32)
  return _internal_oneof_uint32();
}
inline void TestAllTypesProto2::set_oneof_uint32(uint32_t value) {
  _internal_set_oneof_uint32(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_uint32)
}

// .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage oneof_nested_message = 112;
inline bool TestAllTypesProto2::_internal_has_oneof_nested_message() const {
  return oneof_field_case() == kOneofNestedMessage;
}
inline bool TestAllTypesProto2::has_oneof_nested_message() const {
  return _internal_has_oneof_nested_message();
}
inline void TestAllTypesProto2::set_has_oneof_nested_message() {
  _impl_._oneof_case_[0] = kOneofNestedMessage;
}
inline void TestAllTypesProto2::clear_oneof_nested_message() {
  if (_internal_has_oneof_nested_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.oneof_field_.oneof_nested_message_;
    }
    clear_has_oneof_field();
  }
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* TestAllTypesProto2::release_oneof_nested_message() {
  // @@protoc_insertion_point(field_release:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_nested_message)
  if (_internal_has_oneof_nested_message()) {
    clear_has_oneof_field();
    ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* temp = _impl_.oneof_field_.oneof_nested_message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.oneof_field_.oneof_nested_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage& TestAllTypesProto2::_internal_oneof_nested_message() const {
  return _internal_has_oneof_nested_message()
      ? *_impl_.oneof_field_.oneof_nested_message_
      : reinterpret_cast< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage&>(::protobuf_test_messages::proto2::_TestAllTypesProto2_NestedMessage_default_instance_);
}
inline const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage& TestAllTypesProto2::oneof_nested_message() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_nested_message)
  return _internal_oneof_nested_message();
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* TestAllTypesProto2::unsafe_arena_release_oneof_nested_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_nested_message)
  if (_internal_has_oneof_nested_message()) {
    clear_has_oneof_field();
    ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* temp = _impl_.oneof_field_.oneof_nested_message_;
    _impl_.oneof_field_.oneof_nested_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestAllTypesProto2::unsafe_arena_set_allocated_oneof_nested_message(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* oneof_nested_message) {
  clear_oneof_field();
  if (oneof_nested_message) {
    set_has_oneof_nested_message();
    _impl_.oneof_field_.oneof_nested_message_ = oneof_nested_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_nested_message)
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* TestAllTypesProto2::_internal_mutable_oneof_nested_message() {
  if (!_internal_has_oneof_nested_message()) {
    clear_oneof_field();
    set_has_oneof_nested_message();
    _impl_.oneof_field_.oneof_nested_message_ = CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >(GetArenaForAllocation());
  }
  return _impl_.oneof_field_.oneof_nested_message_;
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* TestAllTypesProto2::mutable_oneof_nested_message() {
  ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* _msg = _internal_mutable_oneof_nested_message();
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_nested_message)
  return _msg;
}

// string oneof_string = 113;
inline bool TestAllTypesProto2::_internal_has_oneof_string() const {
  return oneof_field_case() == kOneofString;
}
inline bool TestAllTypesProto2::has_oneof_string() const {
  return _internal_has_oneof_string();
}
inline void TestAllTypesProto2::set_has_oneof_string() {
  _impl_._oneof_case_[0] = kOneofString;
}
inline void TestAllTypesProto2::clear_oneof_string() {
  if (_internal_has_oneof_string()) {
    _impl_.oneof_field_.oneof_string_.Destroy();
    clear_has_oneof_field();
  }
}
inline const std::string& TestAllTypesProto2::oneof_string() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_string)
  return _internal_oneof_string();
}
template <typename ArgT0, typename... ArgT>
inline void TestAllTypesProto2::set_oneof_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    _impl_.oneof_field_.oneof_string_.InitDefault();
  }
  _impl_.oneof_field_.oneof_string_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_string)
}
inline std::string* TestAllTypesProto2::mutable_oneof_string() {
  std::string* _s = _internal_mutable_oneof_string();
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_string)
  return _s;
}
inline const std::string& TestAllTypesProto2::_internal_oneof_string() const {
  if (_internal_has_oneof_string()) {
    return _impl_.oneof_field_.oneof_string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestAllTypesProto2::_internal_set_oneof_string(const std::string& value) {
  if (!_internal_has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    _impl_.oneof_field_.oneof_string_.InitDefault();
  }
  _impl_.oneof_field_.oneof_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAllTypesProto2::_internal_mutable_oneof_string() {
  if (!_internal_has_oneof_string()) {
    clear_oneof_field();
    set_has_oneof_string();
    _impl_.oneof_field_.oneof_string_.InitDefault();
  }
  return _impl_.oneof_field_.oneof_string_.Mutable(      GetArenaForAllocation());
}
inline std::string* TestAllTypesProto2::release_oneof_string() {
  // @@protoc_insertion_point(field_release:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_string)
  if (_internal_has_oneof_string()) {
    clear_has_oneof_field();
    return _impl_.oneof_field_.oneof_string_.Release();
  } else {
    return nullptr;
  }
}
inline void TestAllTypesProto2::set_allocated_oneof_string(std::string* oneof_string) {
  if (has_oneof_field()) {
    clear_oneof_field();
  }
  if (oneof_string != nullptr) {
    set_has_oneof_string();
    _impl_.oneof_field_.oneof_string_.InitAllocated(oneof_string, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_string)
}

// bytes oneof_bytes = 114;
inline bool TestAllTypesProto2::_internal_has_oneof_bytes() const {
  return oneof_field_case() == kOneofBytes;
}
inline bool TestAllTypesProto2::has_oneof_bytes() const {
  return _internal_has_oneof_bytes();
}
inline void TestAllTypesProto2::set_has_oneof_bytes() {
  _impl_._oneof_case_[0] = kOneofBytes;
}
inline void TestAllTypesProto2::clear_oneof_bytes() {
  if (_internal_has_oneof_bytes()) {
    _impl_.oneof_field_.oneof_bytes_.Destroy();
    clear_has_oneof_field();
  }
}
inline const std::string& TestAllTypesProto2::oneof_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_bytes)
  return _internal_oneof_bytes();
}
template <typename ArgT0, typename... ArgT>
inline void TestAllTypesProto2::set_oneof_bytes(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    _impl_.oneof_field_.oneof_bytes_.InitDefault();
  }
  _impl_.oneof_field_.oneof_bytes_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_bytes)
}
inline std::string* TestAllTypesProto2::mutable_oneof_bytes() {
  std::string* _s = _internal_mutable_oneof_bytes();
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_bytes)
  return _s;
}
inline const std::string& TestAllTypesProto2::_internal_oneof_bytes() const {
  if (_internal_has_oneof_bytes()) {
    return _impl_.oneof_field_.oneof_bytes_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TestAllTypesProto2::_internal_set_oneof_bytes(const std::string& value) {
  if (!_internal_has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    _impl_.oneof_field_.oneof_bytes_.InitDefault();
  }
  _impl_.oneof_field_.oneof_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAllTypesProto2::_internal_mutable_oneof_bytes() {
  if (!_internal_has_oneof_bytes()) {
    clear_oneof_field();
    set_has_oneof_bytes();
    _impl_.oneof_field_.oneof_bytes_.InitDefault();
  }
  return _impl_.oneof_field_.oneof_bytes_.Mutable(      GetArenaForAllocation());
}
inline std::string* TestAllTypesProto2::release_oneof_bytes() {
  // @@protoc_insertion_point(field_release:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_bytes)
  if (_internal_has_oneof_bytes()) {
    clear_has_oneof_field();
    return _impl_.oneof_field_.oneof_bytes_.Release();
  } else {
    return nullptr;
  }
}
inline void TestAllTypesProto2::set_allocated_oneof_bytes(std::string* oneof_bytes) {
  if (has_oneof_field()) {
    clear_oneof_field();
  }
  if (oneof_bytes != nullptr) {
    set_has_oneof_bytes();
    _impl_.oneof_field_.oneof_bytes_.InitAllocated(oneof_bytes, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_bytes)
}

// bool oneof_bool = 115;
inline bool TestAllTypesProto2::_internal_has_oneof_bool() const {
  return oneof_field_case() == kOneofBool;
}
inline bool TestAllTypesProto2::has_oneof_bool() const {
  return _internal_has_oneof_bool();
}
inline void TestAllTypesProto2::set_has_oneof_bool() {
  _impl_._oneof_case_[0] = kOneofBool;
}
inline void TestAllTypesProto2::clear_oneof_bool() {
  if (_internal_has_oneof_bool()) {
    _impl_.oneof_field_.oneof_bool_ = false;
    clear_has_oneof_field();
  }
}
inline bool TestAllTypesProto2::_internal_oneof_bool() const {
  if (_internal_has_oneof_bool()) {
    return _impl_.oneof_field_.oneof_bool_;
  }
  return false;
}
inline void TestAllTypesProto2::_internal_set_oneof_bool(bool value) {
  if (!_internal_has_oneof_bool()) {
    clear_oneof_field();
    set_has_oneof_bool();
  }
  _impl_.oneof_field_.oneof_bool_ = value;
}
inline bool TestAllTypesProto2::oneof_bool() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_bool)
  return _internal_oneof_bool();
}
inline void TestAllTypesProto2::set_oneof_bool(bool value) {
  _internal_set_oneof_bool(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_bool)
}

// uint64 oneof_uint64 = 116;
inline bool TestAllTypesProto2::_internal_has_oneof_uint64() const {
  return oneof_field_case() == kOneofUint64;
}
inline bool TestAllTypesProto2::has_oneof_uint64() const {
  return _internal_has_oneof_uint64();
}
inline void TestAllTypesProto2::set_has_oneof_uint64() {
  _impl_._oneof_case_[0] = kOneofUint64;
}
inline void TestAllTypesProto2::clear_oneof_uint64() {
  if (_internal_has_oneof_uint64()) {
    _impl_.oneof_field_.oneof_uint64_ = uint64_t{0u};
    clear_has_oneof_field();
  }
}
inline uint64_t TestAllTypesProto2::_internal_oneof_uint64() const {
  if (_internal_has_oneof_uint64()) {
    return _impl_.oneof_field_.oneof_uint64_;
  }
  return uint64_t{0u};
}
inline void TestAllTypesProto2::_internal_set_oneof_uint64(uint64_t value) {
  if (!_internal_has_oneof_uint64()) {
    clear_oneof_field();
    set_has_oneof_uint64();
  }
  _impl_.oneof_field_.oneof_uint64_ = value;
}
inline uint64_t TestAllTypesProto2::oneof_uint64() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_uint64)
  return _internal_oneof_uint64();
}
inline void TestAllTypesProto2::set_oneof_uint64(uint64_t value) {
  _internal_set_oneof_uint64(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_uint64)
}

// float oneof_float = 117;
inline bool TestAllTypesProto2::_internal_has_oneof_float() const {
  return oneof_field_case() == kOneofFloat;
}
inline bool TestAllTypesProto2::has_oneof_float() const {
  return _internal_has_oneof_float();
}
inline void TestAllTypesProto2::set_has_oneof_float() {
  _impl_._oneof_case_[0] = kOneofFloat;
}
inline void TestAllTypesProto2::clear_oneof_float() {
  if (_internal_has_oneof_float()) {
    _impl_.oneof_field_.oneof_float_ = 0;
    clear_has_oneof_field();
  }
}
inline float TestAllTypesProto2::_internal_oneof_float() const {
  if (_internal_has_oneof_float()) {
    return _impl_.oneof_field_.oneof_float_;
  }
  return 0;
}
inline void TestAllTypesProto2::_internal_set_oneof_float(float value) {
  if (!_internal_has_oneof_float()) {
    clear_oneof_field();
    set_has_oneof_float();
  }
  _impl_.oneof_field_.oneof_float_ = value;
}
inline float TestAllTypesProto2::oneof_float() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_float)
  return _internal_oneof_float();
}
inline void TestAllTypesProto2::set_oneof_float(float value) {
  _internal_set_oneof_float(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_float)
}

// double oneof_double = 118;
inline bool TestAllTypesProto2::_internal_has_oneof_double() const {
  return oneof_field_case() == kOneofDouble;
}
inline bool TestAllTypesProto2::has_oneof_double() const {
  return _internal_has_oneof_double();
}
inline void TestAllTypesProto2::set_has_oneof_double() {
  _impl_._oneof_case_[0] = kOneofDouble;
}
inline void TestAllTypesProto2::clear_oneof_double() {
  if (_internal_has_oneof_double()) {
    _impl_.oneof_field_.oneof_double_ = 0;
    clear_has_oneof_field();
  }
}
inline double TestAllTypesProto2::_internal_oneof_double() const {
  if (_internal_has_oneof_double()) {
    return _impl_.oneof_field_.oneof_double_;
  }
  return 0;
}
inline void TestAllTypesProto2::_internal_set_oneof_double(double value) {
  if (!_internal_has_oneof_double()) {
    clear_oneof_field();
    set_has_oneof_double();
  }
  _impl_.oneof_field_.oneof_double_ = value;
}
inline double TestAllTypesProto2::oneof_double() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_double)
  return _internal_oneof_double();
}
inline void TestAllTypesProto2::set_oneof_double(double value) {
  _internal_set_oneof_double(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_double)
}

// .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum oneof_enum = 119;
inline bool TestAllTypesProto2::_internal_has_oneof_enum() const {
  return oneof_field_case() == kOneofEnum;
}
inline bool TestAllTypesProto2::has_oneof_enum() const {
  return _internal_has_oneof_enum();
}
inline void TestAllTypesProto2::set_has_oneof_enum() {
  _impl_._oneof_case_[0] = kOneofEnum;
}
inline void TestAllTypesProto2::clear_oneof_enum() {
  if (_internal_has_oneof_enum()) {
    _impl_.oneof_field_.oneof_enum_ = 0;
    clear_has_oneof_field();
  }
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum TestAllTypesProto2::_internal_oneof_enum() const {
  if (_internal_has_oneof_enum()) {
    return static_cast< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >(_impl_.oneof_field_.oneof_enum_);
  }
  return static_cast< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >(0);
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum TestAllTypesProto2::oneof_enum() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_enum)
  return _internal_oneof_enum();
}
inline void TestAllTypesProto2::_internal_set_oneof_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value) {
  assert(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid(value));
  if (!_internal_has_oneof_enum()) {
    clear_oneof_field();
    set_has_oneof_enum();
  }
  _impl_.oneof_field_.oneof_enum_ = value;
}
inline void TestAllTypesProto2::set_oneof_enum(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum value) {
  _internal_set_oneof_enum(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_enum)
}

// optional group Data = 201 { ... };
inline bool TestAllTypesProto2::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool TestAllTypesProto2::has_data() const {
  return _internal_has_data();
}
inline void TestAllTypesProto2::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::protobuf_test_messages::proto2::TestAllTypesProto2_Data& TestAllTypesProto2::_internal_data() const {
  const ::protobuf_test_messages::proto2::TestAllTypesProto2_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_test_messages::proto2::TestAllTypesProto2_Data&>(
      ::protobuf_test_messages::proto2::_TestAllTypesProto2_Data_default_instance_);
}
inline const ::protobuf_test_messages::proto2::TestAllTypesProto2_Data& TestAllTypesProto2::data() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.data)
  return _internal_data();
}
inline void TestAllTypesProto2::unsafe_arena_set_allocated_data(
    ::protobuf_test_messages::proto2::TestAllTypesProto2_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.data)
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_Data* TestAllTypesProto2::release_data() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::protobuf_test_messages::proto2::TestAllTypesProto2_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_Data* TestAllTypesProto2::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:protobuf_test_messages.proto2.TestAllTypesProto2.data)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::protobuf_test_messages::proto2::TestAllTypesProto2_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_Data* TestAllTypesProto2::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_test_messages::proto2::TestAllTypesProto2_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::protobuf_test_messages::proto2::TestAllTypesProto2_Data* TestAllTypesProto2::mutable_data() {
  ::protobuf_test_messages::proto2::TestAllTypesProto2_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.data)
  return _msg;
}
inline void TestAllTypesProto2::set_allocated_data(::protobuf_test_messages::proto2::TestAllTypesProto2_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.data)
}

// optional int32 default_int32 = 241 [default = -123456789];
inline bool TestAllTypesProto2::_internal_has_default_int32() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_default_int32() const {
  return _internal_has_default_int32();
}
inline void TestAllTypesProto2::clear_default_int32() {
  _impl_.default_int32_ = -123456789;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline int32_t TestAllTypesProto2::_internal_default_int32() const {
  return _impl_.default_int32_;
}
inline int32_t TestAllTypesProto2::default_int32() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.default_int32)
  return _internal_default_int32();
}
inline void TestAllTypesProto2::_internal_set_default_int32(int32_t value) {
  _impl_._has_bits_[1] |= 0x00002000u;
  _impl_.default_int32_ = value;
}
inline void TestAllTypesProto2::set_default_int32(int32_t value) {
  _internal_set_default_int32(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.default_int32)
}

// optional int64 default_int64 = 242 [default = -9123456789123456789];
inline bool TestAllTypesProto2::_internal_has_default_int64() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_default_int64() const {
  return _internal_has_default_int64();
}
inline void TestAllTypesProto2::clear_default_int64() {
  _impl_.default_int64_ = int64_t{-9123456789123456789};
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline int64_t TestAllTypesProto2::_internal_default_int64() const {
  return _impl_.default_int64_;
}
inline int64_t TestAllTypesProto2::default_int64() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.default_int64)
  return _internal_default_int64();
}
inline void TestAllTypesProto2::_internal_set_default_int64(int64_t value) {
  _impl_._has_bits_[1] |= 0x00001000u;
  _impl_.default_int64_ = value;
}
inline void TestAllTypesProto2::set_default_int64(int64_t value) {
  _internal_set_default_int64(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.default_int64)
}

// optional uint32 default_uint32 = 243 [default = 2123456789];
inline bool TestAllTypesProto2::_internal_has_default_uint32() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_default_uint32() const {
  return _internal_has_default_uint32();
}
inline void TestAllTypesProto2::clear_default_uint32() {
  _impl_.default_uint32_ = 2123456789u;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline uint32_t TestAllTypesProto2::_internal_default_uint32() const {
  return _impl_.default_uint32_;
}
inline uint32_t TestAllTypesProto2::default_uint32() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.default_uint32)
  return _internal_default_uint32();
}
inline void TestAllTypesProto2::_internal_set_default_uint32(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00004000u;
  _impl_.default_uint32_ = value;
}
inline void TestAllTypesProto2::set_default_uint32(uint32_t value) {
  _internal_set_default_uint32(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.default_uint32)
}

// optional uint64 default_uint64 = 244 [default = 10123456789123456789];
inline bool TestAllTypesProto2::_internal_has_default_uint64() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_default_uint64() const {
  return _internal_has_default_uint64();
}
inline void TestAllTypesProto2::clear_default_uint64() {
  _impl_.default_uint64_ = uint64_t{10123456789123456789u};
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline uint64_t TestAllTypesProto2::_internal_default_uint64() const {
  return _impl_.default_uint64_;
}
inline uint64_t TestAllTypesProto2::default_uint64() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.default_uint64)
  return _internal_default_uint64();
}
inline void TestAllTypesProto2::_internal_set_default_uint64(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00008000u;
  _impl_.default_uint64_ = value;
}
inline void TestAllTypesProto2::set_default_uint64(uint64_t value) {
  _internal_set_default_uint64(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.default_uint64)
}

// optional sint32 default_sint32 = 245 [default = -123456789];
inline bool TestAllTypesProto2::_internal_has_default_sint32() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_default_sint32() const {
  return _internal_has_default_sint32();
}
inline void TestAllTypesProto2::clear_default_sint32() {
  _impl_.default_sint32_ = -123456789;
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline int32_t TestAllTypesProto2::_internal_default_sint32() const {
  return _impl_.default_sint32_;
}
inline int32_t TestAllTypesProto2::default_sint32() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.default_sint32)
  return _internal_default_sint32();
}
inline void TestAllTypesProto2::_internal_set_default_sint32(int32_t value) {
  _impl_._has_bits_[1] |= 0x00020000u;
  _impl_.default_sint32_ = value;
}
inline void TestAllTypesProto2::set_default_sint32(int32_t value) {
  _internal_set_default_sint32(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.default_sint32)
}

// optional sint64 default_sint64 = 246 [default = -9123456789123456789];
inline bool TestAllTypesProto2::_internal_has_default_sint64() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_default_sint64() const {
  return _internal_has_default_sint64();
}
inline void TestAllTypesProto2::clear_default_sint64() {
  _impl_.default_sint64_ = int64_t{-9123456789123456789};
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline int64_t TestAllTypesProto2::_internal_default_sint64() const {
  return _impl_.default_sint64_;
}
inline int64_t TestAllTypesProto2::default_sint64() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.default_sint64)
  return _internal_default_sint64();
}
inline void TestAllTypesProto2::_internal_set_default_sint64(int64_t value) {
  _impl_._has_bits_[1] |= 0x00010000u;
  _impl_.default_sint64_ = value;
}
inline void TestAllTypesProto2::set_default_sint64(int64_t value) {
  _internal_set_default_sint64(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.default_sint64)
}

// optional fixed32 default_fixed32 = 247 [default = 2123456789];
inline bool TestAllTypesProto2::_internal_has_default_fixed32() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_default_fixed32() const {
  return _internal_has_default_fixed32();
}
inline void TestAllTypesProto2::clear_default_fixed32() {
  _impl_.default_fixed32_ = 2123456789u;
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline uint32_t TestAllTypesProto2::_internal_default_fixed32() const {
  return _impl_.default_fixed32_;
}
inline uint32_t TestAllTypesProto2::default_fixed32() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.default_fixed32)
  return _internal_default_fixed32();
}
inline void TestAllTypesProto2::_internal_set_default_fixed32(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00040000u;
  _impl_.default_fixed32_ = value;
}
inline void TestAllTypesProto2::set_default_fixed32(uint32_t value) {
  _internal_set_default_fixed32(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.default_fixed32)
}

// optional fixed64 default_fixed64 = 248 [default = 10123456789123456789];
inline bool TestAllTypesProto2::_internal_has_default_fixed64() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_default_fixed64() const {
  return _internal_has_default_fixed64();
}
inline void TestAllTypesProto2::clear_default_fixed64() {
  _impl_.default_fixed64_ = uint64_t{10123456789123456789u};
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline uint64_t TestAllTypesProto2::_internal_default_fixed64() const {
  return _impl_.default_fixed64_;
}
inline uint64_t TestAllTypesProto2::default_fixed64() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.default_fixed64)
  return _internal_default_fixed64();
}
inline void TestAllTypesProto2::_internal_set_default_fixed64(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00080000u;
  _impl_.default_fixed64_ = value;
}
inline void TestAllTypesProto2::set_default_fixed64(uint64_t value) {
  _internal_set_default_fixed64(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.default_fixed64)
}

// optional sfixed32 default_sfixed32 = 249 [default = -123456789];
inline bool TestAllTypesProto2::_internal_has_default_sfixed32() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_default_sfixed32() const {
  return _internal_has_default_sfixed32();
}
inline void TestAllTypesProto2::clear_default_sfixed32() {
  _impl_.default_sfixed32_ = -123456789;
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline int32_t TestAllTypesProto2::_internal_default_sfixed32() const {
  return _impl_.default_sfixed32_;
}
inline int32_t TestAllTypesProto2::default_sfixed32() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.default_sfixed32)
  return _internal_default_sfixed32();
}
inline void TestAllTypesProto2::_internal_set_default_sfixed32(int32_t value) {
  _impl_._has_bits_[1] |= 0x00200000u;
  _impl_.default_sfixed32_ = value;
}
inline void TestAllTypesProto2::set_default_sfixed32(int32_t value) {
  _internal_set_default_sfixed32(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.default_sfixed32)
}

// optional sfixed64 default_sfixed64 = 250 [default = -9123456789123456789];
inline bool TestAllTypesProto2::_internal_has_default_sfixed64() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_default_sfixed64() const {
  return _internal_has_default_sfixed64();
}
inline void TestAllTypesProto2::clear_default_sfixed64() {
  _impl_.default_sfixed64_ = int64_t{-9123456789123456789};
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline int64_t TestAllTypesProto2::_internal_default_sfixed64() const {
  return _impl_.default_sfixed64_;
}
inline int64_t TestAllTypesProto2::default_sfixed64() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.default_sfixed64)
  return _internal_default_sfixed64();
}
inline void TestAllTypesProto2::_internal_set_default_sfixed64(int64_t value) {
  _impl_._has_bits_[1] |= 0x00100000u;
  _impl_.default_sfixed64_ = value;
}
inline void TestAllTypesProto2::set_default_sfixed64(int64_t value) {
  _internal_set_default_sfixed64(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.default_sfixed64)
}

// optional float default_float = 251 [default = 9e+009];
inline bool TestAllTypesProto2::_internal_has_default_float() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_default_float() const {
  return _internal_has_default_float();
}
inline void TestAllTypesProto2::clear_default_float() {
  _impl_.default_float_ = 9e+009f;
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline float TestAllTypesProto2::_internal_default_float() const {
  return _impl_.default_float_;
}
inline float TestAllTypesProto2::default_float() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.default_float)
  return _internal_default_float();
}
inline void TestAllTypesProto2::_internal_set_default_float(float value) {
  _impl_._has_bits_[1] |= 0x00400000u;
  _impl_.default_float_ = value;
}
inline void TestAllTypesProto2::set_default_float(float value) {
  _internal_set_default_float(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.default_float)
}

// optional double default_double = 252 [default = 7e+022];
inline bool TestAllTypesProto2::_internal_has_default_double() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_default_double() const {
  return _internal_has_default_double();
}
inline void TestAllTypesProto2::clear_default_double() {
  _impl_.default_double_ = 7e+022;
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline double TestAllTypesProto2::_internal_default_double() const {
  return _impl_.default_double_;
}
inline double TestAllTypesProto2::default_double() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.default_double)
  return _internal_default_double();
}
inline void TestAllTypesProto2::_internal_set_default_double(double value) {
  _impl_._has_bits_[1] |= 0x00800000u;
  _impl_.default_double_ = value;
}
inline void TestAllTypesProto2::set_default_double(double value) {
  _internal_set_default_double(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.default_double)
}

// optional bool default_bool = 253 [default = true];
inline bool TestAllTypesProto2::_internal_has_default_bool() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_default_bool() const {
  return _internal_has_default_bool();
}
inline void TestAllTypesProto2::clear_default_bool() {
  _impl_.default_bool_ = true;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline bool TestAllTypesProto2::_internal_default_bool() const {
  return _impl_.default_bool_;
}
inline bool TestAllTypesProto2::default_bool() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.default_bool)
  return _internal_default_bool();
}
inline void TestAllTypesProto2::_internal_set_default_bool(bool value) {
  _impl_._has_bits_[1] |= 0x00000800u;
  _impl_.default_bool_ = value;
}
inline void TestAllTypesProto2::set_default_bool(bool value) {
  _internal_set_default_bool(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.default_bool)
}

// optional string default_string = 254 [default = "Rosebud"];
inline bool TestAllTypesProto2::_internal_has_default_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_default_string() const {
  return _internal_has_default_string();
}
inline void TestAllTypesProto2::clear_default_string() {
  _impl_.default_string_.ClearToDefault(::protobuf_test_messages::proto2::TestAllTypesProto2::Impl_::_i_give_permission_to_break_this_code_default_default_string_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TestAllTypesProto2::default_string() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.default_string)
  if (_impl_.default_string_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_default_string_.get();
  return _internal_default_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestAllTypesProto2::set_default_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.default_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.default_string)
}
inline std::string* TestAllTypesProto2::mutable_default_string() {
  std::string* _s = _internal_mutable_default_string();
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.default_string)
  return _s;
}
inline const std::string& TestAllTypesProto2::_internal_default_string() const {
  return _impl_.default_string_.Get();
}
inline void TestAllTypesProto2::_internal_set_default_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.default_string_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAllTypesProto2::_internal_mutable_default_string() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.default_string_.Mutable(::protobuf_test_messages::proto2::TestAllTypesProto2::Impl_::_i_give_permission_to_break_this_code_default_default_string_, GetArenaForAllocation());
}
inline std::string* TestAllTypesProto2::release_default_string() {
  // @@protoc_insertion_point(field_release:protobuf_test_messages.proto2.TestAllTypesProto2.default_string)
  if (!_internal_has_default_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.default_string_.Release();
  return p;
}
inline void TestAllTypesProto2::set_allocated_default_string(std::string* default_string) {
  if (default_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.default_string_.SetAllocated(default_string, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.default_string)
}

// optional bytes default_bytes = 255 [default = "joshua"];
inline bool TestAllTypesProto2::_internal_has_default_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_default_bytes() const {
  return _internal_has_default_bytes();
}
inline void TestAllTypesProto2::clear_default_bytes() {
  _impl_.default_bytes_.ClearToDefault(::protobuf_test_messages::proto2::TestAllTypesProto2::Impl_::_i_give_permission_to_break_this_code_default_default_bytes_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& TestAllTypesProto2::default_bytes() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.default_bytes)
  if (_impl_.default_bytes_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_default_bytes_.get();
  return _internal_default_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestAllTypesProto2::set_default_bytes(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.default_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.default_bytes)
}
inline std::string* TestAllTypesProto2::mutable_default_bytes() {
  std::string* _s = _internal_mutable_default_bytes();
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.TestAllTypesProto2.default_bytes)
  return _s;
}
inline const std::string& TestAllTypesProto2::_internal_default_bytes() const {
  return _impl_.default_bytes_.Get();
}
inline void TestAllTypesProto2::_internal_set_default_bytes(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.default_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TestAllTypesProto2::_internal_mutable_default_bytes() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.default_bytes_.Mutable(::protobuf_test_messages::proto2::TestAllTypesProto2::Impl_::_i_give_permission_to_break_this_code_default_default_bytes_, GetArenaForAllocation());
}
inline std::string* TestAllTypesProto2::release_default_bytes() {
  // @@protoc_insertion_point(field_release:protobuf_test_messages.proto2.TestAllTypesProto2.default_bytes)
  if (!_internal_has_default_bytes()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.default_bytes_.Release();
  return p;
}
inline void TestAllTypesProto2::set_allocated_default_bytes(std::string* default_bytes) {
  if (default_bytes != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.default_bytes_.SetAllocated(default_bytes, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.default_bytes)
}

// optional int32 fieldname1 = 401;
inline bool TestAllTypesProto2::_internal_has_fieldname1() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_fieldname1() const {
  return _internal_has_fieldname1();
}
inline void TestAllTypesProto2::clear_fieldname1() {
  _impl_.fieldname1_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline int32_t TestAllTypesProto2::_internal_fieldname1() const {
  return _impl_.fieldname1_;
}
inline int32_t TestAllTypesProto2::fieldname1() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.fieldname1)
  return _internal_fieldname1();
}
inline void TestAllTypesProto2::_internal_set_fieldname1(int32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.fieldname1_ = value;
}
inline void TestAllTypesProto2::set_fieldname1(int32_t value) {
  _internal_set_fieldname1(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.fieldname1)
}

// optional int32 field_name2 = 402;
inline bool TestAllTypesProto2::_internal_has_field_name2() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_field_name2() const {
  return _internal_has_field_name2();
}
inline void TestAllTypesProto2::clear_field_name2() {
  _impl_.field_name2_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline int32_t TestAllTypesProto2::_internal_field_name2() const {
  return _impl_.field_name2_;
}
inline int32_t TestAllTypesProto2::field_name2() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.field_name2)
  return _internal_field_name2();
}
inline void TestAllTypesProto2::_internal_set_field_name2(int32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.field_name2_ = value;
}
inline void TestAllTypesProto2::set_field_name2(int32_t value) {
  _internal_set_field_name2(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.field_name2)
}

// optional int32 _field_name3 = 403;
inline bool TestAllTypesProto2::_internal_has__field_name3() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has__field_name3() const {
  return _internal_has__field_name3();
}
inline void TestAllTypesProto2::clear__field_name3() {
  _impl_._field_name3_ = 0;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline int32_t TestAllTypesProto2::_internal__field_name3() const {
  return _impl_._field_name3_;
}
inline int32_t TestAllTypesProto2::_field_name3() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2._field_name3)
  return _internal__field_name3();
}
inline void TestAllTypesProto2::_internal_set__field_name3(int32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_._field_name3_ = value;
}
inline void TestAllTypesProto2::set__field_name3(int32_t value) {
  _internal_set__field_name3(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2._field_name3)
}

// optional int32 field__name4_ = 404;
inline bool TestAllTypesProto2::_internal_has_field__name4_() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_field__name4_() const {
  return _internal_has_field__name4_();
}
inline void TestAllTypesProto2::clear_field__name4_() {
  _impl_.field__name4__ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline int32_t TestAllTypesProto2::_internal_field__name4_() const {
  return _impl_.field__name4__;
}
inline int32_t TestAllTypesProto2::field__name4_() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.field__name4_)
  return _internal_field__name4_();
}
inline void TestAllTypesProto2::_internal_set_field__name4_(int32_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.field__name4__ = value;
}
inline void TestAllTypesProto2::set_field__name4_(int32_t value) {
  _internal_set_field__name4_(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.field__name4_)
}

// optional int32 field0name5 = 405;
inline bool TestAllTypesProto2::_internal_has_field0name5() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_field0name5() const {
  return _internal_has_field0name5();
}
inline void TestAllTypesProto2::clear_field0name5() {
  _impl_.field0name5_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline int32_t TestAllTypesProto2::_internal_field0name5() const {
  return _impl_.field0name5_;
}
inline int32_t TestAllTypesProto2::field0name5() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.field0name5)
  return _internal_field0name5();
}
inline void TestAllTypesProto2::_internal_set_field0name5(int32_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.field0name5_ = value;
}
inline void TestAllTypesProto2::set_field0name5(int32_t value) {
  _internal_set_field0name5(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.field0name5)
}

// optional int32 field_0_name6 = 406;
inline bool TestAllTypesProto2::_internal_has_field_0_name6() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_field_0_name6() const {
  return _internal_has_field_0_name6();
}
inline void TestAllTypesProto2::clear_field_0_name6() {
  _impl_.field_0_name6_ = 0;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline int32_t TestAllTypesProto2::_internal_field_0_name6() const {
  return _impl_.field_0_name6_;
}
inline int32_t TestAllTypesProto2::field_0_name6() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.field_0_name6)
  return _internal_field_0_name6();
}
inline void TestAllTypesProto2::_internal_set_field_0_name6(int32_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.field_0_name6_ = value;
}
inline void TestAllTypesProto2::set_field_0_name6(int32_t value) {
  _internal_set_field_0_name6(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.field_0_name6)
}

// optional int32 fieldName7 = 407;
inline bool TestAllTypesProto2::_internal_has_fieldname7() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_fieldname7() const {
  return _internal_has_fieldname7();
}
inline void TestAllTypesProto2::clear_fieldname7() {
  _impl_.fieldname7_ = 0;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline int32_t TestAllTypesProto2::_internal_fieldname7() const {
  return _impl_.fieldname7_;
}
inline int32_t TestAllTypesProto2::fieldname7() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.fieldName7)
  return _internal_fieldname7();
}
inline void TestAllTypesProto2::_internal_set_fieldname7(int32_t value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.fieldname7_ = value;
}
inline void TestAllTypesProto2::set_fieldname7(int32_t value) {
  _internal_set_fieldname7(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.fieldName7)
}

// optional int32 FieldName8 = 408;
inline bool TestAllTypesProto2::_internal_has_fieldname8() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_fieldname8() const {
  return _internal_has_fieldname8();
}
inline void TestAllTypesProto2::clear_fieldname8() {
  _impl_.fieldname8_ = 0;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline int32_t TestAllTypesProto2::_internal_fieldname8() const {
  return _impl_.fieldname8_;
}
inline int32_t TestAllTypesProto2::fieldname8() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.FieldName8)
  return _internal_fieldname8();
}
inline void TestAllTypesProto2::_internal_set_fieldname8(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.fieldname8_ = value;
}
inline void TestAllTypesProto2::set_fieldname8(int32_t value) {
  _internal_set_fieldname8(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.FieldName8)
}

// optional int32 field_Name9 = 409;
inline bool TestAllTypesProto2::_internal_has_field_name9() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_field_name9() const {
  return _internal_has_field_name9();
}
inline void TestAllTypesProto2::clear_field_name9() {
  _impl_.field_name9_ = 0;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline int32_t TestAllTypesProto2::_internal_field_name9() const {
  return _impl_.field_name9_;
}
inline int32_t TestAllTypesProto2::field_name9() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.field_Name9)
  return _internal_field_name9();
}
inline void TestAllTypesProto2::_internal_set_field_name9(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.field_name9_ = value;
}
inline void TestAllTypesProto2::set_field_name9(int32_t value) {
  _internal_set_field_name9(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.field_Name9)
}

// optional int32 Field_Name10 = 410;
inline bool TestAllTypesProto2::_internal_has_field_name10() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_field_name10() const {
  return _internal_has_field_name10();
}
inline void TestAllTypesProto2::clear_field_name10() {
  _impl_.field_name10_ = 0;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline int32_t TestAllTypesProto2::_internal_field_name10() const {
  return _impl_.field_name10_;
}
inline int32_t TestAllTypesProto2::field_name10() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.Field_Name10)
  return _internal_field_name10();
}
inline void TestAllTypesProto2::_internal_set_field_name10(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.field_name10_ = value;
}
inline void TestAllTypesProto2::set_field_name10(int32_t value) {
  _internal_set_field_name10(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.Field_Name10)
}

// optional int32 FIELD_NAME11 = 411;
inline bool TestAllTypesProto2::_internal_has_field_name11() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_field_name11() const {
  return _internal_has_field_name11();
}
inline void TestAllTypesProto2::clear_field_name11() {
  _impl_.field_name11_ = 0;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline int32_t TestAllTypesProto2::_internal_field_name11() const {
  return _impl_.field_name11_;
}
inline int32_t TestAllTypesProto2::field_name11() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.FIELD_NAME11)
  return _internal_field_name11();
}
inline void TestAllTypesProto2::_internal_set_field_name11(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.field_name11_ = value;
}
inline void TestAllTypesProto2::set_field_name11(int32_t value) {
  _internal_set_field_name11(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.FIELD_NAME11)
}

// optional int32 FIELD_name12 = 412;
inline bool TestAllTypesProto2::_internal_has_field_name12() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_field_name12() const {
  return _internal_has_field_name12();
}
inline void TestAllTypesProto2::clear_field_name12() {
  _impl_.field_name12_ = 0;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline int32_t TestAllTypesProto2::_internal_field_name12() const {
  return _impl_.field_name12_;
}
inline int32_t TestAllTypesProto2::field_name12() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.FIELD_name12)
  return _internal_field_name12();
}
inline void TestAllTypesProto2::_internal_set_field_name12(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.field_name12_ = value;
}
inline void TestAllTypesProto2::set_field_name12(int32_t value) {
  _internal_set_field_name12(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.FIELD_name12)
}

// optional int32 __field_name13 = 413;
inline bool TestAllTypesProto2::_internal_has___field_name13() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has___field_name13() const {
  return _internal_has___field_name13();
}
inline void TestAllTypesProto2::clear___field_name13() {
  _impl_.__field_name13_ = 0;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline int32_t TestAllTypesProto2::_internal___field_name13() const {
  return _impl_.__field_name13_;
}
inline int32_t TestAllTypesProto2::__field_name13() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.__field_name13)
  return _internal___field_name13();
}
inline void TestAllTypesProto2::_internal_set___field_name13(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.__field_name13_ = value;
}
inline void TestAllTypesProto2::set___field_name13(int32_t value) {
  _internal_set___field_name13(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.__field_name13)
}

// optional int32 __Field_name14 = 414;
inline bool TestAllTypesProto2::_internal_has___field_name14() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has___field_name14() const {
  return _internal_has___field_name14();
}
inline void TestAllTypesProto2::clear___field_name14() {
  _impl_.__field_name14_ = 0;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline int32_t TestAllTypesProto2::_internal___field_name14() const {
  return _impl_.__field_name14_;
}
inline int32_t TestAllTypesProto2::__field_name14() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.__Field_name14)
  return _internal___field_name14();
}
inline void TestAllTypesProto2::_internal_set___field_name14(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.__field_name14_ = value;
}
inline void TestAllTypesProto2::set___field_name14(int32_t value) {
  _internal_set___field_name14(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.__Field_name14)
}

// optional int32 field__name15 = 415;
inline bool TestAllTypesProto2::_internal_has_field__name15() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_field__name15() const {
  return _internal_has_field__name15();
}
inline void TestAllTypesProto2::clear_field__name15() {
  _impl_.field__name15_ = 0;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline int32_t TestAllTypesProto2::_internal_field__name15() const {
  return _impl_.field__name15_;
}
inline int32_t TestAllTypesProto2::field__name15() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.field__name15)
  return _internal_field__name15();
}
inline void TestAllTypesProto2::_internal_set_field__name15(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.field__name15_ = value;
}
inline void TestAllTypesProto2::set_field__name15(int32_t value) {
  _internal_set_field__name15(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.field__name15)
}

// optional int32 field__Name16 = 416;
inline bool TestAllTypesProto2::_internal_has_field__name16() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_field__name16() const {
  return _internal_has_field__name16();
}
inline void TestAllTypesProto2::clear_field__name16() {
  _impl_.field__name16_ = 0;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline int32_t TestAllTypesProto2::_internal_field__name16() const {
  return _impl_.field__name16_;
}
inline int32_t TestAllTypesProto2::field__name16() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.field__Name16)
  return _internal_field__name16();
}
inline void TestAllTypesProto2::_internal_set_field__name16(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.field__name16_ = value;
}
inline void TestAllTypesProto2::set_field__name16(int32_t value) {
  _internal_set_field__name16(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.field__Name16)
}

// optional int32 field_name17__ = 417;
inline bool TestAllTypesProto2::_internal_has_field_name17__() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_field_name17__() const {
  return _internal_has_field_name17__();
}
inline void TestAllTypesProto2::clear_field_name17__() {
  _impl_.field_name17___ = 0;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline int32_t TestAllTypesProto2::_internal_field_name17__() const {
  return _impl_.field_name17___;
}
inline int32_t TestAllTypesProto2::field_name17__() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.field_name17__)
  return _internal_field_name17__();
}
inline void TestAllTypesProto2::_internal_set_field_name17__(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.field_name17___ = value;
}
inline void TestAllTypesProto2::set_field_name17__(int32_t value) {
  _internal_set_field_name17__(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.field_name17__)
}

// optional int32 Field_name18__ = 418;
inline bool TestAllTypesProto2::_internal_has_field_name18__() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool TestAllTypesProto2::has_field_name18__() const {
  return _internal_has_field_name18__();
}
inline void TestAllTypesProto2::clear_field_name18__() {
  _impl_.field_name18___ = 0;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline int32_t TestAllTypesProto2::_internal_field_name18__() const {
  return _impl_.field_name18___;
}
inline int32_t TestAllTypesProto2::field_name18__() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.TestAllTypesProto2.Field_name18__)
  return _internal_field_name18__();
}
inline void TestAllTypesProto2::_internal_set_field_name18__(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.field_name18___ = value;
}
inline void TestAllTypesProto2::set_field_name18__(int32_t value) {
  _internal_set_field_name18__(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.TestAllTypesProto2.Field_name18__)
}

inline bool TestAllTypesProto2::has_oneof_field() const {
  return oneof_field_case() != ONEOF_FIELD_NOT_SET;
}
inline void TestAllTypesProto2::clear_has_oneof_field() {
  _impl_._oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}
inline TestAllTypesProto2::OneofFieldCase TestAllTypesProto2::oneof_field_case() const {
  return TestAllTypesProto2::OneofFieldCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ForeignMessageProto2

// optional int32 c = 1;
inline bool ForeignMessageProto2::_internal_has_c() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ForeignMessageProto2::has_c() const {
  return _internal_has_c();
}
inline void ForeignMessageProto2::clear_c() {
  _impl_.c_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t ForeignMessageProto2::_internal_c() const {
  return _impl_.c_;
}
inline int32_t ForeignMessageProto2::c() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.ForeignMessageProto2.c)
  return _internal_c();
}
inline void ForeignMessageProto2::_internal_set_c(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.c_ = value;
}
inline void ForeignMessageProto2::set_c(int32_t value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.ForeignMessageProto2.c)
}

// -------------------------------------------------------------------

// UnknownToTestAllTypes_OptionalGroup

// optional int32 a = 1;
inline bool UnknownToTestAllTypes_OptionalGroup::_internal_has_a() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UnknownToTestAllTypes_OptionalGroup::has_a() const {
  return _internal_has_a();
}
inline void UnknownToTestAllTypes_OptionalGroup::clear_a() {
  _impl_.a_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t UnknownToTestAllTypes_OptionalGroup::_internal_a() const {
  return _impl_.a_;
}
inline int32_t UnknownToTestAllTypes_OptionalGroup::a() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup.a)
  return _internal_a();
}
inline void UnknownToTestAllTypes_OptionalGroup::_internal_set_a(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.a_ = value;
}
inline void UnknownToTestAllTypes_OptionalGroup::set_a(int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup.a)
}

// -------------------------------------------------------------------

// UnknownToTestAllTypes

// optional int32 optional_int32 = 1001;
inline bool UnknownToTestAllTypes::_internal_has_optional_int32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UnknownToTestAllTypes::has_optional_int32() const {
  return _internal_has_optional_int32();
}
inline void UnknownToTestAllTypes::clear_optional_int32() {
  _impl_.optional_int32_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t UnknownToTestAllTypes::_internal_optional_int32() const {
  return _impl_.optional_int32_;
}
inline int32_t UnknownToTestAllTypes::optional_int32() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.UnknownToTestAllTypes.optional_int32)
  return _internal_optional_int32();
}
inline void UnknownToTestAllTypes::_internal_set_optional_int32(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.optional_int32_ = value;
}
inline void UnknownToTestAllTypes::set_optional_int32(int32_t value) {
  _internal_set_optional_int32(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.UnknownToTestAllTypes.optional_int32)
}

// optional string optional_string = 1002;
inline bool UnknownToTestAllTypes::_internal_has_optional_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UnknownToTestAllTypes::has_optional_string() const {
  return _internal_has_optional_string();
}
inline void UnknownToTestAllTypes::clear_optional_string() {
  _impl_.optional_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UnknownToTestAllTypes::optional_string() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.UnknownToTestAllTypes.optional_string)
  return _internal_optional_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnknownToTestAllTypes::set_optional_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.optional_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.UnknownToTestAllTypes.optional_string)
}
inline std::string* UnknownToTestAllTypes::mutable_optional_string() {
  std::string* _s = _internal_mutable_optional_string();
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.UnknownToTestAllTypes.optional_string)
  return _s;
}
inline const std::string& UnknownToTestAllTypes::_internal_optional_string() const {
  return _impl_.optional_string_.Get();
}
inline void UnknownToTestAllTypes::_internal_set_optional_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.optional_string_.Set(value, GetArenaForAllocation());
}
inline std::string* UnknownToTestAllTypes::_internal_mutable_optional_string() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.optional_string_.Mutable(GetArenaForAllocation());
}
inline std::string* UnknownToTestAllTypes::release_optional_string() {
  // @@protoc_insertion_point(field_release:protobuf_test_messages.proto2.UnknownToTestAllTypes.optional_string)
  if (!_internal_has_optional_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.optional_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optional_string_.IsDefault()) {
    _impl_.optional_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UnknownToTestAllTypes::set_allocated_optional_string(std::string* optional_string) {
  if (optional_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.optional_string_.SetAllocated(optional_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.optional_string_.IsDefault()) {
    _impl_.optional_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.UnknownToTestAllTypes.optional_string)
}

// optional .protobuf_test_messages.proto2.ForeignMessageProto2 nested_message = 1003;
inline bool UnknownToTestAllTypes::_internal_has_nested_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nested_message_ != nullptr);
  return value;
}
inline bool UnknownToTestAllTypes::has_nested_message() const {
  return _internal_has_nested_message();
}
inline void UnknownToTestAllTypes::clear_nested_message() {
  if (_impl_.nested_message_ != nullptr) _impl_.nested_message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::protobuf_test_messages::proto2::ForeignMessageProto2& UnknownToTestAllTypes::_internal_nested_message() const {
  const ::protobuf_test_messages::proto2::ForeignMessageProto2* p = _impl_.nested_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_test_messages::proto2::ForeignMessageProto2&>(
      ::protobuf_test_messages::proto2::_ForeignMessageProto2_default_instance_);
}
inline const ::protobuf_test_messages::proto2::ForeignMessageProto2& UnknownToTestAllTypes::nested_message() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.UnknownToTestAllTypes.nested_message)
  return _internal_nested_message();
}
inline void UnknownToTestAllTypes::unsafe_arena_set_allocated_nested_message(
    ::protobuf_test_messages::proto2::ForeignMessageProto2* nested_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nested_message_);
  }
  _impl_.nested_message_ = nested_message;
  if (nested_message) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_test_messages.proto2.UnknownToTestAllTypes.nested_message)
}
inline ::protobuf_test_messages::proto2::ForeignMessageProto2* UnknownToTestAllTypes::release_nested_message() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::protobuf_test_messages::proto2::ForeignMessageProto2* temp = _impl_.nested_message_;
  _impl_.nested_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_test_messages::proto2::ForeignMessageProto2* UnknownToTestAllTypes::unsafe_arena_release_nested_message() {
  // @@protoc_insertion_point(field_release:protobuf_test_messages.proto2.UnknownToTestAllTypes.nested_message)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::protobuf_test_messages::proto2::ForeignMessageProto2* temp = _impl_.nested_message_;
  _impl_.nested_message_ = nullptr;
  return temp;
}
inline ::protobuf_test_messages::proto2::ForeignMessageProto2* UnknownToTestAllTypes::_internal_mutable_nested_message() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.nested_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_test_messages::proto2::ForeignMessageProto2>(GetArenaForAllocation());
    _impl_.nested_message_ = p;
  }
  return _impl_.nested_message_;
}
inline ::protobuf_test_messages::proto2::ForeignMessageProto2* UnknownToTestAllTypes::mutable_nested_message() {
  ::protobuf_test_messages::proto2::ForeignMessageProto2* _msg = _internal_mutable_nested_message();
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.UnknownToTestAllTypes.nested_message)
  return _msg;
}
inline void UnknownToTestAllTypes::set_allocated_nested_message(::protobuf_test_messages::proto2::ForeignMessageProto2* nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nested_message_;
  }
  if (nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nested_message);
    if (message_arena != submessage_arena) {
      nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nested_message, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.nested_message_ = nested_message;
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.UnknownToTestAllTypes.nested_message)
}

// optional group OptionalGroup = 1004 { ... };
inline bool UnknownToTestAllTypes::_internal_has_optionalgroup() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.optionalgroup_ != nullptr);
  return value;
}
inline bool UnknownToTestAllTypes::has_optionalgroup() const {
  return _internal_has_optionalgroup();
}
inline void UnknownToTestAllTypes::clear_optionalgroup() {
  if (_impl_.optionalgroup_ != nullptr) _impl_.optionalgroup_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup& UnknownToTestAllTypes::_internal_optionalgroup() const {
  const ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup* p = _impl_.optionalgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup&>(
      ::protobuf_test_messages::proto2::_UnknownToTestAllTypes_OptionalGroup_default_instance_);
}
inline const ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup& UnknownToTestAllTypes::optionalgroup() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.UnknownToTestAllTypes.optionalgroup)
  return _internal_optionalgroup();
}
inline void UnknownToTestAllTypes::unsafe_arena_set_allocated_optionalgroup(
    ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup* optionalgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionalgroup_);
  }
  _impl_.optionalgroup_ = optionalgroup;
  if (optionalgroup) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protobuf_test_messages.proto2.UnknownToTestAllTypes.optionalgroup)
}
inline ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup* UnknownToTestAllTypes::release_optionalgroup() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup* temp = _impl_.optionalgroup_;
  _impl_.optionalgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup* UnknownToTestAllTypes::unsafe_arena_release_optionalgroup() {
  // @@protoc_insertion_point(field_release:protobuf_test_messages.proto2.UnknownToTestAllTypes.optionalgroup)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup* temp = _impl_.optionalgroup_;
  _impl_.optionalgroup_ = nullptr;
  return temp;
}
inline ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup* UnknownToTestAllTypes::_internal_mutable_optionalgroup() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.optionalgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup>(GetArenaForAllocation());
    _impl_.optionalgroup_ = p;
  }
  return _impl_.optionalgroup_;
}
inline ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup* UnknownToTestAllTypes::mutable_optionalgroup() {
  ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup* _msg = _internal_mutable_optionalgroup();
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.UnknownToTestAllTypes.optionalgroup)
  return _msg;
}
inline void UnknownToTestAllTypes::set_allocated_optionalgroup(::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup* optionalgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.optionalgroup_;
  }
  if (optionalgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(optionalgroup);
    if (message_arena != submessage_arena) {
      optionalgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionalgroup, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.optionalgroup_ = optionalgroup;
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.UnknownToTestAllTypes.optionalgroup)
}

// optional bool optional_bool = 1006;
inline bool UnknownToTestAllTypes::_internal_has_optional_bool() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UnknownToTestAllTypes::has_optional_bool() const {
  return _internal_has_optional_bool();
}
inline void UnknownToTestAllTypes::clear_optional_bool() {
  _impl_.optional_bool_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool UnknownToTestAllTypes::_internal_optional_bool() const {
  return _impl_.optional_bool_;
}
inline bool UnknownToTestAllTypes::optional_bool() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.UnknownToTestAllTypes.optional_bool)
  return _internal_optional_bool();
}
inline void UnknownToTestAllTypes::_internal_set_optional_bool(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.optional_bool_ = value;
}
inline void UnknownToTestAllTypes::set_optional_bool(bool value) {
  _internal_set_optional_bool(value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.UnknownToTestAllTypes.optional_bool)
}

// repeated int32 repeated_int32 = 1011;
inline int UnknownToTestAllTypes::_internal_repeated_int32_size() const {
  return _impl_.repeated_int32_.size();
}
inline int UnknownToTestAllTypes::repeated_int32_size() const {
  return _internal_repeated_int32_size();
}
inline void UnknownToTestAllTypes::clear_repeated_int32() {
  _impl_.repeated_int32_.Clear();
}
inline int32_t UnknownToTestAllTypes::_internal_repeated_int32(int index) const {
  return _impl_.repeated_int32_.Get(index);
}
inline int32_t UnknownToTestAllTypes::repeated_int32(int index) const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.UnknownToTestAllTypes.repeated_int32)
  return _internal_repeated_int32(index);
}
inline void UnknownToTestAllTypes::set_repeated_int32(int index, int32_t value) {
  _impl_.repeated_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.UnknownToTestAllTypes.repeated_int32)
}
inline void UnknownToTestAllTypes::_internal_add_repeated_int32(int32_t value) {
  _impl_.repeated_int32_.Add(value);
}
inline void UnknownToTestAllTypes::add_repeated_int32(int32_t value) {
  _internal_add_repeated_int32(value);
  // @@protoc_insertion_point(field_add:protobuf_test_messages.proto2.UnknownToTestAllTypes.repeated_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UnknownToTestAllTypes::_internal_repeated_int32() const {
  return _impl_.repeated_int32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UnknownToTestAllTypes::repeated_int32() const {
  // @@protoc_insertion_point(field_list:protobuf_test_messages.proto2.UnknownToTestAllTypes.repeated_int32)
  return _internal_repeated_int32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UnknownToTestAllTypes::_internal_mutable_repeated_int32() {
  return &_impl_.repeated_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UnknownToTestAllTypes::mutable_repeated_int32() {
  // @@protoc_insertion_point(field_mutable_list:protobuf_test_messages.proto2.UnknownToTestAllTypes.repeated_int32)
  return _internal_mutable_repeated_int32();
}

// -------------------------------------------------------------------

// NullHypothesisProto2

// -------------------------------------------------------------------

// EnumOnlyProto2

// -------------------------------------------------------------------

// OneStringProto2

// optional string data = 1;
inline bool OneStringProto2::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OneStringProto2::has_data() const {
  return _internal_has_data();
}
inline void OneStringProto2::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OneStringProto2::data() const {
  // @@protoc_insertion_point(field_get:protobuf_test_messages.proto2.OneStringProto2.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OneStringProto2::set_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protobuf_test_messages.proto2.OneStringProto2.data)
}
inline std::string* OneStringProto2::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:protobuf_test_messages.proto2.OneStringProto2.data)
  return _s;
}
inline const std::string& OneStringProto2::_internal_data() const {
  return _impl_.data_.Get();
}
inline void OneStringProto2::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* OneStringProto2::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* OneStringProto2::release_data() {
  // @@protoc_insertion_point(field_release:protobuf_test_messages.proto2.OneStringProto2.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OneStringProto2::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.OneStringProto2.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto2
}  // namespace protobuf_test_messages

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum>() {
  return ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_descriptor();
}
template <> struct is_proto_enum< ::protobuf_test_messages::proto2::EnumOnlyProto2_Bool> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf_test_messages::proto2::EnumOnlyProto2_Bool>() {
  return ::protobuf_test_messages::proto2::EnumOnlyProto2_Bool_descriptor();
}
template <> struct is_proto_enum< ::protobuf_test_messages::proto2::ForeignEnumProto2> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobuf_test_messages::proto2::ForeignEnumProto2>() {
  return ::protobuf_test_messages::proto2::ForeignEnumProto2_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto
