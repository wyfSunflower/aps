// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/test_messages_proto2.proto

#include "google/protobuf/test_messages_proto2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protobuf_test_messages {
namespace proto2 {
PROTOBUF_CONSTEXPR TestAllTypesProto2_NestedMessage::TestAllTypesProto2_NestedMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.corecursive_)*/nullptr
  , /*decltype(_impl_.a_)*/0} {}
struct TestAllTypesProto2_NestedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_NestedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_NestedMessageDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_NestedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_NestedMessageDefaultTypeInternal _TestAllTypesProto2_NestedMessage_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MapInt32Int32Entry_DoNotUse::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestAllTypesProto2_MapInt32Int32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MapInt32Int32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MapInt32Int32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MapInt32Int32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MapInt32Int32Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapInt32Int32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MapInt64Int64Entry_DoNotUse::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestAllTypesProto2_MapInt64Int64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MapInt64Int64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MapInt64Int64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MapInt64Int64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MapInt64Int64Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapInt64Int64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestAllTypesProto2_MapUint32Uint32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MapUint32Uint32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MapUint32Uint32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MapUint32Uint32Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestAllTypesProto2_MapUint64Uint64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MapUint64Uint64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MapUint64Uint64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MapUint64Uint64Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestAllTypesProto2_MapSint32Sint32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MapSint32Sint32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MapSint32Sint32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MapSint32Sint32Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestAllTypesProto2_MapSint64Sint64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MapSint64Sint64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MapSint64Sint64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MapSint64Sint64Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUseDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MapInt32FloatEntry_DoNotUse::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestAllTypesProto2_MapInt32FloatEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MapInt32FloatEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MapInt32FloatEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MapInt32FloatEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MapInt32FloatEntry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapInt32FloatEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestAllTypesProto2_MapInt32DoubleEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MapInt32DoubleEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MapInt32DoubleEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MapInt32DoubleEntry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MapBoolBoolEntry_DoNotUse::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestAllTypesProto2_MapBoolBoolEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MapBoolBoolEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MapBoolBoolEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MapBoolBoolEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MapBoolBoolEntry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapBoolBoolEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MapStringStringEntry_DoNotUse::TestAllTypesProto2_MapStringStringEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestAllTypesProto2_MapStringStringEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MapStringStringEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MapStringStringEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MapStringStringEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MapStringStringEntry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapStringStringEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MapStringBytesEntry_DoNotUse::TestAllTypesProto2_MapStringBytesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestAllTypesProto2_MapStringBytesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MapStringBytesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MapStringBytesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MapStringBytesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MapStringBytesEntry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapStringBytesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUseDefaultTypeInternal _TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_Data::TestAllTypesProto2_Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_int32_)*/0
  , /*decltype(_impl_.group_uint32_)*/0u} {}
struct TestAllTypesProto2_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_DataDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_DataDefaultTypeInternal _TestAllTypesProto2_Data_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MessageSetCorrect::TestAllTypesProto2_MessageSetCorrect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestAllTypesProto2_MessageSetCorrectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MessageSetCorrectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MessageSetCorrectDefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MessageSetCorrect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MessageSetCorrectDefaultTypeInternal _TestAllTypesProto2_MessageSetCorrect_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MessageSetCorrectExtension1::TestAllTypesProto2_MessageSetCorrectExtension1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TestAllTypesProto2_MessageSetCorrectExtension1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MessageSetCorrectExtension1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MessageSetCorrectExtension1DefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MessageSetCorrectExtension1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MessageSetCorrectExtension1DefaultTypeInternal _TestAllTypesProto2_MessageSetCorrectExtension1_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2_MessageSetCorrectExtension2::TestAllTypesProto2_MessageSetCorrectExtension2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.i_)*/0} {}
struct TestAllTypesProto2_MessageSetCorrectExtension2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2_MessageSetCorrectExtension2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2_MessageSetCorrectExtension2DefaultTypeInternal() {}
  union {
    TestAllTypesProto2_MessageSetCorrectExtension2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2_MessageSetCorrectExtension2DefaultTypeInternal _TestAllTypesProto2_MessageSetCorrectExtension2_default_instance_;
PROTOBUF_CONSTEXPR TestAllTypesProto2::TestAllTypesProto2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.repeated_int32_)*/{}
  , /*decltype(_impl_.repeated_int64_)*/{}
  , /*decltype(_impl_.repeated_uint32_)*/{}
  , /*decltype(_impl_.repeated_uint64_)*/{}
  , /*decltype(_impl_.repeated_sint32_)*/{}
  , /*decltype(_impl_.repeated_sint64_)*/{}
  , /*decltype(_impl_.repeated_fixed32_)*/{}
  , /*decltype(_impl_.repeated_fixed64_)*/{}
  , /*decltype(_impl_.repeated_sfixed32_)*/{}
  , /*decltype(_impl_.repeated_sfixed64_)*/{}
  , /*decltype(_impl_.repeated_float_)*/{}
  , /*decltype(_impl_.repeated_double_)*/{}
  , /*decltype(_impl_.repeated_bool_)*/{}
  , /*decltype(_impl_.repeated_string_)*/{}
  , /*decltype(_impl_.repeated_bytes_)*/{}
  , /*decltype(_impl_.repeated_nested_message_)*/{}
  , /*decltype(_impl_.repeated_foreign_message_)*/{}
  , /*decltype(_impl_.repeated_nested_enum_)*/{}
  , /*decltype(_impl_.repeated_foreign_enum_)*/{}
  , /*decltype(_impl_.repeated_string_piece_)*/{}
  , /*decltype(_impl_.repeated_cord_)*/{}
  , /*decltype(_impl_.map_int32_int32_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.map_int64_int64_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.map_uint32_uint32_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.map_uint64_uint64_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.map_sint32_sint32_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.map_sint64_sint64_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.map_fixed32_fixed32_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.map_fixed64_fixed64_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.map_sfixed32_sfixed32_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.map_sfixed64_sfixed64_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.map_int32_float_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.map_int32_double_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.map_bool_bool_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.map_string_string_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.map_string_bytes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.map_string_nested_message_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.map_string_foreign_message_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.map_string_nested_enum_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.map_string_foreign_enum_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.packed_int32_)*/{}
  , /*decltype(_impl_._packed_int32_cached_byte_size_)*/{0}
  , /*decltype(_impl_.packed_int64_)*/{}
  , /*decltype(_impl_._packed_int64_cached_byte_size_)*/{0}
  , /*decltype(_impl_.packed_uint32_)*/{}
  , /*decltype(_impl_._packed_uint32_cached_byte_size_)*/{0}
  , /*decltype(_impl_.packed_uint64_)*/{}
  , /*decltype(_impl_._packed_uint64_cached_byte_size_)*/{0}
  , /*decltype(_impl_.packed_sint32_)*/{}
  , /*decltype(_impl_._packed_sint32_cached_byte_size_)*/{0}
  , /*decltype(_impl_.packed_sint64_)*/{}
  , /*decltype(_impl_._packed_sint64_cached_byte_size_)*/{0}
  , /*decltype(_impl_.packed_fixed32_)*/{}
  , /*decltype(_impl_.packed_fixed64_)*/{}
  , /*decltype(_impl_.packed_sfixed32_)*/{}
  , /*decltype(_impl_.packed_sfixed64_)*/{}
  , /*decltype(_impl_.packed_float_)*/{}
  , /*decltype(_impl_.packed_double_)*/{}
  , /*decltype(_impl_.packed_bool_)*/{}
  , /*decltype(_impl_.packed_nested_enum_)*/{}
  , /*decltype(_impl_._packed_nested_enum_cached_byte_size_)*/{0}
  , /*decltype(_impl_.unpacked_int32_)*/{}
  , /*decltype(_impl_.unpacked_int64_)*/{}
  , /*decltype(_impl_.unpacked_uint32_)*/{}
  , /*decltype(_impl_.unpacked_uint64_)*/{}
  , /*decltype(_impl_.unpacked_sint32_)*/{}
  , /*decltype(_impl_.unpacked_sint64_)*/{}
  , /*decltype(_impl_.unpacked_fixed32_)*/{}
  , /*decltype(_impl_.unpacked_fixed64_)*/{}
  , /*decltype(_impl_.unpacked_sfixed32_)*/{}
  , /*decltype(_impl_.unpacked_sfixed64_)*/{}
  , /*decltype(_impl_.unpacked_float_)*/{}
  , /*decltype(_impl_.unpacked_double_)*/{}
  , /*decltype(_impl_.unpacked_bool_)*/{}
  , /*decltype(_impl_.unpacked_nested_enum_)*/{}
  , /*decltype(_impl_.optional_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optional_bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optional_string_piece_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optional_cord_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.default_string_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.default_bytes_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optional_nested_message_)*/nullptr
  , /*decltype(_impl_.optional_foreign_message_)*/nullptr
  , /*decltype(_impl_.recursive_message_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.optional_int64_)*/int64_t{0}
  , /*decltype(_impl_.optional_int32_)*/0
  , /*decltype(_impl_.optional_uint32_)*/0u
  , /*decltype(_impl_.optional_uint64_)*/uint64_t{0u}
  , /*decltype(_impl_.optional_sint64_)*/int64_t{0}
  , /*decltype(_impl_.optional_sint32_)*/0
  , /*decltype(_impl_.optional_fixed32_)*/0u
  , /*decltype(_impl_.optional_fixed64_)*/uint64_t{0u}
  , /*decltype(_impl_.optional_sfixed64_)*/int64_t{0}
  , /*decltype(_impl_.optional_sfixed32_)*/0
  , /*decltype(_impl_.optional_float_)*/0
  , /*decltype(_impl_.optional_double_)*/0
  , /*decltype(_impl_.optional_bool_)*/false
  , /*decltype(_impl_.optional_nested_enum_)*/0
  , /*decltype(_impl_.optional_foreign_enum_)*/0
  , /*decltype(_impl_.fieldname1_)*/0
  , /*decltype(_impl_.field_name2_)*/0
  , /*decltype(_impl_._field_name3_)*/0
  , /*decltype(_impl_.field__name4__)*/0
  , /*decltype(_impl_.field0name5_)*/0
  , /*decltype(_impl_.field_0_name6_)*/0
  , /*decltype(_impl_.fieldname7_)*/0
  , /*decltype(_impl_.fieldname8_)*/0
  , /*decltype(_impl_.field_name9_)*/0
  , /*decltype(_impl_.field_name10_)*/0
  , /*decltype(_impl_.field_name11_)*/0
  , /*decltype(_impl_.field_name12_)*/0
  , /*decltype(_impl_.__field_name13_)*/0
  , /*decltype(_impl_.__field_name14_)*/0
  , /*decltype(_impl_.field__name15_)*/0
  , /*decltype(_impl_.field__name16_)*/0
  , /*decltype(_impl_.field_name17___)*/0
  , /*decltype(_impl_.field_name18___)*/0
  , /*decltype(_impl_.default_bool_)*/true
  , /*decltype(_impl_.default_int64_)*/int64_t{-9123456789123456789}
  , /*decltype(_impl_.default_int32_)*/-123456789
  , /*decltype(_impl_.default_uint32_)*/2123456789u
  , /*decltype(_impl_.default_uint64_)*/uint64_t{10123456789123456789u}
  , /*decltype(_impl_.default_sint64_)*/int64_t{-9123456789123456789}
  , /*decltype(_impl_.default_sint32_)*/-123456789
  , /*decltype(_impl_.default_fixed32_)*/2123456789u
  , /*decltype(_impl_.default_fixed64_)*/uint64_t{10123456789123456789u}
  , /*decltype(_impl_.default_sfixed64_)*/int64_t{-9123456789123456789}
  , /*decltype(_impl_.default_sfixed32_)*/-123456789
  , /*decltype(_impl_.default_float_)*/9e+009f
  , /*decltype(_impl_.default_double_)*/7e+022
  , /*decltype(_impl_.oneof_field_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TestAllTypesProto2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestAllTypesProto2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestAllTypesProto2DefaultTypeInternal() {}
  union {
    TestAllTypesProto2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestAllTypesProto2DefaultTypeInternal _TestAllTypesProto2_default_instance_;
PROTOBUF_CONSTEXPR ForeignMessageProto2::ForeignMessageProto2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.c_)*/0} {}
struct ForeignMessageProto2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForeignMessageProto2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForeignMessageProto2DefaultTypeInternal() {}
  union {
    ForeignMessageProto2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForeignMessageProto2DefaultTypeInternal _ForeignMessageProto2_default_instance_;
PROTOBUF_CONSTEXPR UnknownToTestAllTypes_OptionalGroup::UnknownToTestAllTypes_OptionalGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.a_)*/0} {}
struct UnknownToTestAllTypes_OptionalGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnknownToTestAllTypes_OptionalGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnknownToTestAllTypes_OptionalGroupDefaultTypeInternal() {}
  union {
    UnknownToTestAllTypes_OptionalGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnknownToTestAllTypes_OptionalGroupDefaultTypeInternal _UnknownToTestAllTypes_OptionalGroup_default_instance_;
PROTOBUF_CONSTEXPR UnknownToTestAllTypes::UnknownToTestAllTypes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.repeated_int32_)*/{}
  , /*decltype(_impl_.optional_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nested_message_)*/nullptr
  , /*decltype(_impl_.optionalgroup_)*/nullptr
  , /*decltype(_impl_.optional_int32_)*/0
  , /*decltype(_impl_.optional_bool_)*/false} {}
struct UnknownToTestAllTypesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnknownToTestAllTypesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnknownToTestAllTypesDefaultTypeInternal() {}
  union {
    UnknownToTestAllTypes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnknownToTestAllTypesDefaultTypeInternal _UnknownToTestAllTypes_default_instance_;
PROTOBUF_CONSTEXPR NullHypothesisProto2::NullHypothesisProto2(
    ::_pbi::ConstantInitialized) {}
struct NullHypothesisProto2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR NullHypothesisProto2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NullHypothesisProto2DefaultTypeInternal() {}
  union {
    NullHypothesisProto2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NullHypothesisProto2DefaultTypeInternal _NullHypothesisProto2_default_instance_;
PROTOBUF_CONSTEXPR EnumOnlyProto2::EnumOnlyProto2(
    ::_pbi::ConstantInitialized) {}
struct EnumOnlyProto2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnumOnlyProto2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnumOnlyProto2DefaultTypeInternal() {}
  union {
    EnumOnlyProto2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnumOnlyProto2DefaultTypeInternal _EnumOnlyProto2_default_instance_;
PROTOBUF_CONSTEXPR OneStringProto2::OneStringProto2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct OneStringProto2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OneStringProto2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OneStringProto2DefaultTypeInternal() {}
  union {
    OneStringProto2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OneStringProto2DefaultTypeInternal _OneStringProto2_default_instance_;
}  // namespace proto2
}  // namespace protobuf_test_messages
static ::_pb::Metadata file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[31];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto = nullptr;

const uint32_t TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage, _impl_.a_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage, _impl_.corecursive_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_Data, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_Data, _impl_.group_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_Data, _impl_.group_uint32_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect, _impl_._extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1, _impl_.str_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2, _impl_.i_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_._extensions_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_nested_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_foreign_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_foreign_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_string_piece_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.optional_cord_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.recursive_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_nested_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_foreign_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_foreign_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_string_piece_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.repeated_cord_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.packed_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.packed_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.packed_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.packed_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.packed_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.packed_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.packed_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.packed_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.packed_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.packed_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.packed_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.packed_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.packed_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.packed_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.unpacked_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.unpacked_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.unpacked_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.unpacked_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.unpacked_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.unpacked_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.unpacked_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.unpacked_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.unpacked_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.unpacked_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.unpacked_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.unpacked_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.unpacked_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.unpacked_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.map_int32_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.map_int64_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.map_uint32_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.map_uint64_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.map_sint32_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.map_sint64_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.map_fixed32_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.map_fixed64_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.map_sfixed32_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.map_sfixed64_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.map_int32_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.map_int32_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.map_bool_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.map_string_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.map_string_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.map_string_nested_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.map_string_foreign_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.map_string_nested_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.map_string_foreign_enum_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.default_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.default_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.default_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.default_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.default_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.default_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.default_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.default_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.default_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.default_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.default_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.default_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.default_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.default_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.default_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.fieldname1_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.field_name2_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_._field_name3_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.field__name4__),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.field0name5_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.field_0_name6_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.fieldname7_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.fieldname8_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.field_name9_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.field_name10_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.field_name11_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.field_name12_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.__field_name13_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.__field_name14_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.field__name15_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.field__name16_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.field_name17___),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.field_name18___),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::TestAllTypesProto2, _impl_.oneof_field_),
  11,
  10,
  12,
  13,
  15,
  14,
  16,
  17,
  19,
  18,
  20,
  21,
  22,
  0,
  1,
  6,
  7,
  23,
  24,
  2,
  3,
  8,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  9,
  45,
  44,
  46,
  47,
  49,
  48,
  50,
  51,
  53,
  52,
  54,
  55,
  43,
  4,
  5,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::ForeignMessageProto2, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::ForeignMessageProto2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::ForeignMessageProto2, _impl_.c_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup, _impl_.a_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes, _impl_.optional_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes, _impl_.optional_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes, _impl_.nested_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes, _impl_.optionalgroup_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes, _impl_.optional_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::UnknownToTestAllTypes, _impl_.repeated_int32_),
  3,
  0,
  1,
  2,
  4,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::NullHypothesisProto2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::EnumOnlyProto2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::OneStringProto2, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::OneStringProto2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuf_test_messages::proto2::OneStringProto2, _impl_.data_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage)},
  { 10, 18, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse)},
  { 20, 28, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse)},
  { 30, 38, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse)},
  { 40, 48, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse)},
  { 50, 58, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse)},
  { 60, 68, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse)},
  { 70, 78, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse)},
  { 80, 88, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse)},
  { 90, 98, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse)},
  { 100, 108, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse)},
  { 110, 118, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse)},
  { 120, 128, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse)},
  { 130, 138, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse)},
  { 140, 148, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse)},
  { 150, 158, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse)},
  { 160, 168, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse)},
  { 170, 178, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse)},
  { 180, 188, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse)},
  { 190, 198, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse)},
  { 200, 208, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_Data)},
  { 210, -1, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect)},
  { 216, 223, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1)},
  { 224, 231, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2)},
  { 232, 372, -1, sizeof(::protobuf_test_messages::proto2::TestAllTypesProto2)},
  { 505, 512, -1, sizeof(::protobuf_test_messages::proto2::ForeignMessageProto2)},
  { 513, 520, -1, sizeof(::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup)},
  { 521, 533, -1, sizeof(::protobuf_test_messages::proto2::UnknownToTestAllTypes)},
  { 539, -1, -1, sizeof(::protobuf_test_messages::proto2::NullHypothesisProto2)},
  { 545, -1, -1, sizeof(::protobuf_test_messages::proto2::EnumOnlyProto2)},
  { 551, 558, -1, sizeof(::protobuf_test_messages::proto2::OneStringProto2)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_NestedMessage_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapInt32Int32Entry_DoNotUse_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapInt64Int64Entry_DoNotUse_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapInt32FloatEntry_DoNotUse_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapBoolBoolEntry_DoNotUse_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapStringStringEntry_DoNotUse_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapStringBytesEntry_DoNotUse_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_Data_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MessageSetCorrect_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MessageSetCorrectExtension1_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_MessageSetCorrectExtension2_default_instance_._instance,
  &::protobuf_test_messages::proto2::_TestAllTypesProto2_default_instance_._instance,
  &::protobuf_test_messages::proto2::_ForeignMessageProto2_default_instance_._instance,
  &::protobuf_test_messages::proto2::_UnknownToTestAllTypes_OptionalGroup_default_instance_._instance,
  &::protobuf_test_messages::proto2::_UnknownToTestAllTypes_default_instance_._instance,
  &::protobuf_test_messages::proto2::_NullHypothesisProto2_default_instance_._instance,
  &::protobuf_test_messages::proto2::_EnumOnlyProto2_default_instance_._instance,
  &::protobuf_test_messages::proto2::_OneStringProto2_default_instance_._instance,
};

const char descriptor_table_protodef_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*google/protobuf/test_messages_proto2.p"
  "roto\022\035protobuf_test_messages.proto2\"\306>\n\022"
  "TestAllTypesProto2\022\026\n\016optional_int32\030\001 \001"
  "(\005\022\026\n\016optional_int64\030\002 \001(\003\022\027\n\017optional_u"
  "int32\030\003 \001(\r\022\027\n\017optional_uint64\030\004 \001(\004\022\027\n\017"
  "optional_sint32\030\005 \001(\021\022\027\n\017optional_sint64"
  "\030\006 \001(\022\022\030\n\020optional_fixed32\030\007 \001(\007\022\030\n\020opti"
  "onal_fixed64\030\010 \001(\006\022\031\n\021optional_sfixed32\030"
  "\t \001(\017\022\031\n\021optional_sfixed64\030\n \001(\020\022\026\n\016opti"
  "onal_float\030\013 \001(\002\022\027\n\017optional_double\030\014 \001("
  "\001\022\025\n\roptional_bool\030\r \001(\010\022\027\n\017optional_str"
  "ing\030\016 \001(\t\022\026\n\016optional_bytes\030\017 \001(\014\022`\n\027opt"
  "ional_nested_message\030\022 \001(\0132\?.protobuf_te"
  "st_messages.proto2.TestAllTypesProto2.Ne"
  "stedMessage\022U\n\030optional_foreign_message\030"
  "\023 \001(\01323.protobuf_test_messages.proto2.Fo"
  "reignMessageProto2\022Z\n\024optional_nested_en"
  "um\030\025 \001(\0162<.protobuf_test_messages.proto2"
  ".TestAllTypesProto2.NestedEnum\022O\n\025option"
  "al_foreign_enum\030\026 \001(\01620.protobuf_test_me"
  "ssages.proto2.ForeignEnumProto2\022!\n\025optio"
  "nal_string_piece\030\030 \001(\tB\002\010\002\022\031\n\roptional_c"
  "ord\030\031 \001(\tB\002\010\001\022L\n\021recursive_message\030\033 \001(\013"
  "21.protobuf_test_messages.proto2.TestAll"
  "TypesProto2\022\026\n\016repeated_int32\030\037 \003(\005\022\026\n\016r"
  "epeated_int64\030  \003(\003\022\027\n\017repeated_uint32\030!"
  " \003(\r\022\027\n\017repeated_uint64\030\" \003(\004\022\027\n\017repeate"
  "d_sint32\030# \003(\021\022\027\n\017repeated_sint64\030$ \003(\022\022"
  "\030\n\020repeated_fixed32\030% \003(\007\022\030\n\020repeated_fi"
  "xed64\030& \003(\006\022\031\n\021repeated_sfixed32\030\' \003(\017\022\031"
  "\n\021repeated_sfixed64\030( \003(\020\022\026\n\016repeated_fl"
  "oat\030) \003(\002\022\027\n\017repeated_double\030* \003(\001\022\025\n\rre"
  "peated_bool\030+ \003(\010\022\027\n\017repeated_string\030, \003"
  "(\t\022\026\n\016repeated_bytes\030- \003(\014\022`\n\027repeated_n"
  "ested_message\0300 \003(\0132\?.protobuf_test_mess"
  "ages.proto2.TestAllTypesProto2.NestedMes"
  "sage\022U\n\030repeated_foreign_message\0301 \003(\01323"
  ".protobuf_test_messages.proto2.ForeignMe"
  "ssageProto2\022Z\n\024repeated_nested_enum\0303 \003("
  "\0162<.protobuf_test_messages.proto2.TestAl"
  "lTypesProto2.NestedEnum\022O\n\025repeated_fore"
  "ign_enum\0304 \003(\01620.protobuf_test_messages."
  "proto2.ForeignEnumProto2\022!\n\025repeated_str"
  "ing_piece\0306 \003(\tB\002\010\002\022\031\n\rrepeated_cord\0307 \003"
  "(\tB\002\010\001\022\030\n\014packed_int32\030K \003(\005B\002\020\001\022\030\n\014pack"
  "ed_int64\030L \003(\003B\002\020\001\022\031\n\rpacked_uint32\030M \003("
  "\rB\002\020\001\022\031\n\rpacked_uint64\030N \003(\004B\002\020\001\022\031\n\rpack"
  "ed_sint32\030O \003(\021B\002\020\001\022\031\n\rpacked_sint64\030P \003"
  "(\022B\002\020\001\022\032\n\016packed_fixed32\030Q \003(\007B\002\020\001\022\032\n\016pa"
  "cked_fixed64\030R \003(\006B\002\020\001\022\033\n\017packed_sfixed3"
  "2\030S \003(\017B\002\020\001\022\033\n\017packed_sfixed64\030T \003(\020B\002\020\001"
  "\022\030\n\014packed_float\030U \003(\002B\002\020\001\022\031\n\rpacked_dou"
  "ble\030V \003(\001B\002\020\001\022\027\n\013packed_bool\030W \003(\010B\002\020\001\022\\"
  "\n\022packed_nested_enum\030X \003(\0162<.protobuf_te"
  "st_messages.proto2.TestAllTypesProto2.Ne"
  "stedEnumB\002\020\001\022\032\n\016unpacked_int32\030Y \003(\005B\002\020\000"
  "\022\032\n\016unpacked_int64\030Z \003(\003B\002\020\000\022\033\n\017unpacked"
  "_uint32\030[ \003(\rB\002\020\000\022\033\n\017unpacked_uint64\030\\ \003"
  "(\004B\002\020\000\022\033\n\017unpacked_sint32\030] \003(\021B\002\020\000\022\033\n\017u"
  "npacked_sint64\030^ \003(\022B\002\020\000\022\034\n\020unpacked_fix"
  "ed32\030_ \003(\007B\002\020\000\022\034\n\020unpacked_fixed64\030` \003(\006"
  "B\002\020\000\022\035\n\021unpacked_sfixed32\030a \003(\017B\002\020\000\022\035\n\021u"
  "npacked_sfixed64\030b \003(\020B\002\020\000\022\032\n\016unpacked_f"
  "loat\030c \003(\002B\002\020\000\022\033\n\017unpacked_double\030d \003(\001B"
  "\002\020\000\022\031\n\runpacked_bool\030e \003(\010B\002\020\000\022^\n\024unpack"
  "ed_nested_enum\030f \003(\0162<.protobuf_test_mes"
  "sages.proto2.TestAllTypesProto2.NestedEn"
  "umB\002\020\000\022]\n\017map_int32_int32\0308 \003(\0132D.protob"
  "uf_test_messages.proto2.TestAllTypesProt"
  "o2.MapInt32Int32Entry\022]\n\017map_int64_int64"
  "\0309 \003(\0132D.protobuf_test_messages.proto2.T"
  "estAllTypesProto2.MapInt64Int64Entry\022a\n\021"
  "map_uint32_uint32\030: \003(\0132F.protobuf_test_"
  "messages.proto2.TestAllTypesProto2.MapUi"
  "nt32Uint32Entry\022a\n\021map_uint64_uint64\030; \003"
  "(\0132F.protobuf_test_messages.proto2.TestA"
  "llTypesProto2.MapUint64Uint64Entry\022a\n\021ma"
  "p_sint32_sint32\030< \003(\0132F.protobuf_test_me"
  "ssages.proto2.TestAllTypesProto2.MapSint"
  "32Sint32Entry\022a\n\021map_sint64_sint64\030= \003(\013"
  "2F.protobuf_test_messages.proto2.TestAll"
  "TypesProto2.MapSint64Sint64Entry\022e\n\023map_"
  "fixed32_fixed32\030> \003(\0132H.protobuf_test_me"
  "ssages.proto2.TestAllTypesProto2.MapFixe"
  "d32Fixed32Entry\022e\n\023map_fixed64_fixed64\030\?"
  " \003(\0132H.protobuf_test_messages.proto2.Tes"
  "tAllTypesProto2.MapFixed64Fixed64Entry\022i"
  "\n\025map_sfixed32_sfixed32\030@ \003(\0132J.protobuf"
  "_test_messages.proto2.TestAllTypesProto2"
  ".MapSfixed32Sfixed32Entry\022i\n\025map_sfixed6"
  "4_sfixed64\030A \003(\0132J.protobuf_test_message"
  "s.proto2.TestAllTypesProto2.MapSfixed64S"
  "fixed64Entry\022]\n\017map_int32_float\030B \003(\0132D."
  "protobuf_test_messages.proto2.TestAllTyp"
  "esProto2.MapInt32FloatEntry\022_\n\020map_int32"
  "_double\030C \003(\0132E.protobuf_test_messages.p"
  "roto2.TestAllTypesProto2.MapInt32DoubleE"
  "ntry\022Y\n\rmap_bool_bool\030D \003(\0132B.protobuf_t"
  "est_messages.proto2.TestAllTypesProto2.M"
  "apBoolBoolEntry\022a\n\021map_string_string\030E \003"
  "(\0132F.protobuf_test_messages.proto2.TestA"
  "llTypesProto2.MapStringStringEntry\022_\n\020ma"
  "p_string_bytes\030F \003(\0132E.protobuf_test_mes"
  "sages.proto2.TestAllTypesProto2.MapStrin"
  "gBytesEntry\022p\n\031map_string_nested_message"
  "\030G \003(\0132M.protobuf_test_messages.proto2.T"
  "estAllTypesProto2.MapStringNestedMessage"
  "Entry\022r\n\032map_string_foreign_message\030H \003("
  "\0132N.protobuf_test_messages.proto2.TestAl"
  "lTypesProto2.MapStringForeignMessageEntr"
  "y\022j\n\026map_string_nested_enum\030I \003(\0132J.prot"
  "obuf_test_messages.proto2.TestAllTypesPr"
  "oto2.MapStringNestedEnumEntry\022l\n\027map_str"
  "ing_foreign_enum\030J \003(\0132K.protobuf_test_m"
  "essages.proto2.TestAllTypesProto2.MapStr"
  "ingForeignEnumEntry\022\026\n\014oneof_uint32\030o \001("
  "\rH\000\022_\n\024oneof_nested_message\030p \001(\0132\?.prot"
  "obuf_test_messages.proto2.TestAllTypesPr"
  "oto2.NestedMessageH\000\022\026\n\014oneof_string\030q \001"
  "(\tH\000\022\025\n\013oneof_bytes\030r \001(\014H\000\022\024\n\noneof_boo"
  "l\030s \001(\010H\000\022\026\n\014oneof_uint64\030t \001(\004H\000\022\025\n\013one"
  "of_float\030u \001(\002H\000\022\026\n\014oneof_double\030v \001(\001H\000"
  "\022R\n\noneof_enum\030w \001(\0162<.protobuf_test_mes"
  "sages.proto2.TestAllTypesProto2.NestedEn"
  "umH\000\022E\n\004data\030\311\001 \001(\n26.protobuf_test_mess"
  "ages.proto2.TestAllTypesProto2.Data\022\"\n\rd"
  "efault_int32\030\361\001 \001(\005:\n-123456789\022,\n\rdefau"
  "lt_int64\030\362\001 \001(\003:\024-9123456789123456789\022#\n"
  "\016default_uint32\030\363\001 \001(\r:\n2123456789\022-\n\016de"
  "fault_uint64\030\364\001 \001(\004:\0241012345678912345678"
  "9\022#\n\016default_sint32\030\365\001 \001(\021:\n-123456789\022-"
  "\n\016default_sint64\030\366\001 \001(\022:\024-91234567891234"
  "56789\022$\n\017default_fixed32\030\367\001 \001(\007:\n2123456"
  "789\022.\n\017default_fixed64\030\370\001 \001(\006:\024101234567"
  "89123456789\022%\n\020default_sfixed32\030\371\001 \001(\017:\n"
  "-123456789\022/\n\020default_sfixed64\030\372\001 \001(\020:\024-"
  "9123456789123456789\022\036\n\rdefault_float\030\373\001 "
  "\001(\002:\0069e+009\022\037\n\016default_double\030\374\001 \001(\001:\0067e"
  "+022\022\033\n\014default_bool\030\375\001 \001(\010:\004true\022 \n\016def"
  "ault_string\030\376\001 \001(\t:\007Rosebud\022\036\n\rdefault_b"
  "ytes\030\377\001 \001(\014:\006joshua\022\023\n\nfieldname1\030\221\003 \001(\005"
  "\022\024\n\013field_name2\030\222\003 \001(\005\022\025\n\014_field_name3\030\223"
  "\003 \001(\005\022\026\n\rfield__name4_\030\224\003 \001(\005\022\024\n\013field0n"
  "ame5\030\225\003 \001(\005\022\026\n\rfield_0_name6\030\226\003 \001(\005\022\023\n\nf"
  "ieldName7\030\227\003 \001(\005\022\023\n\nFieldName8\030\230\003 \001(\005\022\024\n"
  "\013field_Name9\030\231\003 \001(\005\022\025\n\014Field_Name10\030\232\003 \001"
  "(\005\022\025\n\014FIELD_NAME11\030\233\003 \001(\005\022\025\n\014FIELD_name1"
  "2\030\234\003 \001(\005\022\027\n\016__field_name13\030\235\003 \001(\005\022\027\n\016__F"
  "ield_name14\030\236\003 \001(\005\022\026\n\rfield__name15\030\237\003 \001"
  "(\005\022\026\n\rfield__Name16\030\240\003 \001(\005\022\027\n\016field_name"
  "17__\030\241\003 \001(\005\022\027\n\016Field_name18__\030\242\003 \001(\005\032b\n\r"
  "NestedMessage\022\t\n\001a\030\001 \001(\005\022F\n\013corecursive\030"
  "\002 \001(\01321.protobuf_test_messages.proto2.Te"
  "stAllTypesProto2\0324\n\022MapInt32Int32Entry\022\013"
  "\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\0324\n\022MapInt"
  "64Int64Entry\022\013\n\003key\030\001 \001(\003\022\r\n\005value\030\002 \001(\003"
  ":\0028\001\0326\n\024MapUint32Uint32Entry\022\013\n\003key\030\001 \001("
  "\r\022\r\n\005value\030\002 \001(\r:\0028\001\0326\n\024MapUint64Uint64E"
  "ntry\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\004:\0028\001\0326\n\024"
  "MapSint32Sint32Entry\022\013\n\003key\030\001 \001(\021\022\r\n\005val"
  "ue\030\002 \001(\021:\0028\001\0326\n\024MapSint64Sint64Entry\022\013\n\003"
  "key\030\001 \001(\022\022\r\n\005value\030\002 \001(\022:\0028\001\0328\n\026MapFixed"
  "32Fixed32Entry\022\013\n\003key\030\001 \001(\007\022\r\n\005value\030\002 \001"
  "(\007:\0028\001\0328\n\026MapFixed64Fixed64Entry\022\013\n\003key\030"
  "\001 \001(\006\022\r\n\005value\030\002 \001(\006:\0028\001\032:\n\030MapSfixed32S"
  "fixed32Entry\022\013\n\003key\030\001 \001(\017\022\r\n\005value\030\002 \001(\017"
  ":\0028\001\032:\n\030MapSfixed64Sfixed64Entry\022\013\n\003key\030"
  "\001 \001(\020\022\r\n\005value\030\002 \001(\020:\0028\001\0324\n\022MapInt32Floa"
  "tEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\002:\0028\001\0325"
  "\n\023MapInt32DoubleEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005va"
  "lue\030\002 \001(\001:\0028\001\0322\n\020MapBoolBoolEntry\022\013\n\003key"
  "\030\001 \001(\010\022\r\n\005value\030\002 \001(\010:\0028\001\0326\n\024MapStringSt"
  "ringEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028"
  "\001\0325\n\023MapStringBytesEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\014:\0028\001\032~\n\033MapStringNestedMessa"
  "geEntry\022\013\n\003key\030\001 \001(\t\022N\n\005value\030\002 \001(\0132\?.pr"
  "otobuf_test_messages.proto2.TestAllTypes"
  "Proto2.NestedMessage:\0028\001\032s\n\034MapStringFor"
  "eignMessageEntry\022\013\n\003key\030\001 \001(\t\022B\n\005value\030\002"
  " \001(\01323.protobuf_test_messages.proto2.For"
  "eignMessageProto2:\0028\001\032x\n\030MapStringNested"
  "EnumEntry\022\013\n\003key\030\001 \001(\t\022K\n\005value\030\002 \001(\0162<."
  "protobuf_test_messages.proto2.TestAllTyp"
  "esProto2.NestedEnum:\0028\001\032m\n\031MapStringFore"
  "ignEnumEntry\022\013\n\003key\030\001 \001(\t\022\?\n\005value\030\002 \001(\016"
  "20.protobuf_test_messages.proto2.Foreign"
  "EnumProto2:\0028\001\0323\n\004Data\022\024\n\013group_int32\030\312\001"
  " \001(\005\022\025\n\014group_uint32\030\313\001 \001(\r\032!\n\021MessageSe"
  "tCorrect*\010\010\004\020\377\377\377\377\007:\002\010\001\032\340\001\n\033MessageSetCor"
  "rectExtension1\022\013\n\003str\030\031 \001(\t2\263\001\n\025message_"
  "set_extension\022C.protobuf_test_messages.p"
  "roto2.TestAllTypesProto2.MessageSetCorre"
  "ct\030\371\273^ \001(\0132M.protobuf_test_messages.prot"
  "o2.TestAllTypesProto2.MessageSetCorrectE"
  "xtension1\032\337\001\n\033MessageSetCorrectExtension"
  "2\022\t\n\001i\030\t \001(\0052\264\001\n\025message_set_extension\022C"
  ".protobuf_test_messages.proto2.TestAllTy"
  "pesProto2.MessageSetCorrect\030\220\263\374\001 \001(\0132M.p"
  "rotobuf_test_messages.proto2.TestAllType"
  "sProto2.MessageSetCorrectExtension2\"9\n\nN"
  "estedEnum\022\007\n\003FOO\020\000\022\007\n\003BAR\020\001\022\007\n\003BAZ\020\002\022\020\n\003"
  "NEG\020\377\377\377\377\377\377\377\377\377\001*\005\010x\020\311\001B\r\n\013oneof_fieldJ\006\010\350"
  "\007\020\220N\"!\n\024ForeignMessageProto2\022\t\n\001c\030\001 \001(\005\""
  "\301\002\n\025UnknownToTestAllTypes\022\027\n\016optional_in"
  "t32\030\351\007 \001(\005\022\030\n\017optional_string\030\352\007 \001(\t\022L\n\016"
  "nested_message\030\353\007 \001(\01323.protobuf_test_me"
  "ssages.proto2.ForeignMessageProto2\022Z\n\rop"
  "tionalgroup\030\354\007 \001(\n2B.protobuf_test_messa"
  "ges.proto2.UnknownToTestAllTypes.Optiona"
  "lGroup\022\026\n\roptional_bool\030\356\007 \001(\010\022\027\n\016repeat"
  "ed_int32\030\363\007 \003(\005\032\032\n\rOptionalGroup\022\t\n\001a\030\001 "
  "\001(\005\"\026\n\024NullHypothesisProto2\"/\n\016EnumOnlyP"
  "roto2\"\035\n\004Bool\022\n\n\006kFalse\020\000\022\t\n\005kTrue\020\001\"\037\n\017"
  "OneStringProto2\022\014\n\004data\030\001 \001(\t*F\n\021Foreign"
  "EnumProto2\022\017\n\013FOREIGN_FOO\020\000\022\017\n\013FOREIGN_B"
  "AR\020\001\022\017\n\013FOREIGN_BAZ\020\002:J\n\017extension_int32"
  "\0221.protobuf_test_messages.proto2.TestAll"
  "TypesProto2\030x \001(\005B/\n(com.google.protobuf"
  "_test_messages.proto2H\001\370\001\001"
  ;
static ::_pbi::once_flag descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto = {
    false, false, 8746, descriptor_table_protodef_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto,
    "google/protobuf/test_messages_proto2.proto",
    &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once, nullptr, 0, 31,
    schemas, file_default_instances, TableStruct_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto::offsets,
    file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto, file_level_enum_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto,
    file_level_service_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter() {
  return &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto(&descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto);
namespace protobuf_test_messages {
namespace proto2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestAllTypesProto2_NestedEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[0];
}
bool TestAllTypesProto2_NestedEnum_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TestAllTypesProto2_NestedEnum TestAllTypesProto2::FOO;
constexpr TestAllTypesProto2_NestedEnum TestAllTypesProto2::BAR;
constexpr TestAllTypesProto2_NestedEnum TestAllTypesProto2::BAZ;
constexpr TestAllTypesProto2_NestedEnum TestAllTypesProto2::NEG;
constexpr TestAllTypesProto2_NestedEnum TestAllTypesProto2::NestedEnum_MIN;
constexpr TestAllTypesProto2_NestedEnum TestAllTypesProto2::NestedEnum_MAX;
constexpr int TestAllTypesProto2::NestedEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnumOnlyProto2_Bool_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[1];
}
bool EnumOnlyProto2_Bool_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr EnumOnlyProto2_Bool EnumOnlyProto2::kFalse;
constexpr EnumOnlyProto2_Bool EnumOnlyProto2::kTrue;
constexpr EnumOnlyProto2_Bool EnumOnlyProto2::Bool_MIN;
constexpr EnumOnlyProto2_Bool EnumOnlyProto2::Bool_MAX;
constexpr int EnumOnlyProto2::Bool_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ForeignEnumProto2_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto);
  return file_level_enum_descriptors_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[2];
}
bool ForeignEnumProto2_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TestAllTypesProto2_NestedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypesProto2_NestedMessage>()._impl_._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_test_messages::proto2::TestAllTypesProto2& corecursive(const TestAllTypesProto2_NestedMessage* msg);
  static void set_has_corecursive(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protobuf_test_messages::proto2::TestAllTypesProto2&
TestAllTypesProto2_NestedMessage::_Internal::corecursive(const TestAllTypesProto2_NestedMessage* msg) {
  return *msg->_impl_.corecursive_;
}
TestAllTypesProto2_NestedMessage::TestAllTypesProto2_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
}
TestAllTypesProto2_NestedMessage::TestAllTypesProto2_NestedMessage(const TestAllTypesProto2_NestedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestAllTypesProto2_NestedMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.corecursive_){nullptr}
    , decltype(_impl_.a_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_corecursive()) {
    _this->_impl_.corecursive_ = new ::protobuf_test_messages::proto2::TestAllTypesProto2(*from._impl_.corecursive_);
  }
  _this->_impl_.a_ = from._impl_.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
}

inline void TestAllTypesProto2_NestedMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.corecursive_){nullptr}
    , decltype(_impl_.a_){0}
  };
}

TestAllTypesProto2_NestedMessage::~TestAllTypesProto2_NestedMessage() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAllTypesProto2_NestedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.corecursive_;
}

void TestAllTypesProto2_NestedMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestAllTypesProto2_NestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.corecursive_ != nullptr);
    _impl_.corecursive_->Clear();
  }
  _impl_.a_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAllTypesProto2_NestedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_test_messages.proto2.TestAllTypesProto2 corecursive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_corecursive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAllTypesProto2_NestedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 a = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  // optional .protobuf_test_messages.proto2.TestAllTypesProto2 corecursive = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::corecursive(this),
        _Internal::corecursive(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
  return target;
}

size_t TestAllTypesProto2_NestedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobuf_test_messages.proto2.TestAllTypesProto2 corecursive = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.corecursive_);
    }

    // optional int32 a = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestAllTypesProto2_NestedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestAllTypesProto2_NestedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestAllTypesProto2_NestedMessage::GetClassData() const { return &_class_data_; }


void TestAllTypesProto2_NestedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestAllTypesProto2_NestedMessage*>(&to_msg);
  auto& from = static_cast<const TestAllTypesProto2_NestedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_corecursive()->::protobuf_test_messages::proto2::TestAllTypesProto2::MergeFrom(
          from._internal_corecursive());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.a_ = from._impl_.a_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestAllTypesProto2_NestedMessage::CopyFrom(const TestAllTypesProto2_NestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesProto2_NestedMessage::IsInitialized() const {
  if (_internal_has_corecursive()) {
    if (!_impl_.corecursive_->IsInitialized()) return false;
  }
  return true;
}

void TestAllTypesProto2_NestedMessage::InternalSwap(TestAllTypesProto2_NestedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestAllTypesProto2_NestedMessage, _impl_.a_)
      + sizeof(TestAllTypesProto2_NestedMessage::_impl_.a_)
      - PROTOBUF_FIELD_OFFSET(TestAllTypesProto2_NestedMessage, _impl_.corecursive_)>(
          reinterpret_cast<char*>(&_impl_.corecursive_),
          reinterpret_cast<char*>(&other->_impl_.corecursive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_NestedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[0]);
}

// ===================================================================

TestAllTypesProto2_MapInt32Int32Entry_DoNotUse::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse() {}
TestAllTypesProto2_MapInt32Int32Entry_DoNotUse::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapInt32Int32Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapInt32Int32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapInt32Int32Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[1]);
}

// ===================================================================

TestAllTypesProto2_MapInt64Int64Entry_DoNotUse::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse() {}
TestAllTypesProto2_MapInt64Int64Entry_DoNotUse::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapInt64Int64Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapInt64Int64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapInt64Int64Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[2]);
}

// ===================================================================

TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse() {}
TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[3]);
}

// ===================================================================

TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse() {}
TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[4]);
}

// ===================================================================

TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse() {}
TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[5]);
}

// ===================================================================

TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse() {}
TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[6]);
}

// ===================================================================

TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse() {}
TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[7]);
}

// ===================================================================

TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse() {}
TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[8]);
}

// ===================================================================

TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse() {}
TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[9]);
}

// ===================================================================

TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse() {}
TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[10]);
}

// ===================================================================

TestAllTypesProto2_MapInt32FloatEntry_DoNotUse::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse() {}
TestAllTypesProto2_MapInt32FloatEntry_DoNotUse::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapInt32FloatEntry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapInt32FloatEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapInt32FloatEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[11]);
}

// ===================================================================

TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse() {}
TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[12]);
}

// ===================================================================

TestAllTypesProto2_MapBoolBoolEntry_DoNotUse::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse() {}
TestAllTypesProto2_MapBoolBoolEntry_DoNotUse::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapBoolBoolEntry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapBoolBoolEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapBoolBoolEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[13]);
}

// ===================================================================

TestAllTypesProto2_MapStringStringEntry_DoNotUse::TestAllTypesProto2_MapStringStringEntry_DoNotUse() {}
TestAllTypesProto2_MapStringStringEntry_DoNotUse::TestAllTypesProto2_MapStringStringEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapStringStringEntry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapStringStringEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapStringStringEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[14]);
}

// ===================================================================

TestAllTypesProto2_MapStringBytesEntry_DoNotUse::TestAllTypesProto2_MapStringBytesEntry_DoNotUse() {}
TestAllTypesProto2_MapStringBytesEntry_DoNotUse::TestAllTypesProto2_MapStringBytesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapStringBytesEntry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapStringBytesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapStringBytesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[15]);
}

// ===================================================================

TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse() {}
TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[16]);
}

// ===================================================================

TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse() {}
TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[17]);
}

// ===================================================================

TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse() {}
TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[18]);
}

// ===================================================================

TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse() {}
TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse::MergeFrom(const TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[19]);
}

// ===================================================================

class TestAllTypesProto2_Data::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypesProto2_Data>()._impl_._has_bits_);
  static void set_has_group_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_group_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TestAllTypesProto2_Data::TestAllTypesProto2_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
}
TestAllTypesProto2_Data::TestAllTypesProto2_Data(const TestAllTypesProto2_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestAllTypesProto2_Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_int32_){}
    , decltype(_impl_.group_uint32_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.group_int32_, &from._impl_.group_int32_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_uint32_) -
    reinterpret_cast<char*>(&_impl_.group_int32_)) + sizeof(_impl_.group_uint32_));
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
}

inline void TestAllTypesProto2_Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_int32_){0}
    , decltype(_impl_.group_uint32_){0u}
  };
}

TestAllTypesProto2_Data::~TestAllTypesProto2_Data() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAllTypesProto2_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestAllTypesProto2_Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestAllTypesProto2_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.group_int32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.group_uint32_) -
        reinterpret_cast<char*>(&_impl_.group_int32_)) + sizeof(_impl_.group_uint32_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAllTypesProto2_Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 group_int32 = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_group_int32(&has_bits);
          _impl_.group_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 group_uint32 = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_group_uint32(&has_bits);
          _impl_.group_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAllTypesProto2_Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 group_int32 = 202;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(202, this->_internal_group_int32(), target);
  }

  // optional uint32 group_uint32 = 203;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(203, this->_internal_group_uint32(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
  return target;
}

size_t TestAllTypesProto2_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 group_int32 = 202;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_group_int32());
    }

    // optional uint32 group_uint32 = 203;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_group_uint32());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestAllTypesProto2_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestAllTypesProto2_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestAllTypesProto2_Data::GetClassData() const { return &_class_data_; }


void TestAllTypesProto2_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestAllTypesProto2_Data*>(&to_msg);
  auto& from = static_cast<const TestAllTypesProto2_Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.group_int32_ = from._impl_.group_int32_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.group_uint32_ = from._impl_.group_uint32_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestAllTypesProto2_Data::CopyFrom(const TestAllTypesProto2_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesProto2_Data::IsInitialized() const {
  return true;
}

void TestAllTypesProto2_Data::InternalSwap(TestAllTypesProto2_Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestAllTypesProto2_Data, _impl_.group_uint32_)
      + sizeof(TestAllTypesProto2_Data::_impl_.group_uint32_)
      - PROTOBUF_FIELD_OFFSET(TestAllTypesProto2_Data, _impl_.group_int32_)>(
          reinterpret_cast<char*>(&_impl_.group_int32_),
          reinterpret_cast<char*>(&other->_impl_.group_int32_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[20]);
}

// ===================================================================

class TestAllTypesProto2_MessageSetCorrect::_Internal {
 public:
};

TestAllTypesProto2_MessageSetCorrect::TestAllTypesProto2_MessageSetCorrect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect)
}
TestAllTypesProto2_MessageSetCorrect::TestAllTypesProto2_MessageSetCorrect(const TestAllTypesProto2_MessageSetCorrect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestAllTypesProto2_MessageSetCorrect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect)
}

inline void TestAllTypesProto2_MessageSetCorrect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestAllTypesProto2_MessageSetCorrect::~TestAllTypesProto2_MessageSetCorrect() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAllTypesProto2_MessageSetCorrect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
}

void TestAllTypesProto2_MessageSetCorrect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestAllTypesProto2_MessageSetCorrect::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAllTypesProto2_MessageSetCorrect::_InternalParse(const char* ptr,
                  ::_pbi::ParseContext* ctx) {
  return _impl_._extensions_.ParseMessageSet(ptr, 
      internal_default_instance(), &_internal_metadata_, ctx);
}

uint8_t* TestAllTypesProto2_MessageSetCorrect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  target = _impl_._extensions_.InternalSerializeMessageSetWithCachedSizesToArray(
internal_default_instance(), target, stream);
  target = ::_pbi::InternalSerializeUnknownMessageSetItemsToArray(
               _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  return target;
}

size_t TestAllTypesProto2_MessageSetCorrect::ByteSizeLong() const {
// @@protoc_insertion_point(message_set_byte_size_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect)
  size_t total_size = _impl_._extensions_.MessageSetByteSize();
  if (_internal_metadata_.have_unknown_fields()) {
    total_size += ::_pbi::
        ComputeUnknownMessageSetItemsSize(_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance));
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestAllTypesProto2_MessageSetCorrect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestAllTypesProto2_MessageSetCorrect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestAllTypesProto2_MessageSetCorrect::GetClassData() const { return &_class_data_; }


void TestAllTypesProto2_MessageSetCorrect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestAllTypesProto2_MessageSetCorrect*>(&to_msg);
  auto& from = static_cast<const TestAllTypesProto2_MessageSetCorrect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestAllTypesProto2_MessageSetCorrect::CopyFrom(const TestAllTypesProto2_MessageSetCorrect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesProto2_MessageSetCorrect::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void TestAllTypesProto2_MessageSetCorrect::InternalSwap(TestAllTypesProto2_MessageSetCorrect* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MessageSetCorrect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[21]);
}

// ===================================================================

class TestAllTypesProto2_MessageSetCorrectExtension1::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypesProto2_MessageSetCorrectExtension1>()._impl_._has_bits_);
  static void set_has_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestAllTypesProto2_MessageSetCorrectExtension1::TestAllTypesProto2_MessageSetCorrectExtension1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
}
TestAllTypesProto2_MessageSetCorrectExtension1::TestAllTypesProto2_MessageSetCorrectExtension1(const TestAllTypesProto2_MessageSetCorrectExtension1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestAllTypesProto2_MessageSetCorrectExtension1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.str_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_str()) {
    _this->_impl_.str_.Set(from._internal_str(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
}

inline void TestAllTypesProto2_MessageSetCorrectExtension1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.str_){}
  };
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestAllTypesProto2_MessageSetCorrectExtension1::~TestAllTypesProto2_MessageSetCorrectExtension1() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAllTypesProto2_MessageSetCorrectExtension1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.str_.Destroy();
}

void TestAllTypesProto2_MessageSetCorrectExtension1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestAllTypesProto2_MessageSetCorrectExtension1::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.str_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAllTypesProto2_MessageSetCorrectExtension1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string str = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1.str");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAllTypesProto2_MessageSetCorrectExtension1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string str = 25;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1.str");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
  return target;
}

size_t TestAllTypesProto2_MessageSetCorrectExtension1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string str = 25;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestAllTypesProto2_MessageSetCorrectExtension1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestAllTypesProto2_MessageSetCorrectExtension1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestAllTypesProto2_MessageSetCorrectExtension1::GetClassData() const { return &_class_data_; }


void TestAllTypesProto2_MessageSetCorrectExtension1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestAllTypesProto2_MessageSetCorrectExtension1*>(&to_msg);
  auto& from = static_cast<const TestAllTypesProto2_MessageSetCorrectExtension1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_str()) {
    _this->_internal_set_str(from._internal_str());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestAllTypesProto2_MessageSetCorrectExtension1::CopyFrom(const TestAllTypesProto2_MessageSetCorrectExtension1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesProto2_MessageSetCorrectExtension1::IsInitialized() const {
  return true;
}

void TestAllTypesProto2_MessageSetCorrectExtension1::InternalSwap(TestAllTypesProto2_MessageSetCorrectExtension1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.str_, lhs_arena,
      &other->_impl_.str_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MessageSetCorrectExtension1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[22]);
}

// ===================================================================

class TestAllTypesProto2_MessageSetCorrectExtension2::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypesProto2_MessageSetCorrectExtension2>()._impl_._has_bits_);
  static void set_has_i(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TestAllTypesProto2_MessageSetCorrectExtension2::TestAllTypesProto2_MessageSetCorrectExtension2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
}
TestAllTypesProto2_MessageSetCorrectExtension2::TestAllTypesProto2_MessageSetCorrectExtension2(const TestAllTypesProto2_MessageSetCorrectExtension2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestAllTypesProto2_MessageSetCorrectExtension2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.i_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.i_ = from._impl_.i_;
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
}

inline void TestAllTypesProto2_MessageSetCorrectExtension2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.i_){0}
  };
}

TestAllTypesProto2_MessageSetCorrectExtension2::~TestAllTypesProto2_MessageSetCorrectExtension2() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestAllTypesProto2_MessageSetCorrectExtension2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestAllTypesProto2_MessageSetCorrectExtension2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestAllTypesProto2_MessageSetCorrectExtension2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.i_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAllTypesProto2_MessageSetCorrectExtension2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 i = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_i(&has_bits);
          _impl_.i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAllTypesProto2_MessageSetCorrectExtension2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 i = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_i(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
  return target;
}

size_t TestAllTypesProto2_MessageSetCorrectExtension2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 i = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_i());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestAllTypesProto2_MessageSetCorrectExtension2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestAllTypesProto2_MessageSetCorrectExtension2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestAllTypesProto2_MessageSetCorrectExtension2::GetClassData() const { return &_class_data_; }


void TestAllTypesProto2_MessageSetCorrectExtension2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestAllTypesProto2_MessageSetCorrectExtension2*>(&to_msg);
  auto& from = static_cast<const TestAllTypesProto2_MessageSetCorrectExtension2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_i()) {
    _this->_internal_set_i(from._internal_i());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestAllTypesProto2_MessageSetCorrectExtension2::CopyFrom(const TestAllTypesProto2_MessageSetCorrectExtension2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesProto2_MessageSetCorrectExtension2::IsInitialized() const {
  return true;
}

void TestAllTypesProto2_MessageSetCorrectExtension2::InternalSwap(TestAllTypesProto2_MessageSetCorrectExtension2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.i_, other->_impl_.i_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2_MessageSetCorrectExtension2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[23]);
}

// ===================================================================

class TestAllTypesProto2::_Internal {
 public:
  using HasBits = decltype(std::declval<TestAllTypesProto2>()._impl_._has_bits_);
  static void set_has_optional_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_optional_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_optional_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_optional_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_optional_sint32(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_optional_sint64(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_optional_fixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_optional_fixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_optional_sfixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_optional_sfixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_optional_float(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_optional_double(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_optional_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_optional_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optional_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage& optional_nested_message(const TestAllTypesProto2* msg);
  static void set_has_optional_nested_message(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::protobuf_test_messages::proto2::ForeignMessageProto2& optional_foreign_message(const TestAllTypesProto2* msg);
  static void set_has_optional_foreign_message(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_optional_nested_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_optional_foreign_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_optional_string_piece(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_optional_cord(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::protobuf_test_messages::proto2::TestAllTypesProto2& recursive_message(const TestAllTypesProto2* msg);
  static void set_has_recursive_message(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage& oneof_nested_message(const TestAllTypesProto2* msg);
  static const ::protobuf_test_messages::proto2::TestAllTypesProto2_Data& data(const TestAllTypesProto2* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_default_int32(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_default_int64(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_default_uint32(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_default_uint64(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_default_sint32(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_default_sint64(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_default_fixed32(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_default_fixed64(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_default_sfixed32(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_default_sfixed64(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_default_float(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_default_double(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_default_bool(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_default_string(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_default_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fieldname1(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_field_name2(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has__field_name3(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_field__name4_(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_field0name5(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_field_0_name6(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_fieldname7(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_fieldname8(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_field_name9(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_field_name10(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_field_name11(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_field_name12(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has___field_name13(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has___field_name14(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_field__name15(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_field__name16(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_field_name17__(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_field_name18__(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
};

const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage&
TestAllTypesProto2::_Internal::optional_nested_message(const TestAllTypesProto2* msg) {
  return *msg->_impl_.optional_nested_message_;
}
const ::protobuf_test_messages::proto2::ForeignMessageProto2&
TestAllTypesProto2::_Internal::optional_foreign_message(const TestAllTypesProto2* msg) {
  return *msg->_impl_.optional_foreign_message_;
}
const ::protobuf_test_messages::proto2::TestAllTypesProto2&
TestAllTypesProto2::_Internal::recursive_message(const TestAllTypesProto2* msg) {
  return *msg->_impl_.recursive_message_;
}
const ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage&
TestAllTypesProto2::_Internal::oneof_nested_message(const TestAllTypesProto2* msg) {
  return *msg->_impl_.oneof_field_.oneof_nested_message_;
}
const ::protobuf_test_messages::proto2::TestAllTypesProto2_Data&
TestAllTypesProto2::_Internal::data(const TestAllTypesProto2* msg) {
  return *msg->_impl_.data_;
}
void TestAllTypesProto2::set_allocated_oneof_nested_message(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage* oneof_nested_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_oneof_field();
  if (oneof_nested_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oneof_nested_message);
    if (message_arena != submessage_arena) {
      oneof_nested_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oneof_nested_message, submessage_arena);
    }
    set_has_oneof_nested_message();
    _impl_.oneof_field_.oneof_nested_message_ = oneof_nested_message;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_test_messages.proto2.TestAllTypesProto2.oneof_nested_message)
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestAllTypesProto2::Impl_::_i_give_permission_to_break_this_code_default_default_string_{{{"Rosebud", 7}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString TestAllTypesProto2::Impl_::_i_give_permission_to_break_this_code_default_default_bytes_{{{"joshua", 6}}, {nullptr}};
TestAllTypesProto2::TestAllTypesProto2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TestAllTypesProto2::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.TestAllTypesProto2)
}
TestAllTypesProto2::TestAllTypesProto2(const TestAllTypesProto2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestAllTypesProto2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.repeated_int32_){from._impl_.repeated_int32_}
    , decltype(_impl_.repeated_int64_){from._impl_.repeated_int64_}
    , decltype(_impl_.repeated_uint32_){from._impl_.repeated_uint32_}
    , decltype(_impl_.repeated_uint64_){from._impl_.repeated_uint64_}
    , decltype(_impl_.repeated_sint32_){from._impl_.repeated_sint32_}
    , decltype(_impl_.repeated_sint64_){from._impl_.repeated_sint64_}
    , decltype(_impl_.repeated_fixed32_){from._impl_.repeated_fixed32_}
    , decltype(_impl_.repeated_fixed64_){from._impl_.repeated_fixed64_}
    , decltype(_impl_.repeated_sfixed32_){from._impl_.repeated_sfixed32_}
    , decltype(_impl_.repeated_sfixed64_){from._impl_.repeated_sfixed64_}
    , decltype(_impl_.repeated_float_){from._impl_.repeated_float_}
    , decltype(_impl_.repeated_double_){from._impl_.repeated_double_}
    , decltype(_impl_.repeated_bool_){from._impl_.repeated_bool_}
    , decltype(_impl_.repeated_string_){from._impl_.repeated_string_}
    , decltype(_impl_.repeated_bytes_){from._impl_.repeated_bytes_}
    , decltype(_impl_.repeated_nested_message_){from._impl_.repeated_nested_message_}
    , decltype(_impl_.repeated_foreign_message_){from._impl_.repeated_foreign_message_}
    , decltype(_impl_.repeated_nested_enum_){from._impl_.repeated_nested_enum_}
    , decltype(_impl_.repeated_foreign_enum_){from._impl_.repeated_foreign_enum_}
    , decltype(_impl_.repeated_string_piece_){from._impl_.repeated_string_piece_}
    , decltype(_impl_.repeated_cord_){from._impl_.repeated_cord_}
    , /*decltype(_impl_.map_int32_int32_)*/{}
    , /*decltype(_impl_.map_int64_int64_)*/{}
    , /*decltype(_impl_.map_uint32_uint32_)*/{}
    , /*decltype(_impl_.map_uint64_uint64_)*/{}
    , /*decltype(_impl_.map_sint32_sint32_)*/{}
    , /*decltype(_impl_.map_sint64_sint64_)*/{}
    , /*decltype(_impl_.map_fixed32_fixed32_)*/{}
    , /*decltype(_impl_.map_fixed64_fixed64_)*/{}
    , /*decltype(_impl_.map_sfixed32_sfixed32_)*/{}
    , /*decltype(_impl_.map_sfixed64_sfixed64_)*/{}
    , /*decltype(_impl_.map_int32_float_)*/{}
    , /*decltype(_impl_.map_int32_double_)*/{}
    , /*decltype(_impl_.map_bool_bool_)*/{}
    , /*decltype(_impl_.map_string_string_)*/{}
    , /*decltype(_impl_.map_string_bytes_)*/{}
    , /*decltype(_impl_.map_string_nested_message_)*/{}
    , /*decltype(_impl_.map_string_foreign_message_)*/{}
    , /*decltype(_impl_.map_string_nested_enum_)*/{}
    , /*decltype(_impl_.map_string_foreign_enum_)*/{}
    , decltype(_impl_.packed_int32_){from._impl_.packed_int32_}
    , /*decltype(_impl_._packed_int32_cached_byte_size_)*/{0}
    , decltype(_impl_.packed_int64_){from._impl_.packed_int64_}
    , /*decltype(_impl_._packed_int64_cached_byte_size_)*/{0}
    , decltype(_impl_.packed_uint32_){from._impl_.packed_uint32_}
    , /*decltype(_impl_._packed_uint32_cached_byte_size_)*/{0}
    , decltype(_impl_.packed_uint64_){from._impl_.packed_uint64_}
    , /*decltype(_impl_._packed_uint64_cached_byte_size_)*/{0}
    , decltype(_impl_.packed_sint32_){from._impl_.packed_sint32_}
    , /*decltype(_impl_._packed_sint32_cached_byte_size_)*/{0}
    , decltype(_impl_.packed_sint64_){from._impl_.packed_sint64_}
    , /*decltype(_impl_._packed_sint64_cached_byte_size_)*/{0}
    , decltype(_impl_.packed_fixed32_){from._impl_.packed_fixed32_}
    , decltype(_impl_.packed_fixed64_){from._impl_.packed_fixed64_}
    , decltype(_impl_.packed_sfixed32_){from._impl_.packed_sfixed32_}
    , decltype(_impl_.packed_sfixed64_){from._impl_.packed_sfixed64_}
    , decltype(_impl_.packed_float_){from._impl_.packed_float_}
    , decltype(_impl_.packed_double_){from._impl_.packed_double_}
    , decltype(_impl_.packed_bool_){from._impl_.packed_bool_}
    , decltype(_impl_.packed_nested_enum_){from._impl_.packed_nested_enum_}
    , /*decltype(_impl_._packed_nested_enum_cached_byte_size_)*/{0}
    , decltype(_impl_.unpacked_int32_){from._impl_.unpacked_int32_}
    , decltype(_impl_.unpacked_int64_){from._impl_.unpacked_int64_}
    , decltype(_impl_.unpacked_uint32_){from._impl_.unpacked_uint32_}
    , decltype(_impl_.unpacked_uint64_){from._impl_.unpacked_uint64_}
    , decltype(_impl_.unpacked_sint32_){from._impl_.unpacked_sint32_}
    , decltype(_impl_.unpacked_sint64_){from._impl_.unpacked_sint64_}
    , decltype(_impl_.unpacked_fixed32_){from._impl_.unpacked_fixed32_}
    , decltype(_impl_.unpacked_fixed64_){from._impl_.unpacked_fixed64_}
    , decltype(_impl_.unpacked_sfixed32_){from._impl_.unpacked_sfixed32_}
    , decltype(_impl_.unpacked_sfixed64_){from._impl_.unpacked_sfixed64_}
    , decltype(_impl_.unpacked_float_){from._impl_.unpacked_float_}
    , decltype(_impl_.unpacked_double_){from._impl_.unpacked_double_}
    , decltype(_impl_.unpacked_bool_){from._impl_.unpacked_bool_}
    , decltype(_impl_.unpacked_nested_enum_){from._impl_.unpacked_nested_enum_}
    , decltype(_impl_.optional_string_){}
    , decltype(_impl_.optional_bytes_){}
    , decltype(_impl_.optional_string_piece_){}
    , decltype(_impl_.optional_cord_){}
    , decltype(_impl_.default_string_){}
    , decltype(_impl_.default_bytes_){}
    , decltype(_impl_.optional_nested_message_){nullptr}
    , decltype(_impl_.optional_foreign_message_){nullptr}
    , decltype(_impl_.recursive_message_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.optional_int64_){}
    , decltype(_impl_.optional_int32_){}
    , decltype(_impl_.optional_uint32_){}
    , decltype(_impl_.optional_uint64_){}
    , decltype(_impl_.optional_sint64_){}
    , decltype(_impl_.optional_sint32_){}
    , decltype(_impl_.optional_fixed32_){}
    , decltype(_impl_.optional_fixed64_){}
    , decltype(_impl_.optional_sfixed64_){}
    , decltype(_impl_.optional_sfixed32_){}
    , decltype(_impl_.optional_float_){}
    , decltype(_impl_.optional_double_){}
    , decltype(_impl_.optional_bool_){}
    , decltype(_impl_.optional_nested_enum_){}
    , decltype(_impl_.optional_foreign_enum_){}
    , decltype(_impl_.fieldname1_){}
    , decltype(_impl_.field_name2_){}
    , decltype(_impl_._field_name3_){}
    , decltype(_impl_.field__name4__){}
    , decltype(_impl_.field0name5_){}
    , decltype(_impl_.field_0_name6_){}
    , decltype(_impl_.fieldname7_){}
    , decltype(_impl_.fieldname8_){}
    , decltype(_impl_.field_name9_){}
    , decltype(_impl_.field_name10_){}
    , decltype(_impl_.field_name11_){}
    , decltype(_impl_.field_name12_){}
    , decltype(_impl_.__field_name13_){}
    , decltype(_impl_.__field_name14_){}
    , decltype(_impl_.field__name15_){}
    , decltype(_impl_.field__name16_){}
    , decltype(_impl_.field_name17___){}
    , decltype(_impl_.field_name18___){}
    , decltype(_impl_.default_bool_){}
    , decltype(_impl_.default_int64_){}
    , decltype(_impl_.default_int32_){}
    , decltype(_impl_.default_uint32_){}
    , decltype(_impl_.default_uint64_){}
    , decltype(_impl_.default_sint64_){}
    , decltype(_impl_.default_sint32_){}
    , decltype(_impl_.default_fixed32_){}
    , decltype(_impl_.default_fixed64_){}
    , decltype(_impl_.default_sfixed64_){}
    , decltype(_impl_.default_sfixed32_){}
    , decltype(_impl_.default_float_){}
    , decltype(_impl_.default_double_){}
    , decltype(_impl_.oneof_field_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_impl_.map_int32_int32_.MergeFrom(from._impl_.map_int32_int32_);
  _this->_impl_.map_int64_int64_.MergeFrom(from._impl_.map_int64_int64_);
  _this->_impl_.map_uint32_uint32_.MergeFrom(from._impl_.map_uint32_uint32_);
  _this->_impl_.map_uint64_uint64_.MergeFrom(from._impl_.map_uint64_uint64_);
  _this->_impl_.map_sint32_sint32_.MergeFrom(from._impl_.map_sint32_sint32_);
  _this->_impl_.map_sint64_sint64_.MergeFrom(from._impl_.map_sint64_sint64_);
  _this->_impl_.map_fixed32_fixed32_.MergeFrom(from._impl_.map_fixed32_fixed32_);
  _this->_impl_.map_fixed64_fixed64_.MergeFrom(from._impl_.map_fixed64_fixed64_);
  _this->_impl_.map_sfixed32_sfixed32_.MergeFrom(from._impl_.map_sfixed32_sfixed32_);
  _this->_impl_.map_sfixed64_sfixed64_.MergeFrom(from._impl_.map_sfixed64_sfixed64_);
  _this->_impl_.map_int32_float_.MergeFrom(from._impl_.map_int32_float_);
  _this->_impl_.map_int32_double_.MergeFrom(from._impl_.map_int32_double_);
  _this->_impl_.map_bool_bool_.MergeFrom(from._impl_.map_bool_bool_);
  _this->_impl_.map_string_string_.MergeFrom(from._impl_.map_string_string_);
  _this->_impl_.map_string_bytes_.MergeFrom(from._impl_.map_string_bytes_);
  _this->_impl_.map_string_nested_message_.MergeFrom(from._impl_.map_string_nested_message_);
  _this->_impl_.map_string_foreign_message_.MergeFrom(from._impl_.map_string_foreign_message_);
  _this->_impl_.map_string_nested_enum_.MergeFrom(from._impl_.map_string_nested_enum_);
  _this->_impl_.map_string_foreign_enum_.MergeFrom(from._impl_.map_string_foreign_enum_);
  _impl_.optional_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_string()) {
    _this->_impl_.optional_string_.Set(from._internal_optional_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optional_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_bytes()) {
    _this->_impl_.optional_bytes_.Set(from._internal_optional_bytes(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optional_string_piece_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_string_piece_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_string_piece()) {
    _this->_impl_.optional_string_piece_.Set(from._internal_optional_string_piece(), 
      _this->GetArenaForAllocation());
  }
  _impl_.optional_cord_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_cord_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_cord()) {
    _this->_impl_.optional_cord_.Set(from._internal_optional_cord(), 
      _this->GetArenaForAllocation());
  }
  _impl_.default_string_.InitDefault();
  if (from._internal_has_default_string()) {
    _this->_impl_.default_string_.Set(from._internal_default_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.default_bytes_.InitDefault();
  if (from._internal_has_default_bytes()) {
    _this->_impl_.default_bytes_.Set(from._internal_default_bytes(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_optional_nested_message()) {
    _this->_impl_.optional_nested_message_ = new ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage(*from._impl_.optional_nested_message_);
  }
  if (from._internal_has_optional_foreign_message()) {
    _this->_impl_.optional_foreign_message_ = new ::protobuf_test_messages::proto2::ForeignMessageProto2(*from._impl_.optional_foreign_message_);
  }
  if (from._internal_has_recursive_message()) {
    _this->_impl_.recursive_message_ = new ::protobuf_test_messages::proto2::TestAllTypesProto2(*from._impl_.recursive_message_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::protobuf_test_messages::proto2::TestAllTypesProto2_Data(*from._impl_.data_);
  }
  ::memcpy(&_impl_.optional_int64_, &from._impl_.optional_int64_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.default_double_) -
    reinterpret_cast<char*>(&_impl_.optional_int64_)) + sizeof(_impl_.default_double_));
  clear_has_oneof_field();
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _this->_internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofNestedMessage: {
      _this->_internal_mutable_oneof_nested_message()->::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage::MergeFrom(
          from._internal_oneof_nested_message());
      break;
    }
    case kOneofString: {
      _this->_internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _this->_internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case kOneofBool: {
      _this->_internal_set_oneof_bool(from._internal_oneof_bool());
      break;
    }
    case kOneofUint64: {
      _this->_internal_set_oneof_uint64(from._internal_oneof_uint64());
      break;
    }
    case kOneofFloat: {
      _this->_internal_set_oneof_float(from._internal_oneof_float());
      break;
    }
    case kOneofDouble: {
      _this->_internal_set_oneof_double(from._internal_oneof_double());
      break;
    }
    case kOneofEnum: {
      _this->_internal_set_oneof_enum(from._internal_oneof_enum());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.TestAllTypesProto2)
}

inline void TestAllTypesProto2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.repeated_int32_){arena}
    , decltype(_impl_.repeated_int64_){arena}
    , decltype(_impl_.repeated_uint32_){arena}
    , decltype(_impl_.repeated_uint64_){arena}
    , decltype(_impl_.repeated_sint32_){arena}
    , decltype(_impl_.repeated_sint64_){arena}
    , decltype(_impl_.repeated_fixed32_){arena}
    , decltype(_impl_.repeated_fixed64_){arena}
    , decltype(_impl_.repeated_sfixed32_){arena}
    , decltype(_impl_.repeated_sfixed64_){arena}
    , decltype(_impl_.repeated_float_){arena}
    , decltype(_impl_.repeated_double_){arena}
    , decltype(_impl_.repeated_bool_){arena}
    , decltype(_impl_.repeated_string_){arena}
    , decltype(_impl_.repeated_bytes_){arena}
    , decltype(_impl_.repeated_nested_message_){arena}
    , decltype(_impl_.repeated_foreign_message_){arena}
    , decltype(_impl_.repeated_nested_enum_){arena}
    , decltype(_impl_.repeated_foreign_enum_){arena}
    , decltype(_impl_.repeated_string_piece_){arena}
    , decltype(_impl_.repeated_cord_){arena}
    , /*decltype(_impl_.map_int32_int32_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.map_int64_int64_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.map_uint32_uint32_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.map_uint64_uint64_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.map_sint32_sint32_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.map_sint64_sint64_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.map_fixed32_fixed32_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.map_fixed64_fixed64_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.map_sfixed32_sfixed32_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.map_sfixed64_sfixed64_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.map_int32_float_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.map_int32_double_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.map_bool_bool_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.map_string_string_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.map_string_bytes_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.map_string_nested_message_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.map_string_foreign_message_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.map_string_nested_enum_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.map_string_foreign_enum_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.packed_int32_){arena}
    , /*decltype(_impl_._packed_int32_cached_byte_size_)*/{0}
    , decltype(_impl_.packed_int64_){arena}
    , /*decltype(_impl_._packed_int64_cached_byte_size_)*/{0}
    , decltype(_impl_.packed_uint32_){arena}
    , /*decltype(_impl_._packed_uint32_cached_byte_size_)*/{0}
    , decltype(_impl_.packed_uint64_){arena}
    , /*decltype(_impl_._packed_uint64_cached_byte_size_)*/{0}
    , decltype(_impl_.packed_sint32_){arena}
    , /*decltype(_impl_._packed_sint32_cached_byte_size_)*/{0}
    , decltype(_impl_.packed_sint64_){arena}
    , /*decltype(_impl_._packed_sint64_cached_byte_size_)*/{0}
    , decltype(_impl_.packed_fixed32_){arena}
    , decltype(_impl_.packed_fixed64_){arena}
    , decltype(_impl_.packed_sfixed32_){arena}
    , decltype(_impl_.packed_sfixed64_){arena}
    , decltype(_impl_.packed_float_){arena}
    , decltype(_impl_.packed_double_){arena}
    , decltype(_impl_.packed_bool_){arena}
    , decltype(_impl_.packed_nested_enum_){arena}
    , /*decltype(_impl_._packed_nested_enum_cached_byte_size_)*/{0}
    , decltype(_impl_.unpacked_int32_){arena}
    , decltype(_impl_.unpacked_int64_){arena}
    , decltype(_impl_.unpacked_uint32_){arena}
    , decltype(_impl_.unpacked_uint64_){arena}
    , decltype(_impl_.unpacked_sint32_){arena}
    , decltype(_impl_.unpacked_sint64_){arena}
    , decltype(_impl_.unpacked_fixed32_){arena}
    , decltype(_impl_.unpacked_fixed64_){arena}
    , decltype(_impl_.unpacked_sfixed32_){arena}
    , decltype(_impl_.unpacked_sfixed64_){arena}
    , decltype(_impl_.unpacked_float_){arena}
    , decltype(_impl_.unpacked_double_){arena}
    , decltype(_impl_.unpacked_bool_){arena}
    , decltype(_impl_.unpacked_nested_enum_){arena}
    , decltype(_impl_.optional_string_){}
    , decltype(_impl_.optional_bytes_){}
    , decltype(_impl_.optional_string_piece_){}
    , decltype(_impl_.optional_cord_){}
    , decltype(_impl_.default_string_){}
    , decltype(_impl_.default_bytes_){}
    , decltype(_impl_.optional_nested_message_){nullptr}
    , decltype(_impl_.optional_foreign_message_){nullptr}
    , decltype(_impl_.recursive_message_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.optional_int64_){int64_t{0}}
    , decltype(_impl_.optional_int32_){0}
    , decltype(_impl_.optional_uint32_){0u}
    , decltype(_impl_.optional_uint64_){uint64_t{0u}}
    , decltype(_impl_.optional_sint64_){int64_t{0}}
    , decltype(_impl_.optional_sint32_){0}
    , decltype(_impl_.optional_fixed32_){0u}
    , decltype(_impl_.optional_fixed64_){uint64_t{0u}}
    , decltype(_impl_.optional_sfixed64_){int64_t{0}}
    , decltype(_impl_.optional_sfixed32_){0}
    , decltype(_impl_.optional_float_){0}
    , decltype(_impl_.optional_double_){0}
    , decltype(_impl_.optional_bool_){false}
    , decltype(_impl_.optional_nested_enum_){0}
    , decltype(_impl_.optional_foreign_enum_){0}
    , decltype(_impl_.fieldname1_){0}
    , decltype(_impl_.field_name2_){0}
    , decltype(_impl_._field_name3_){0}
    , decltype(_impl_.field__name4__){0}
    , decltype(_impl_.field0name5_){0}
    , decltype(_impl_.field_0_name6_){0}
    , decltype(_impl_.fieldname7_){0}
    , decltype(_impl_.fieldname8_){0}
    , decltype(_impl_.field_name9_){0}
    , decltype(_impl_.field_name10_){0}
    , decltype(_impl_.field_name11_){0}
    , decltype(_impl_.field_name12_){0}
    , decltype(_impl_.__field_name13_){0}
    , decltype(_impl_.__field_name14_){0}
    , decltype(_impl_.field__name15_){0}
    , decltype(_impl_.field__name16_){0}
    , decltype(_impl_.field_name17___){0}
    , decltype(_impl_.field_name18___){0}
    , decltype(_impl_.default_bool_){true}
    , decltype(_impl_.default_int64_){int64_t{-9123456789123456789}}
    , decltype(_impl_.default_int32_){-123456789}
    , decltype(_impl_.default_uint32_){2123456789u}
    , decltype(_impl_.default_uint64_){uint64_t{10123456789123456789u}}
    , decltype(_impl_.default_sint64_){int64_t{-9123456789123456789}}
    , decltype(_impl_.default_sint32_){-123456789}
    , decltype(_impl_.default_fixed32_){2123456789u}
    , decltype(_impl_.default_fixed64_){uint64_t{10123456789123456789u}}
    , decltype(_impl_.default_sfixed64_){int64_t{-9123456789123456789}}
    , decltype(_impl_.default_sfixed32_){-123456789}
    , decltype(_impl_.default_float_){9e+009f}
    , decltype(_impl_.default_double_){7e+022}
    , decltype(_impl_.oneof_field_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.optional_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optional_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optional_string_piece_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_string_piece_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.optional_cord_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_cord_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.default_string_.InitDefault();
  _impl_.default_bytes_.InitDefault();
  clear_has_oneof_field();
}

TestAllTypesProto2::~TestAllTypesProto2() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto2.TestAllTypesProto2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TestAllTypesProto2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  _impl_.repeated_int32_.~RepeatedField();
  _impl_.repeated_int64_.~RepeatedField();
  _impl_.repeated_uint32_.~RepeatedField();
  _impl_.repeated_uint64_.~RepeatedField();
  _impl_.repeated_sint32_.~RepeatedField();
  _impl_.repeated_sint64_.~RepeatedField();
  _impl_.repeated_fixed32_.~RepeatedField();
  _impl_.repeated_fixed64_.~RepeatedField();
  _impl_.repeated_sfixed32_.~RepeatedField();
  _impl_.repeated_sfixed64_.~RepeatedField();
  _impl_.repeated_float_.~RepeatedField();
  _impl_.repeated_double_.~RepeatedField();
  _impl_.repeated_bool_.~RepeatedField();
  _impl_.repeated_string_.~RepeatedPtrField();
  _impl_.repeated_bytes_.~RepeatedPtrField();
  _impl_.repeated_nested_message_.~RepeatedPtrField();
  _impl_.repeated_foreign_message_.~RepeatedPtrField();
  _impl_.repeated_nested_enum_.~RepeatedField();
  _impl_.repeated_foreign_enum_.~RepeatedField();
  _impl_.repeated_string_piece_.~RepeatedPtrField();
  _impl_.repeated_cord_.~RepeatedPtrField();
  _impl_.map_int32_int32_.Destruct();
  _impl_.map_int32_int32_.~MapField();
  _impl_.map_int64_int64_.Destruct();
  _impl_.map_int64_int64_.~MapField();
  _impl_.map_uint32_uint32_.Destruct();
  _impl_.map_uint32_uint32_.~MapField();
  _impl_.map_uint64_uint64_.Destruct();
  _impl_.map_uint64_uint64_.~MapField();
  _impl_.map_sint32_sint32_.Destruct();
  _impl_.map_sint32_sint32_.~MapField();
  _impl_.map_sint64_sint64_.Destruct();
  _impl_.map_sint64_sint64_.~MapField();
  _impl_.map_fixed32_fixed32_.Destruct();
  _impl_.map_fixed32_fixed32_.~MapField();
  _impl_.map_fixed64_fixed64_.Destruct();
  _impl_.map_fixed64_fixed64_.~MapField();
  _impl_.map_sfixed32_sfixed32_.Destruct();
  _impl_.map_sfixed32_sfixed32_.~MapField();
  _impl_.map_sfixed64_sfixed64_.Destruct();
  _impl_.map_sfixed64_sfixed64_.~MapField();
  _impl_.map_int32_float_.Destruct();
  _impl_.map_int32_float_.~MapField();
  _impl_.map_int32_double_.Destruct();
  _impl_.map_int32_double_.~MapField();
  _impl_.map_bool_bool_.Destruct();
  _impl_.map_bool_bool_.~MapField();
  _impl_.map_string_string_.Destruct();
  _impl_.map_string_string_.~MapField();
  _impl_.map_string_bytes_.Destruct();
  _impl_.map_string_bytes_.~MapField();
  _impl_.map_string_nested_message_.Destruct();
  _impl_.map_string_nested_message_.~MapField();
  _impl_.map_string_foreign_message_.Destruct();
  _impl_.map_string_foreign_message_.~MapField();
  _impl_.map_string_nested_enum_.Destruct();
  _impl_.map_string_nested_enum_.~MapField();
  _impl_.map_string_foreign_enum_.Destruct();
  _impl_.map_string_foreign_enum_.~MapField();
  _impl_.packed_int32_.~RepeatedField();
  _impl_.packed_int64_.~RepeatedField();
  _impl_.packed_uint32_.~RepeatedField();
  _impl_.packed_uint64_.~RepeatedField();
  _impl_.packed_sint32_.~RepeatedField();
  _impl_.packed_sint64_.~RepeatedField();
  _impl_.packed_fixed32_.~RepeatedField();
  _impl_.packed_fixed64_.~RepeatedField();
  _impl_.packed_sfixed32_.~RepeatedField();
  _impl_.packed_sfixed64_.~RepeatedField();
  _impl_.packed_float_.~RepeatedField();
  _impl_.packed_double_.~RepeatedField();
  _impl_.packed_bool_.~RepeatedField();
  _impl_.packed_nested_enum_.~RepeatedField();
  _impl_.unpacked_int32_.~RepeatedField();
  _impl_.unpacked_int64_.~RepeatedField();
  _impl_.unpacked_uint32_.~RepeatedField();
  _impl_.unpacked_uint64_.~RepeatedField();
  _impl_.unpacked_sint32_.~RepeatedField();
  _impl_.unpacked_sint64_.~RepeatedField();
  _impl_.unpacked_fixed32_.~RepeatedField();
  _impl_.unpacked_fixed64_.~RepeatedField();
  _impl_.unpacked_sfixed32_.~RepeatedField();
  _impl_.unpacked_sfixed64_.~RepeatedField();
  _impl_.unpacked_float_.~RepeatedField();
  _impl_.unpacked_double_.~RepeatedField();
  _impl_.unpacked_bool_.~RepeatedField();
  _impl_.unpacked_nested_enum_.~RepeatedField();
  _impl_.optional_string_.Destroy();
  _impl_.optional_bytes_.Destroy();
  _impl_.optional_string_piece_.Destroy();
  _impl_.optional_cord_.Destroy();
  _impl_.default_string_.Destroy();
  _impl_.default_bytes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.optional_nested_message_;
  if (this != internal_default_instance()) delete _impl_.optional_foreign_message_;
  if (this != internal_default_instance()) delete _impl_.recursive_message_;
  if (this != internal_default_instance()) delete _impl_.data_;
  if (has_oneof_field()) {
    clear_oneof_field();
  }
}

void TestAllTypesProto2::ArenaDtor(void* object) {
  TestAllTypesProto2* _this = reinterpret_cast< TestAllTypesProto2* >(object);
  _this->_impl_.map_int32_int32_.Destruct();
  _this->_impl_.map_int64_int64_.Destruct();
  _this->_impl_.map_uint32_uint32_.Destruct();
  _this->_impl_.map_uint64_uint64_.Destruct();
  _this->_impl_.map_sint32_sint32_.Destruct();
  _this->_impl_.map_sint64_sint64_.Destruct();
  _this->_impl_.map_fixed32_fixed32_.Destruct();
  _this->_impl_.map_fixed64_fixed64_.Destruct();
  _this->_impl_.map_sfixed32_sfixed32_.Destruct();
  _this->_impl_.map_sfixed64_sfixed64_.Destruct();
  _this->_impl_.map_int32_float_.Destruct();
  _this->_impl_.map_int32_double_.Destruct();
  _this->_impl_.map_bool_bool_.Destruct();
  _this->_impl_.map_string_string_.Destruct();
  _this->_impl_.map_string_bytes_.Destruct();
  _this->_impl_.map_string_nested_message_.Destruct();
  _this->_impl_.map_string_foreign_message_.Destruct();
  _this->_impl_.map_string_nested_enum_.Destruct();
  _this->_impl_.map_string_foreign_enum_.Destruct();
}
void TestAllTypesProto2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestAllTypesProto2::clear_oneof_field() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_test_messages.proto2.TestAllTypesProto2)
  switch (oneof_field_case()) {
    case kOneofUint32: {
      // No need to clear
      break;
    }
    case kOneofNestedMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.oneof_field_.oneof_nested_message_;
      }
      break;
    }
    case kOneofString: {
      _impl_.oneof_field_.oneof_string_.Destroy();
      break;
    }
    case kOneofBytes: {
      _impl_.oneof_field_.oneof_bytes_.Destroy();
      break;
    }
    case kOneofBool: {
      // No need to clear
      break;
    }
    case kOneofUint64: {
      // No need to clear
      break;
    }
    case kOneofFloat: {
      // No need to clear
      break;
    }
    case kOneofDouble: {
      // No need to clear
      break;
    }
    case kOneofEnum: {
      // No need to clear
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ONEOF_FIELD_NOT_SET;
}


void TestAllTypesProto2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto2.TestAllTypesProto2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  _impl_.repeated_int32_.Clear();
  _impl_.repeated_int64_.Clear();
  _impl_.repeated_uint32_.Clear();
  _impl_.repeated_uint64_.Clear();
  _impl_.repeated_sint32_.Clear();
  _impl_.repeated_sint64_.Clear();
  _impl_.repeated_fixed32_.Clear();
  _impl_.repeated_fixed64_.Clear();
  _impl_.repeated_sfixed32_.Clear();
  _impl_.repeated_sfixed64_.Clear();
  _impl_.repeated_float_.Clear();
  _impl_.repeated_double_.Clear();
  _impl_.repeated_bool_.Clear();
  _impl_.repeated_string_.Clear();
  _impl_.repeated_bytes_.Clear();
  _impl_.repeated_nested_message_.Clear();
  _impl_.repeated_foreign_message_.Clear();
  _impl_.repeated_nested_enum_.Clear();
  _impl_.repeated_foreign_enum_.Clear();
  _impl_.repeated_string_piece_.Clear();
  _impl_.repeated_cord_.Clear();
  _impl_.map_int32_int32_.Clear();
  _impl_.map_int64_int64_.Clear();
  _impl_.map_uint32_uint32_.Clear();
  _impl_.map_uint64_uint64_.Clear();
  _impl_.map_sint32_sint32_.Clear();
  _impl_.map_sint64_sint64_.Clear();
  _impl_.map_fixed32_fixed32_.Clear();
  _impl_.map_fixed64_fixed64_.Clear();
  _impl_.map_sfixed32_sfixed32_.Clear();
  _impl_.map_sfixed64_sfixed64_.Clear();
  _impl_.map_int32_float_.Clear();
  _impl_.map_int32_double_.Clear();
  _impl_.map_bool_bool_.Clear();
  _impl_.map_string_string_.Clear();
  _impl_.map_string_bytes_.Clear();
  _impl_.map_string_nested_message_.Clear();
  _impl_.map_string_foreign_message_.Clear();
  _impl_.map_string_nested_enum_.Clear();
  _impl_.map_string_foreign_enum_.Clear();
  _impl_.packed_int32_.Clear();
  _impl_.packed_int64_.Clear();
  _impl_.packed_uint32_.Clear();
  _impl_.packed_uint64_.Clear();
  _impl_.packed_sint32_.Clear();
  _impl_.packed_sint64_.Clear();
  _impl_.packed_fixed32_.Clear();
  _impl_.packed_fixed64_.Clear();
  _impl_.packed_sfixed32_.Clear();
  _impl_.packed_sfixed64_.Clear();
  _impl_.packed_float_.Clear();
  _impl_.packed_double_.Clear();
  _impl_.packed_bool_.Clear();
  _impl_.packed_nested_enum_.Clear();
  _impl_.unpacked_int32_.Clear();
  _impl_.unpacked_int64_.Clear();
  _impl_.unpacked_uint32_.Clear();
  _impl_.unpacked_uint64_.Clear();
  _impl_.unpacked_sint32_.Clear();
  _impl_.unpacked_sint64_.Clear();
  _impl_.unpacked_fixed32_.Clear();
  _impl_.unpacked_fixed64_.Clear();
  _impl_.unpacked_sfixed32_.Clear();
  _impl_.unpacked_sfixed64_.Clear();
  _impl_.unpacked_float_.Clear();
  _impl_.unpacked_double_.Clear();
  _impl_.unpacked_bool_.Clear();
  _impl_.unpacked_nested_enum_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.optional_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.optional_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.optional_string_piece_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.optional_cord_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.default_string_.ClearToDefault(::protobuf_test_messages::proto2::TestAllTypesProto2::Impl_::_i_give_permission_to_break_this_code_default_default_string_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000020u) {
      _impl_.default_bytes_.ClearToDefault(::protobuf_test_messages::proto2::TestAllTypesProto2::Impl_::_i_give_permission_to_break_this_code_default_default_bytes_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.optional_nested_message_ != nullptr);
      _impl_.optional_nested_message_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.optional_foreign_message_ != nullptr);
      _impl_.optional_foreign_message_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.recursive_message_ != nullptr);
      _impl_.recursive_message_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&_impl_.optional_int64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.optional_sint32_) -
        reinterpret_cast<char*>(&_impl_.optional_int64_)) + sizeof(_impl_.optional_sint32_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.optional_fixed32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.optional_nested_enum_) -
        reinterpret_cast<char*>(&_impl_.optional_fixed32_)) + sizeof(_impl_.optional_nested_enum_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.optional_foreign_enum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fieldname7_) -
        reinterpret_cast<char*>(&_impl_.optional_foreign_enum_)) + sizeof(_impl_.fieldname7_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.fieldname8_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.field__name15_) -
        reinterpret_cast<char*>(&_impl_.fieldname8_)) + sizeof(_impl_.field__name15_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.field__name16_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.field_name18___) -
        reinterpret_cast<char*>(&_impl_.field__name16_)) + sizeof(_impl_.field_name18___));
    _impl_.default_bool_ = true;
    _impl_.default_int64_ = int64_t{-9123456789123456789};
    _impl_.default_int32_ = -123456789;
    _impl_.default_uint32_ = 2123456789u;
    _impl_.default_uint64_ = uint64_t{10123456789123456789u};
  }
  if (cached_has_bits & 0x00ff0000u) {
    _impl_.default_sint64_ = int64_t{-9123456789123456789};
    _impl_.default_sint32_ = -123456789;
    _impl_.default_fixed32_ = 2123456789u;
    _impl_.default_fixed64_ = uint64_t{10123456789123456789u};
    _impl_.default_sfixed64_ = int64_t{-9123456789123456789};
    _impl_.default_sfixed32_ = -123456789;
    _impl_.default_float_ = 9e+009f;
    _impl_.default_double_ = 7e+022;
  }
  clear_oneof_field();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestAllTypesProto2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 optional_int32 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_optional_int32(&_impl_._has_bits_);
          _impl_.optional_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 optional_int64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_optional_int64(&_impl_._has_bits_);
          _impl_.optional_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 optional_uint32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_optional_uint32(&_impl_._has_bits_);
          _impl_.optional_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 optional_uint64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_optional_uint64(&_impl_._has_bits_);
          _impl_.optional_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 optional_sint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_optional_sint32(&_impl_._has_bits_);
          _impl_.optional_sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint64 optional_sint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_optional_sint64(&_impl_._has_bits_);
          _impl_.optional_sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 optional_fixed32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_optional_fixed32(&_impl_._has_bits_);
          _impl_.optional_fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 optional_fixed64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_optional_fixed64(&_impl_._has_bits_);
          _impl_.optional_fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional sfixed32 optional_sfixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_optional_sfixed32(&_impl_._has_bits_);
          _impl_.optional_sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // optional sfixed64 optional_sfixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_optional_sfixed64(&_impl_._has_bits_);
          _impl_.optional_sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // optional float optional_float = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_optional_float(&_impl_._has_bits_);
          _impl_.optional_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double optional_double = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_optional_double(&_impl_._has_bits_);
          _impl_.optional_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool optional_bool = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_optional_bool(&_impl_._has_bits_);
          _impl_.optional_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string optional_string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_optional_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_test_messages.proto2.TestAllTypesProto2.optional_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes optional_bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_optional_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage optional_nested_message = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_nested_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_test_messages.proto2.ForeignMessageProto2 optional_foreign_message = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_foreign_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum optional_nested_enum = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid(val))) {
            _internal_set_optional_nested_enum(static_cast<::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_test_messages.proto2.ForeignEnumProto2 optional_foreign_enum = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_test_messages::proto2::ForeignEnumProto2_IsValid(val))) {
            _internal_set_optional_foreign_enum(static_cast<::protobuf_test_messages::proto2::ForeignEnumProto2>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_optional_string_piece();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_test_messages.proto2.TestAllTypesProto2.optional_string_piece");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string optional_cord = 25 [ctype = CORD];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_optional_cord();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_test_messages.proto2.TestAllTypesProto2.optional_cord");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_test_messages.proto2.TestAllTypesProto2 recursive_message = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_recursive_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 repeated_int32 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<248>(ptr));
        } else if (static_cast<uint8_t>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 repeated_int64 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<256>(ptr));
        } else if (static_cast<uint8_t>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_repeated_int64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 repeated_uint32 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<264>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_repeated_uint32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 repeated_uint64 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<272>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_repeated_uint64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint32 repeated_sint32 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<280>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_repeated_sint32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint64 repeated_sint64 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<288>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_repeated_sint64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed32 repeated_fixed32 = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
            ptr += sizeof(uint32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<301>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_repeated_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 repeated_fixed64 = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<305>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_repeated_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sfixed32 repeated_sfixed32 = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr));
            ptr += sizeof(int32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<317>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_repeated_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sfixed64 repeated_sfixed64 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr));
            ptr += sizeof(int64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<321>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_repeated_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float repeated_float = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<333>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_repeated_float(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double repeated_double = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<337>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_repeated_double(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool repeated_bool = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<344>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_repeated_bool(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string repeated_string = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_string();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<354>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes repeated_bytes = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_bytes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<362>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage repeated_nested_message = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_nested_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_test_messages.proto2.ForeignMessageProto2 repeated_foreign_message = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_foreign_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<394>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum repeated_nested_enum = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid(val))) {
              _internal_add_repeated_nested_enum(static_cast<::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(51, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<408>(ptr));
        } else if (static_cast<uint8_t>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_repeated_nested_enum(), ptr, ctx, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid, &_internal_metadata_, 51);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_test_messages.proto2.ForeignEnumProto2 repeated_foreign_enum = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_test_messages::proto2::ForeignEnumProto2_IsValid(val))) {
              _internal_add_repeated_foreign_enum(static_cast<::protobuf_test_messages::proto2::ForeignEnumProto2>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(52, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<416>(ptr));
        } else if (static_cast<uint8_t>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_repeated_foreign_enum(), ptr, ctx, ::protobuf_test_messages::proto2::ForeignEnumProto2_IsValid, &_internal_metadata_, 52);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_string_piece();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string_piece");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<434>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string repeated_cord = 55 [ctype = CORD];
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_cord();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "protobuf_test_messages.proto2.TestAllTypesProto2.repeated_cord");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<442>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, int32> map_int32_int32 = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.map_int32_int32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<450>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int64, int64> map_int64_int64 = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.map_int64_int64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<458>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> map_uint32_uint32 = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.map_uint32_uint32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<466>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint64, uint64> map_uint64_uint64 = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.map_uint64_uint64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<474>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<sint32, sint32> map_sint32_sint32 = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.map_sint32_sint32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<482>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<sint64, sint64> map_sint64_sint64 = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.map_sint64_sint64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<490>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<fixed32, fixed32> map_fixed32_fixed32 = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.map_fixed32_fixed32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<498>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<fixed64, fixed64> map_fixed64_fixed64 = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.map_fixed64_fixed64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<506>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.map_sfixed32_sfixed32_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<514>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.map_sfixed64_sfixed64_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<522>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, float> map_int32_float = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.map_int32_float_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<530>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, double> map_int32_double = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.map_int32_double_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<538>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<bool, bool> map_bool_bool = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.map_bool_bool_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<546>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> map_string_string = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.map_string_string_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<554>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> map_string_bytes = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.map_string_bytes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<562>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage> map_string_nested_message = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.map_string_nested_message_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<570>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .protobuf_test_messages.proto2.ForeignMessageProto2> map_string_foreign_message = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.map_string_foreign_message_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<578>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum> map_string_nested_enum = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&_impl_.map_string_nested_enum_, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid, 73, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<586>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .protobuf_test_messages.proto2.ForeignEnumProto2> map_string_foreign_enum = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto object = ::PROTOBUF_NAMESPACE_ID::internal::InitEnumParseWrapper<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&_impl_.map_string_foreign_enum_, ::protobuf_test_messages::proto2::ForeignEnumProto2_IsValid, 74, &_internal_metadata_);
            ptr = ctx->ParseMessage(&object, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<594>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 packed_int32 = 75 [packed = true];
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_packed_int32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_packed_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 packed_int64 = 76 [packed = true];
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_packed_int64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 96) {
          _internal_add_packed_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 packed_uint32 = 77 [packed = true];
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_packed_uint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 104) {
          _internal_add_packed_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 packed_uint64 = 78 [packed = true];
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_packed_uint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 112) {
          _internal_add_packed_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint32 packed_sint32 = 79 [packed = true];
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_packed_sint32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 120) {
          _internal_add_packed_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint64 packed_sint64 = 80 [packed = true];
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_packed_sint64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 128) {
          _internal_add_packed_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed32 packed_fixed32 = 81 [packed = true];
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_packed_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 141) {
          _internal_add_packed_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 packed_fixed64 = 82 [packed = true];
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_packed_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 145) {
          _internal_add_packed_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated sfixed32 packed_sfixed32 = 83 [packed = true];
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_packed_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 157) {
          _internal_add_packed_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr));
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // repeated sfixed64 packed_sfixed64 = 84 [packed = true];
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_packed_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 161) {
          _internal_add_packed_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr));
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated float packed_float = 85 [packed = true];
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_packed_float(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 173) {
          _internal_add_packed_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated double packed_double = 86 [packed = true];
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_packed_double(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 177) {
          _internal_add_packed_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated bool packed_bool = 87 [packed = true];
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_packed_bool(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 184) {
          _internal_add_packed_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum packed_nested_enum = 88 [packed = true];
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_packed_nested_enum(), ptr, ctx, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid, &_internal_metadata_, 88);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 192) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid(val))) {
            _internal_add_packed_nested_enum(static_cast<::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(88, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated int32 unpacked_int32 = 89 [packed = false];
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<712>(ptr));
        } else if (static_cast<uint8_t>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_unpacked_int32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 unpacked_int64 = 90 [packed = false];
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<720>(ptr));
        } else if (static_cast<uint8_t>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_unpacked_int64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 unpacked_uint32 = 91 [packed = false];
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<728>(ptr));
        } else if (static_cast<uint8_t>(tag) == 218) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_unpacked_uint32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 unpacked_uint64 = 92 [packed = false];
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<736>(ptr));
        } else if (static_cast<uint8_t>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_unpacked_uint64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint32 unpacked_sint32 = 93 [packed = false];
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<744>(ptr));
        } else if (static_cast<uint8_t>(tag) == 234) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_unpacked_sint32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint64 unpacked_sint64 = 94 [packed = false];
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<752>(ptr));
        } else if (static_cast<uint8_t>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_unpacked_sint64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed32 unpacked_fixed32 = 95 [packed = false];
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 253)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
            ptr += sizeof(uint32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<765>(ptr));
        } else if (static_cast<uint8_t>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_unpacked_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 unpacked_fixed64 = 96 [packed = false];
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<769>(ptr));
        } else if (static_cast<uint8_t>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_unpacked_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sfixed32 unpacked_sfixed32 = 97 [packed = false];
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr));
            ptr += sizeof(int32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<781>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_unpacked_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sfixed64 unpacked_sfixed64 = 98 [packed = false];
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr));
            ptr += sizeof(int64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<785>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_unpacked_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float unpacked_float = 99 [packed = false];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<797>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_unpacked_float(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double unpacked_double = 100 [packed = false];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<801>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_unpacked_double(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool unpacked_bool = 101 [packed = false];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_unpacked_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<808>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_unpacked_bool(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum unpacked_nested_enum = 102 [packed = false];
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid(val))) {
              _internal_add_unpacked_nested_enum(static_cast<::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(102, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<816>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_unpacked_nested_enum(), ptr, ctx, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid, &_internal_metadata_, 102);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 oneof_uint32 = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _internal_set_oneof_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage oneof_nested_message = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_oneof_nested_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string oneof_string = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_oneof_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_test_messages.proto2.TestAllTypesProto2.oneof_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // bytes oneof_bytes = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_oneof_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool oneof_bool = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _internal_set_oneof_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 oneof_uint64 = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _internal_set_oneof_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float oneof_float = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _internal_set_oneof_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double oneof_double = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _internal_set_oneof_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum oneof_enum = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum_IsValid(val))) {
            _internal_set_oneof_enum(static_cast<::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(119, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional group Data = 201 { ... };
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 75)) {
          ptr = ctx->ParseGroup(_internal_mutable_data(), ptr, 1611);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 default_int32 = 241 [default = -123456789];
      case 241:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_default_int32(&_impl_._has_bits_);
          _impl_.default_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 default_int64 = 242 [default = -9123456789123456789];
      case 242:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_default_int64(&_impl_._has_bits_);
          _impl_.default_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 default_uint32 = 243 [default = 2123456789];
      case 243:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_default_uint32(&_impl_._has_bits_);
          _impl_.default_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 default_uint64 = 244 [default = 10123456789123456789];
      case 244:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_default_uint64(&_impl_._has_bits_);
          _impl_.default_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 default_sint32 = 245 [default = -123456789];
      case 245:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_default_sint32(&_impl_._has_bits_);
          _impl_.default_sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint64 default_sint64 = 246 [default = -9123456789123456789];
      case 246:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_default_sint64(&_impl_._has_bits_);
          _impl_.default_sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 default_fixed32 = 247 [default = 2123456789];
      case 247:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _Internal::set_has_default_fixed32(&_impl_._has_bits_);
          _impl_.default_fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 default_fixed64 = 248 [default = 10123456789123456789];
      case 248:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _Internal::set_has_default_fixed64(&_impl_._has_bits_);
          _impl_.default_fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional sfixed32 default_sfixed32 = 249 [default = -123456789];
      case 249:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _Internal::set_has_default_sfixed32(&_impl_._has_bits_);
          _impl_.default_sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // optional sfixed64 default_sfixed64 = 250 [default = -9123456789123456789];
      case 250:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _Internal::set_has_default_sfixed64(&_impl_._has_bits_);
          _impl_.default_sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // optional float default_float = 251 [default = 9e+009];
      case 251:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          _Internal::set_has_default_float(&_impl_._has_bits_);
          _impl_.default_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double default_double = 252 [default = 7e+022];
      case 252:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _Internal::set_has_default_double(&_impl_._has_bits_);
          _impl_.default_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool default_bool = 253 [default = true];
      case 253:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_default_bool(&_impl_._has_bits_);
          _impl_.default_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string default_string = 254 [default = "Rosebud"];
      case 254:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_default_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_test_messages.proto2.TestAllTypesProto2.default_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes default_bytes = 255 [default = "joshua"];
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_default_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 fieldname1 = 401;
      case 401:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_fieldname1(&_impl_._has_bits_);
          _impl_.fieldname1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 field_name2 = 402;
      case 402:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_field_name2(&_impl_._has_bits_);
          _impl_.field_name2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 _field_name3 = 403;
      case 403:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has__field_name3(&_impl_._has_bits_);
          _impl_._field_name3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 field__name4_ = 404;
      case 404:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_field__name4_(&_impl_._has_bits_);
          _impl_.field__name4__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 field0name5 = 405;
      case 405:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_field0name5(&_impl_._has_bits_);
          _impl_.field0name5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 field_0_name6 = 406;
      case 406:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_field_0_name6(&_impl_._has_bits_);
          _impl_.field_0_name6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 fieldName7 = 407;
      case 407:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_fieldname7(&_impl_._has_bits_);
          _impl_.fieldname7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 FieldName8 = 408;
      case 408:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_fieldname8(&_impl_._has_bits_);
          _impl_.fieldname8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 field_Name9 = 409;
      case 409:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_field_name9(&_impl_._has_bits_);
          _impl_.field_name9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 Field_Name10 = 410;
      case 410:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_field_name10(&_impl_._has_bits_);
          _impl_.field_name10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 FIELD_NAME11 = 411;
      case 411:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_field_name11(&_impl_._has_bits_);
          _impl_.field_name11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 FIELD_name12 = 412;
      case 412:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_field_name12(&_impl_._has_bits_);
          _impl_.field_name12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 __field_name13 = 413;
      case 413:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has___field_name13(&_impl_._has_bits_);
          _impl_.__field_name13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 __Field_name14 = 414;
      case 414:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has___field_name14(&_impl_._has_bits_);
          _impl_.__field_name14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 field__name15 = 415;
      case 415:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_field__name15(&_impl_._has_bits_);
          _impl_.field__name15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 field__Name16 = 416;
      case 416:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_field__name16(&_impl_._has_bits_);
          _impl_.field__name16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 field_name17__ = 417;
      case 417:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_field_name17__(&_impl_._has_bits_);
          _impl_.field_name17___ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 Field_name18__ = 418;
      case 418:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_field_name18__(&_impl_._has_bits_);
          _impl_.field_name18___ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((960u <= tag && tag < 1608u)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestAllTypesProto2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto2.TestAllTypesProto2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 optional_int32 = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_optional_int32(), target);
  }

  // optional int64 optional_int64 = 2;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_optional_int64(), target);
  }

  // optional uint32 optional_uint32 = 3;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_optional_uint32(), target);
  }

  // optional uint64 optional_uint64 = 4;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_optional_uint64(), target);
  }

  // optional sint32 optional_sint32 = 5;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_optional_sint32(), target);
  }

  // optional sint64 optional_sint64 = 6;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(6, this->_internal_optional_sint64(), target);
  }

  // optional fixed32 optional_fixed32 = 7;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(7, this->_internal_optional_fixed32(), target);
  }

  // optional fixed64 optional_fixed64 = 8;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(8, this->_internal_optional_fixed64(), target);
  }

  // optional sfixed32 optional_sfixed32 = 9;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(9, this->_internal_optional_sfixed32(), target);
  }

  // optional sfixed64 optional_sfixed64 = 10;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(10, this->_internal_optional_sfixed64(), target);
  }

  // optional float optional_float = 11;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_optional_float(), target);
  }

  // optional double optional_double = 12;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_optional_double(), target);
  }

  // optional bool optional_bool = 13;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_optional_bool(), target);
  }

  // optional string optional_string = 14;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_string().data(), static_cast<int>(this->_internal_optional_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_test_messages.proto2.TestAllTypesProto2.optional_string");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_optional_string(), target);
  }

  // optional bytes optional_bytes = 15;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_optional_bytes(), target);
  }

  // optional .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage optional_nested_message = 18;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::optional_nested_message(this),
        _Internal::optional_nested_message(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_test_messages.proto2.ForeignMessageProto2 optional_foreign_message = 19;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::optional_foreign_message(this),
        _Internal::optional_foreign_message(this).GetCachedSize(), target, stream);
  }

  // optional .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum optional_nested_enum = 21;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      21, this->_internal_optional_nested_enum(), target);
  }

  // optional .protobuf_test_messages.proto2.ForeignEnumProto2 optional_foreign_enum = 22;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      22, this->_internal_optional_foreign_enum(), target);
  }

  // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_string_piece().data(), static_cast<int>(this->_internal_optional_string_piece().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_test_messages.proto2.TestAllTypesProto2.optional_string_piece");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_optional_string_piece(), target);
  }

  // optional string optional_cord = 25 [ctype = CORD];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_cord().data(), static_cast<int>(this->_internal_optional_cord().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_test_messages.proto2.TestAllTypesProto2.optional_cord");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_optional_cord(), target);
  }

  // optional .protobuf_test_messages.proto2.TestAllTypesProto2 recursive_message = 27;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::recursive_message(this),
        _Internal::recursive_message(this).GetCachedSize(), target, stream);
  }

  // repeated int32 repeated_int32 = 31;
  for (int i = 0, n = this->_internal_repeated_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_repeated_int32(i), target);
  }

  // repeated int64 repeated_int64 = 32;
  for (int i = 0, n = this->_internal_repeated_int64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(32, this->_internal_repeated_int64(i), target);
  }

  // repeated uint32 repeated_uint32 = 33;
  for (int i = 0, n = this->_internal_repeated_uint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(33, this->_internal_repeated_uint32(i), target);
  }

  // repeated uint64 repeated_uint64 = 34;
  for (int i = 0, n = this->_internal_repeated_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(34, this->_internal_repeated_uint64(i), target);
  }

  // repeated sint32 repeated_sint32 = 35;
  for (int i = 0, n = this->_internal_repeated_sint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(35, this->_internal_repeated_sint32(i), target);
  }

  // repeated sint64 repeated_sint64 = 36;
  for (int i = 0, n = this->_internal_repeated_sint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(36, this->_internal_repeated_sint64(i), target);
  }

  // repeated fixed32 repeated_fixed32 = 37;
  for (int i = 0, n = this->_internal_repeated_fixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(37, this->_internal_repeated_fixed32(i), target);
  }

  // repeated fixed64 repeated_fixed64 = 38;
  for (int i = 0, n = this->_internal_repeated_fixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(38, this->_internal_repeated_fixed64(i), target);
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  for (int i = 0, n = this->_internal_repeated_sfixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(39, this->_internal_repeated_sfixed32(i), target);
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  for (int i = 0, n = this->_internal_repeated_sfixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(40, this->_internal_repeated_sfixed64(i), target);
  }

  // repeated float repeated_float = 41;
  for (int i = 0, n = this->_internal_repeated_float_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(41, this->_internal_repeated_float(i), target);
  }

  // repeated double repeated_double = 42;
  for (int i = 0, n = this->_internal_repeated_double_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(42, this->_internal_repeated_double(i), target);
  }

  // repeated bool repeated_bool = 43;
  for (int i = 0, n = this->_internal_repeated_bool_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(43, this->_internal_repeated_bool(i), target);
  }

  // repeated string repeated_string = 44;
  for (int i = 0, n = this->_internal_repeated_string_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_string(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string");
    target = stream->WriteString(44, s, target);
  }

  // repeated bytes repeated_bytes = 45;
  for (int i = 0, n = this->_internal_repeated_bytes_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_bytes(i);
    target = stream->WriteBytes(45, s, target);
  }

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage repeated_nested_message = 48;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_nested_message_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_nested_message(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(48, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf_test_messages.proto2.ForeignMessageProto2 repeated_foreign_message = 49;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repeated_foreign_message_size()); i < n; i++) {
    const auto& repfield = this->_internal_repeated_foreign_message(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(49, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum repeated_nested_enum = 51;
  for (int i = 0, n = this->_internal_repeated_nested_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        51, this->_internal_repeated_nested_enum(i), target);
  }

  // repeated .protobuf_test_messages.proto2.ForeignEnumProto2 repeated_foreign_enum = 52;
  for (int i = 0, n = this->_internal_repeated_foreign_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        52, this->_internal_repeated_foreign_enum(i), target);
  }

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  for (int i = 0, n = this->_internal_repeated_string_piece_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_string_piece(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_test_messages.proto2.TestAllTypesProto2.repeated_string_piece");
    target = stream->WriteString(54, s, target);
  }

  // repeated string repeated_cord = 55 [ctype = CORD];
  for (int i = 0, n = this->_internal_repeated_cord_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_cord(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_test_messages.proto2.TestAllTypesProto2.repeated_cord");
    target = stream->WriteString(55, s, target);
  }

  // map<int32, int32> map_int32_int32 = 56;
  if (!this->_internal_map_int32_int32().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = TestAllTypesProto2_MapInt32Int32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_int32_int32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(56, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(56, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int64, int64> map_int64_int64 = 57;
  if (!this->_internal_map_int64_int64().empty()) {
    using MapType = ::_pb::Map<int64_t, int64_t>;
    using WireHelper = TestAllTypesProto2_MapInt64Int64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_int64_int64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(57, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(57, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, uint32> map_uint32_uint32 = 58;
  if (!this->_internal_map_uint32_uint32().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_uint32_uint32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(58, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(58, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint64, uint64> map_uint64_uint64 = 59;
  if (!this->_internal_map_uint64_uint64().empty()) {
    using MapType = ::_pb::Map<uint64_t, uint64_t>;
    using WireHelper = TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_uint64_uint64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(59, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(59, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<sint32, sint32> map_sint32_sint32 = 60;
  if (!this->_internal_map_sint32_sint32().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_sint32_sint32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(60, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(60, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<sint64, sint64> map_sint64_sint64 = 61;
  if (!this->_internal_map_sint64_sint64().empty()) {
    using MapType = ::_pb::Map<int64_t, int64_t>;
    using WireHelper = TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_sint64_sint64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(61, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(61, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<fixed32, fixed32> map_fixed32_fixed32 = 62;
  if (!this->_internal_map_fixed32_fixed32().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_fixed32_fixed32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(62, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(62, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<fixed64, fixed64> map_fixed64_fixed64 = 63;
  if (!this->_internal_map_fixed64_fixed64().empty()) {
    using MapType = ::_pb::Map<uint64_t, uint64_t>;
    using WireHelper = TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_fixed64_fixed64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(63, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(63, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 64;
  if (!this->_internal_map_sfixed32_sfixed32().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_sfixed32_sfixed32();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(64, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(64, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 65;
  if (!this->_internal_map_sfixed64_sfixed64().empty()) {
    using MapType = ::_pb::Map<int64_t, int64_t>;
    using WireHelper = TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_sfixed64_sfixed64();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(65, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(65, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, float> map_int32_float = 66;
  if (!this->_internal_map_int32_float().empty()) {
    using MapType = ::_pb::Map<int32_t, float>;
    using WireHelper = TestAllTypesProto2_MapInt32FloatEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_int32_float();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(66, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(66, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, double> map_int32_double = 67;
  if (!this->_internal_map_int32_double().empty()) {
    using MapType = ::_pb::Map<int32_t, double>;
    using WireHelper = TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_int32_double();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(67, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(67, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<bool, bool> map_bool_bool = 68;
  if (!this->_internal_map_bool_bool().empty()) {
    using MapType = ::_pb::Map<bool, bool>;
    using WireHelper = TestAllTypesProto2_MapBoolBoolEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_bool_bool();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(68, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(68, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<string, string> map_string_string = 69;
  if (!this->_internal_map_string_string().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = TestAllTypesProto2_MapStringStringEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_string_string();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringStringEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringStringEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(69, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(69, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, bytes> map_string_bytes = 70;
  if (!this->_internal_map_string_bytes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = TestAllTypesProto2_MapStringBytesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_string_bytes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringBytesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(70, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(70, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage> map_string_nested_message = 71;
  if (!this->_internal_map_string_nested_message().empty()) {
    using MapType = ::_pb::Map<std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage>;
    using WireHelper = TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_string_nested_message();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringNestedMessageEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(71, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(71, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .protobuf_test_messages.proto2.ForeignMessageProto2> map_string_foreign_message = 72;
  if (!this->_internal_map_string_foreign_message().empty()) {
    using MapType = ::_pb::Map<std::string, ::protobuf_test_messages::proto2::ForeignMessageProto2>;
    using WireHelper = TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_string_foreign_message();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringForeignMessageEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(72, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(72, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum> map_string_nested_enum = 73;
  if (!this->_internal_map_string_nested_enum().empty()) {
    using MapType = ::_pb::Map<std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum>;
    using WireHelper = TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_string_nested_enum();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringNestedEnumEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(73, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(73, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .protobuf_test_messages.proto2.ForeignEnumProto2> map_string_foreign_enum = 74;
  if (!this->_internal_map_string_foreign_enum().empty()) {
    using MapType = ::_pb::Map<std::string, ::protobuf_test_messages::proto2::ForeignEnumProto2>;
    using WireHelper = TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_map_string_foreign_enum();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_test_messages.proto2.TestAllTypesProto2.MapStringForeignEnumEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(74, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(74, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated int32 packed_int32 = 75 [packed = true];
  {
    int byte_size = _impl_._packed_int32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          75, _internal_packed_int32(), byte_size, target);
    }
  }

  // repeated int64 packed_int64 = 76 [packed = true];
  {
    int byte_size = _impl_._packed_int64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          76, _internal_packed_int64(), byte_size, target);
    }
  }

  // repeated uint32 packed_uint32 = 77 [packed = true];
  {
    int byte_size = _impl_._packed_uint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          77, _internal_packed_uint32(), byte_size, target);
    }
  }

  // repeated uint64 packed_uint64 = 78 [packed = true];
  {
    int byte_size = _impl_._packed_uint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          78, _internal_packed_uint64(), byte_size, target);
    }
  }

  // repeated sint32 packed_sint32 = 79 [packed = true];
  {
    int byte_size = _impl_._packed_sint32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          79, _internal_packed_sint32(), byte_size, target);
    }
  }

  // repeated sint64 packed_sint64 = 80 [packed = true];
  {
    int byte_size = _impl_._packed_sint64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt64Packed(
          80, _internal_packed_sint64(), byte_size, target);
    }
  }

  // repeated fixed32 packed_fixed32 = 81 [packed = true];
  if (this->_internal_packed_fixed32_size() > 0) {
    target = stream->WriteFixedPacked(81, _internal_packed_fixed32(), target);
  }

  // repeated fixed64 packed_fixed64 = 82 [packed = true];
  if (this->_internal_packed_fixed64_size() > 0) {
    target = stream->WriteFixedPacked(82, _internal_packed_fixed64(), target);
  }

  // repeated sfixed32 packed_sfixed32 = 83 [packed = true];
  if (this->_internal_packed_sfixed32_size() > 0) {
    target = stream->WriteFixedPacked(83, _internal_packed_sfixed32(), target);
  }

  // repeated sfixed64 packed_sfixed64 = 84 [packed = true];
  if (this->_internal_packed_sfixed64_size() > 0) {
    target = stream->WriteFixedPacked(84, _internal_packed_sfixed64(), target);
  }

  // repeated float packed_float = 85 [packed = true];
  if (this->_internal_packed_float_size() > 0) {
    target = stream->WriteFixedPacked(85, _internal_packed_float(), target);
  }

  // repeated double packed_double = 86 [packed = true];
  if (this->_internal_packed_double_size() > 0) {
    target = stream->WriteFixedPacked(86, _internal_packed_double(), target);
  }

  // repeated bool packed_bool = 87 [packed = true];
  if (this->_internal_packed_bool_size() > 0) {
    target = stream->WriteFixedPacked(87, _internal_packed_bool(), target);
  }

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum packed_nested_enum = 88 [packed = true];
  {
    int byte_size = _impl_._packed_nested_enum_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          88, _impl_.packed_nested_enum_, byte_size, target);
    }
  }

  // repeated int32 unpacked_int32 = 89 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(89, this->_internal_unpacked_int32(i), target);
  }

  // repeated int64 unpacked_int64 = 90 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_int64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(90, this->_internal_unpacked_int64(i), target);
  }

  // repeated uint32 unpacked_uint32 = 91 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_uint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(91, this->_internal_unpacked_uint32(i), target);
  }

  // repeated uint64 unpacked_uint64 = 92 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(92, this->_internal_unpacked_uint64(i), target);
  }

  // repeated sint32 unpacked_sint32 = 93 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(93, this->_internal_unpacked_sint32(i), target);
  }

  // repeated sint64 unpacked_sint64 = 94 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(94, this->_internal_unpacked_sint64(i), target);
  }

  // repeated fixed32 unpacked_fixed32 = 95 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_fixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(95, this->_internal_unpacked_fixed32(i), target);
  }

  // repeated fixed64 unpacked_fixed64 = 96 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_fixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(96, this->_internal_unpacked_fixed64(i), target);
  }

  // repeated sfixed32 unpacked_sfixed32 = 97 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sfixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(97, this->_internal_unpacked_sfixed32(i), target);
  }

  // repeated sfixed64 unpacked_sfixed64 = 98 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_sfixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(98, this->_internal_unpacked_sfixed64(i), target);
  }

  // repeated float unpacked_float = 99 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_float_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(99, this->_internal_unpacked_float(i), target);
  }

  // repeated double unpacked_double = 100 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_double_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(100, this->_internal_unpacked_double(i), target);
  }

  // repeated bool unpacked_bool = 101 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_bool_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(101, this->_internal_unpacked_bool(i), target);
  }

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum unpacked_nested_enum = 102 [packed = false];
  for (int i = 0, n = this->_internal_unpacked_nested_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        102, this->_internal_unpacked_nested_enum(i), target);
  }

  switch (oneof_field_case()) {
    case kOneofUint32: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(111, this->_internal_oneof_uint32(), target);
      break;
    }
    case kOneofNestedMessage: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(112, _Internal::oneof_nested_message(this),
          _Internal::oneof_nested_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kOneofString: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_oneof_string().data(), static_cast<int>(this->_internal_oneof_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_test_messages.proto2.TestAllTypesProto2.oneof_string");
      target = stream->WriteStringMaybeAliased(
          113, this->_internal_oneof_string(), target);
      break;
    }
    case kOneofBytes: {
      target = stream->WriteBytesMaybeAliased(
          114, this->_internal_oneof_bytes(), target);
      break;
    }
    case kOneofBool: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(115, this->_internal_oneof_bool(), target);
      break;
    }
    case kOneofUint64: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(116, this->_internal_oneof_uint64(), target);
      break;
    }
    case kOneofFloat: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(117, this->_internal_oneof_float(), target);
      break;
    }
    case kOneofDouble: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(118, this->_internal_oneof_double(), target);
      break;
    }
    case kOneofEnum: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
        119, this->_internal_oneof_enum(), target);
      break;
    }
    default: ;
  }
  // Extension range [120, 201)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 120, 201, target, stream);

  // optional group Data = 201 { ... };
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        201, _Internal::data(this), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 default_int32 = 241 [default = -123456789];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(241, this->_internal_default_int32(), target);
  }

  // optional int64 default_int64 = 242 [default = -9123456789123456789];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(242, this->_internal_default_int64(), target);
  }

  // optional uint32 default_uint32 = 243 [default = 2123456789];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(243, this->_internal_default_uint32(), target);
  }

  // optional uint64 default_uint64 = 244 [default = 10123456789123456789];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(244, this->_internal_default_uint64(), target);
  }

  // optional sint32 default_sint32 = 245 [default = -123456789];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(245, this->_internal_default_sint32(), target);
  }

  // optional sint64 default_sint64 = 246 [default = -9123456789123456789];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(246, this->_internal_default_sint64(), target);
  }

  // optional fixed32 default_fixed32 = 247 [default = 2123456789];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(247, this->_internal_default_fixed32(), target);
  }

  // optional fixed64 default_fixed64 = 248 [default = 10123456789123456789];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(248, this->_internal_default_fixed64(), target);
  }

  // optional sfixed32 default_sfixed32 = 249 [default = -123456789];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(249, this->_internal_default_sfixed32(), target);
  }

  // optional sfixed64 default_sfixed64 = 250 [default = -9123456789123456789];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(250, this->_internal_default_sfixed64(), target);
  }

  // optional float default_float = 251 [default = 9e+009];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(251, this->_internal_default_float(), target);
  }

  // optional double default_double = 252 [default = 7e+022];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(252, this->_internal_default_double(), target);
  }

  // optional bool default_bool = 253 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(253, this->_internal_default_bool(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string default_string = 254 [default = "Rosebud"];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_default_string().data(), static_cast<int>(this->_internal_default_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_test_messages.proto2.TestAllTypesProto2.default_string");
    target = stream->WriteStringMaybeAliased(
        254, this->_internal_default_string(), target);
  }

  // optional bytes default_bytes = 255 [default = "joshua"];
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        255, this->_internal_default_bytes(), target);
  }

  // optional int32 fieldname1 = 401;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(401, this->_internal_fieldname1(), target);
  }

  // optional int32 field_name2 = 402;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(402, this->_internal_field_name2(), target);
  }

  // optional int32 _field_name3 = 403;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(403, this->_internal__field_name3(), target);
  }

  // optional int32 field__name4_ = 404;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(404, this->_internal_field__name4_(), target);
  }

  // optional int32 field0name5 = 405;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(405, this->_internal_field0name5(), target);
  }

  // optional int32 field_0_name6 = 406;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(406, this->_internal_field_0_name6(), target);
  }

  // optional int32 fieldName7 = 407;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(407, this->_internal_fieldname7(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 FieldName8 = 408;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(408, this->_internal_fieldname8(), target);
  }

  // optional int32 field_Name9 = 409;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(409, this->_internal_field_name9(), target);
  }

  // optional int32 Field_Name10 = 410;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(410, this->_internal_field_name10(), target);
  }

  // optional int32 FIELD_NAME11 = 411;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(411, this->_internal_field_name11(), target);
  }

  // optional int32 FIELD_name12 = 412;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(412, this->_internal_field_name12(), target);
  }

  // optional int32 __field_name13 = 413;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(413, this->_internal___field_name13(), target);
  }

  // optional int32 __Field_name14 = 414;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(414, this->_internal___field_name14(), target);
  }

  // optional int32 field__name15 = 415;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(415, this->_internal_field__name15(), target);
  }

  // optional int32 field__Name16 = 416;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(416, this->_internal_field__name16(), target);
  }

  // optional int32 field_name17__ = 417;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(417, this->_internal_field_name17__(), target);
  }

  // optional int32 Field_name18__ = 418;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(418, this->_internal_field_name18__(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto2.TestAllTypesProto2)
  return target;
}

size_t TestAllTypesProto2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto2.TestAllTypesProto2)
  size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 31;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.repeated_int32_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_int32_size());
    total_size += data_size;
  }

  // repeated int64 repeated_int64 = 32;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.repeated_int64_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_int64_size());
    total_size += data_size;
  }

  // repeated uint32 repeated_uint32 = 33;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.repeated_uint32_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_uint32_size());
    total_size += data_size;
  }

  // repeated uint64 repeated_uint64 = 34;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.repeated_uint64_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_uint64_size());
    total_size += data_size;
  }

  // repeated sint32 repeated_sint32 = 35;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt32Size(this->_impl_.repeated_sint32_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_sint32_size());
    total_size += data_size;
  }

  // repeated sint64 repeated_sint64 = 36;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt64Size(this->_impl_.repeated_sint64_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_sint64_size());
    total_size += data_size;
  }

  // repeated fixed32 repeated_fixed32 = 37;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_fixed32_size());
    total_size += data_size;
  }

  // repeated fixed64 repeated_fixed64 = 38;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_fixed64_size());
    total_size += data_size;
  }

  // repeated sfixed32 repeated_sfixed32 = 39;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_sfixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_sfixed32_size());
    total_size += data_size;
  }

  // repeated sfixed64 repeated_sfixed64 = 40;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_sfixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_sfixed64_size());
    total_size += data_size;
  }

  // repeated float repeated_float = 41;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_float_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_float_size());
    total_size += data_size;
  }

  // repeated double repeated_double = 42;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_double_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_double_size());
    total_size += data_size;
  }

  // repeated bool repeated_bool = 43;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_bool_size());
    size_t data_size = 1UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_bool_size());
    total_size += data_size;
  }

  // repeated string repeated_string = 44;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.repeated_string_.size());
  for (int i = 0, n = _impl_.repeated_string_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.repeated_string_.Get(i));
  }

  // repeated bytes repeated_bytes = 45;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.repeated_bytes_.size());
  for (int i = 0, n = _impl_.repeated_bytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.repeated_bytes_.Get(i));
  }

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage repeated_nested_message = 48;
  total_size += 2UL * this->_internal_repeated_nested_message_size();
  for (const auto& msg : this->_impl_.repeated_nested_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_test_messages.proto2.ForeignMessageProto2 repeated_foreign_message = 49;
  total_size += 2UL * this->_internal_repeated_foreign_message_size();
  for (const auto& msg : this->_impl_.repeated_foreign_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum repeated_nested_enum = 51;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_nested_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_repeated_nested_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .protobuf_test_messages.proto2.ForeignEnumProto2 repeated_foreign_enum = 52;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_foreign_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_repeated_foreign_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.repeated_string_piece_.size());
  for (int i = 0, n = _impl_.repeated_string_piece_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.repeated_string_piece_.Get(i));
  }

  // repeated string repeated_cord = 55 [ctype = CORD];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.repeated_cord_.size());
  for (int i = 0, n = _impl_.repeated_cord_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.repeated_cord_.Get(i));
  }

  // map<int32, int32> map_int32_int32 = 56;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_int32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_map_int32_int32().begin();
      it != this->_internal_map_int32_int32().end(); ++it) {
    total_size += TestAllTypesProto2_MapInt32Int32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int64, int64> map_int64_int64 = 57;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int64_int64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >::const_iterator
      it = this->_internal_map_int64_int64().begin();
      it != this->_internal_map_int64_int64().end(); ++it) {
    total_size += TestAllTypesProto2_MapInt64Int64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> map_uint32_uint32 = 58;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_uint32_uint32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_map_uint32_uint32().begin();
      it != this->_internal_map_uint32_uint32().end(); ++it) {
    total_size += TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, uint64> map_uint64_uint64 = 59;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_uint64_uint64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >::const_iterator
      it = this->_internal_map_uint64_uint64().begin();
      it != this->_internal_map_uint64_uint64().end(); ++it) {
    total_size += TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sint32, sint32> map_sint32_sint32 = 60;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sint32_sint32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_map_sint32_sint32().begin();
      it != this->_internal_map_sint32_sint32().end(); ++it) {
    total_size += TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sint64, sint64> map_sint64_sint64 = 61;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sint64_sint64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >::const_iterator
      it = this->_internal_map_sint64_sint64().begin();
      it != this->_internal_map_sint64_sint64().end(); ++it) {
    total_size += TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<fixed32, fixed32> map_fixed32_fixed32 = 62;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_fixed32_fixed32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_map_fixed32_fixed32().begin();
      it != this->_internal_map_fixed32_fixed32().end(); ++it) {
    total_size += TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<fixed64, fixed64> map_fixed64_fixed64 = 63;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_fixed64_fixed64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >::const_iterator
      it = this->_internal_map_fixed64_fixed64().begin();
      it != this->_internal_map_fixed64_fixed64().end(); ++it) {
    total_size += TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sfixed32, sfixed32> map_sfixed32_sfixed32 = 64;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sfixed32_sfixed32_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_map_sfixed32_sfixed32().begin();
      it != this->_internal_map_sfixed32_sfixed32().end(); ++it) {
    total_size += TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<sfixed64, sfixed64> map_sfixed64_sfixed64 = 65;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_sfixed64_sfixed64_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >::const_iterator
      it = this->_internal_map_sfixed64_sfixed64().begin();
      it != this->_internal_map_sfixed64_sfixed64().end(); ++it) {
    total_size += TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, float> map_int32_float = 66;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_float_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, float >::const_iterator
      it = this->_internal_map_int32_float().begin();
      it != this->_internal_map_int32_float().end(); ++it) {
    total_size += TestAllTypesProto2_MapInt32FloatEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, double> map_int32_double = 67;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_int32_double_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >::const_iterator
      it = this->_internal_map_int32_double().begin();
      it != this->_internal_map_int32_double().end(); ++it) {
    total_size += TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<bool, bool> map_bool_bool = 68;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_bool_bool_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< bool, bool >::const_iterator
      it = this->_internal_map_bool_bool().begin();
      it != this->_internal_map_bool_bool().end(); ++it) {
    total_size += TestAllTypesProto2_MapBoolBoolEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> map_string_string = 69;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_string_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_map_string_string().begin();
      it != this->_internal_map_string_string().end(); ++it) {
    total_size += TestAllTypesProto2_MapStringStringEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, bytes> map_string_bytes = 70;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_bytes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_map_string_bytes().begin();
      it != this->_internal_map_string_bytes().end(); ++it) {
    total_size += TestAllTypesProto2_MapStringBytesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage> map_string_nested_message = 71;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_nested_message_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >::const_iterator
      it = this->_internal_map_string_nested_message().begin();
      it != this->_internal_map_string_nested_message().end(); ++it) {
    total_size += TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .protobuf_test_messages.proto2.ForeignMessageProto2> map_string_foreign_message = 72;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_foreign_message_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignMessageProto2 >::const_iterator
      it = this->_internal_map_string_foreign_message().begin();
      it != this->_internal_map_string_foreign_message().end(); ++it) {
    total_size += TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum> map_string_nested_enum = 73;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_nested_enum_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedEnum >::const_iterator
      it = this->_internal_map_string_nested_enum().begin();
      it != this->_internal_map_string_nested_enum().end(); ++it) {
    total_size += TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .protobuf_test_messages.proto2.ForeignEnumProto2> map_string_foreign_enum = 74;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_string_foreign_enum_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protobuf_test_messages::proto2::ForeignEnumProto2 >::const_iterator
      it = this->_internal_map_string_foreign_enum().begin();
      it != this->_internal_map_string_foreign_enum().end(); ++it) {
    total_size += TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated int32 packed_int32 = 75 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.packed_int32_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._packed_int32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 packed_int64 = 76 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.packed_int64_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._packed_int64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 packed_uint32 = 77 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.packed_uint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._packed_uint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 packed_uint64 = 78 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.packed_uint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._packed_uint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 packed_sint32 = 79 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt32Size(this->_impl_.packed_sint32_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._packed_sint32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint64 packed_sint64 = 80 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt64Size(this->_impl_.packed_sint64_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._packed_sint64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed32 packed_fixed32 = 81 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_fixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated fixed64 packed_fixed64 = 82 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_fixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated sfixed32 packed_sfixed32 = 83 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_sfixed32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated sfixed64 packed_sfixed64 = 84 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_sfixed64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float packed_float = 85 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_float_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double packed_double = 86 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_double_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated bool packed_bool = 87 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_bool_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum packed_nested_enum = 88 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_packed_nested_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_packed_nested_enum(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._packed_nested_enum_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 unpacked_int32 = 89 [packed = false];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.unpacked_int32_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_int32_size());
    total_size += data_size;
  }

  // repeated int64 unpacked_int64 = 90 [packed = false];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.unpacked_int64_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_int64_size());
    total_size += data_size;
  }

  // repeated uint32 unpacked_uint32 = 91 [packed = false];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.unpacked_uint32_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_uint32_size());
    total_size += data_size;
  }

  // repeated uint64 unpacked_uint64 = 92 [packed = false];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.unpacked_uint64_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_uint64_size());
    total_size += data_size;
  }

  // repeated sint32 unpacked_sint32 = 93 [packed = false];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt32Size(this->_impl_.unpacked_sint32_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_sint32_size());
    total_size += data_size;
  }

  // repeated sint64 unpacked_sint64 = 94 [packed = false];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt64Size(this->_impl_.unpacked_sint64_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_sint64_size());
    total_size += data_size;
  }

  // repeated fixed32 unpacked_fixed32 = 95 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_fixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_fixed32_size());
    total_size += data_size;
  }

  // repeated fixed64 unpacked_fixed64 = 96 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_fixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_fixed64_size());
    total_size += data_size;
  }

  // repeated sfixed32 unpacked_sfixed32 = 97 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_sfixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_sfixed32_size());
    total_size += data_size;
  }

  // repeated sfixed64 unpacked_sfixed64 = 98 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_sfixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_sfixed64_size());
    total_size += data_size;
  }

  // repeated float unpacked_float = 99 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_float_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_float_size());
    total_size += data_size;
  }

  // repeated double unpacked_double = 100 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_double_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_double_size());
    total_size += data_size;
  }

  // repeated bool unpacked_bool = 101 [packed = false];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_bool_size());
    size_t data_size = 1UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_unpacked_bool_size());
    total_size += data_size;
  }

  // repeated .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum unpacked_nested_enum = 102 [packed = false];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_unpacked_nested_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_unpacked_nested_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string optional_string = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string());
    }

    // optional bytes optional_bytes = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_optional_bytes());
    }

    // optional string optional_string_piece = 24 [ctype = STRING_PIECE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string_piece());
    }

    // optional string optional_cord = 25 [ctype = CORD];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_cord());
    }

    // optional string default_string = 254 [default = "Rosebud"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_default_string());
    }

    // optional bytes default_bytes = 255 [default = "joshua"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_default_bytes());
    }

    // optional .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage optional_nested_message = 18;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.optional_nested_message_);
    }

    // optional .protobuf_test_messages.proto2.ForeignMessageProto2 optional_foreign_message = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.optional_foreign_message_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .protobuf_test_messages.proto2.TestAllTypesProto2 recursive_message = 27;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.recursive_message_);
    }

    // optional group Data = 201 { ... };
    if (cached_has_bits & 0x00000200u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *_impl_.data_);
    }

    // optional int64 optional_int64 = 2;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optional_int64());
    }

    // optional int32 optional_int32 = 1;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_optional_int32());
    }

    // optional uint32 optional_uint32 = 3;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_optional_uint32());
    }

    // optional uint64 optional_uint64 = 4;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_optional_uint64());
    }

    // optional sint64 optional_sint64 = 6;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_optional_sint64());
    }

    // optional sint32 optional_sint32 = 5;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_optional_sint32());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional fixed32 optional_fixed32 = 7;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional fixed64 optional_fixed64 = 8;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

    // optional sfixed64 optional_sfixed64 = 10;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 8;
    }

    // optional sfixed32 optional_sfixed32 = 9;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 4;
    }

    // optional float optional_float = 11;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 4;
    }

    // optional double optional_double = 12;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 8;
    }

    // optional bool optional_bool = 13;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 1;
    }

    // optional .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum optional_nested_enum = 21;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_optional_nested_enum());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .protobuf_test_messages.proto2.ForeignEnumProto2 optional_foreign_enum = 22;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_optional_foreign_enum());
    }

    // optional int32 fieldname1 = 401;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_fieldname1());
    }

    // optional int32 field_name2 = 402;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_field_name2());
    }

    // optional int32 _field_name3 = 403;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal__field_name3());
    }

    // optional int32 field__name4_ = 404;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_field__name4_());
    }

    // optional int32 field0name5 = 405;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_field0name5());
    }

    // optional int32 field_0_name6 = 406;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_field_0_name6());
    }

    // optional int32 fieldName7 = 407;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_fieldname7());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 FieldName8 = 408;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_fieldname8());
    }

    // optional int32 field_Name9 = 409;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_field_name9());
    }

    // optional int32 Field_Name10 = 410;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_field_name10());
    }

    // optional int32 FIELD_NAME11 = 411;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_field_name11());
    }

    // optional int32 FIELD_name12 = 412;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_field_name12());
    }

    // optional int32 __field_name13 = 413;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal___field_name13());
    }

    // optional int32 __Field_name14 = 414;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal___field_name14());
    }

    // optional int32 field__name15 = 415;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_field__name15());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 field__Name16 = 416;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_field__name16());
    }

    // optional int32 field_name17__ = 417;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_field_name17__());
    }

    // optional int32 Field_name18__ = 418;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_field_name18__());
    }

    // optional bool default_bool = 253 [default = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional int64 default_int64 = 242 [default = -9123456789123456789];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_default_int64());
    }

    // optional int32 default_int32 = 241 [default = -123456789];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_default_int32());
    }

    // optional uint32 default_uint32 = 243 [default = 2123456789];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_default_uint32());
    }

    // optional uint64 default_uint64 = 244 [default = 10123456789123456789];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_default_uint64());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional sint64 default_sint64 = 246 [default = -9123456789123456789];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::SInt64Size(
          this->_internal_default_sint64());
    }

    // optional sint32 default_sint32 = 245 [default = -123456789];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::SInt32Size(
          this->_internal_default_sint32());
    }

    // optional fixed32 default_fixed32 = 247 [default = 2123456789];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional fixed64 default_fixed64 = 248 [default = 10123456789123456789];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional sfixed64 default_sfixed64 = 250 [default = -9123456789123456789];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional sfixed32 default_sfixed32 = 249 [default = -123456789];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float default_float = 251 [default = 9e+009];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional double default_double = 252 [default = 7e+022];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  switch (oneof_field_case()) {
    // uint32 oneof_uint32 = 111;
    case kOneofUint32: {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_oneof_uint32());
      break;
    }
    // .protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage oneof_nested_message = 112;
    case kOneofNestedMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oneof_field_.oneof_nested_message_);
      break;
    }
    // string oneof_string = 113;
    case kOneofString: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oneof_string());
      break;
    }
    // bytes oneof_bytes = 114;
    case kOneofBytes: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_oneof_bytes());
      break;
    }
    // bool oneof_bool = 115;
    case kOneofBool: {
      total_size += 2 + 1;
      break;
    }
    // uint64 oneof_uint64 = 116;
    case kOneofUint64: {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_oneof_uint64());
      break;
    }
    // float oneof_float = 117;
    case kOneofFloat: {
      total_size += 2 + 4;
      break;
    }
    // double oneof_double = 118;
    case kOneofDouble: {
      total_size += 2 + 8;
      break;
    }
    // .protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum oneof_enum = 119;
    case kOneofEnum: {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_oneof_enum());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestAllTypesProto2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestAllTypesProto2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestAllTypesProto2::GetClassData() const { return &_class_data_; }


void TestAllTypesProto2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestAllTypesProto2*>(&to_msg);
  auto& from = static_cast<const TestAllTypesProto2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto2.TestAllTypesProto2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.repeated_int32_.MergeFrom(from._impl_.repeated_int32_);
  _this->_impl_.repeated_int64_.MergeFrom(from._impl_.repeated_int64_);
  _this->_impl_.repeated_uint32_.MergeFrom(from._impl_.repeated_uint32_);
  _this->_impl_.repeated_uint64_.MergeFrom(from._impl_.repeated_uint64_);
  _this->_impl_.repeated_sint32_.MergeFrom(from._impl_.repeated_sint32_);
  _this->_impl_.repeated_sint64_.MergeFrom(from._impl_.repeated_sint64_);
  _this->_impl_.repeated_fixed32_.MergeFrom(from._impl_.repeated_fixed32_);
  _this->_impl_.repeated_fixed64_.MergeFrom(from._impl_.repeated_fixed64_);
  _this->_impl_.repeated_sfixed32_.MergeFrom(from._impl_.repeated_sfixed32_);
  _this->_impl_.repeated_sfixed64_.MergeFrom(from._impl_.repeated_sfixed64_);
  _this->_impl_.repeated_float_.MergeFrom(from._impl_.repeated_float_);
  _this->_impl_.repeated_double_.MergeFrom(from._impl_.repeated_double_);
  _this->_impl_.repeated_bool_.MergeFrom(from._impl_.repeated_bool_);
  _this->_impl_.repeated_string_.MergeFrom(from._impl_.repeated_string_);
  _this->_impl_.repeated_bytes_.MergeFrom(from._impl_.repeated_bytes_);
  _this->_impl_.repeated_nested_message_.MergeFrom(from._impl_.repeated_nested_message_);
  _this->_impl_.repeated_foreign_message_.MergeFrom(from._impl_.repeated_foreign_message_);
  _this->_impl_.repeated_nested_enum_.MergeFrom(from._impl_.repeated_nested_enum_);
  _this->_impl_.repeated_foreign_enum_.MergeFrom(from._impl_.repeated_foreign_enum_);
  _this->_impl_.repeated_string_piece_.MergeFrom(from._impl_.repeated_string_piece_);
  _this->_impl_.repeated_cord_.MergeFrom(from._impl_.repeated_cord_);
  _this->_impl_.map_int32_int32_.MergeFrom(from._impl_.map_int32_int32_);
  _this->_impl_.map_int64_int64_.MergeFrom(from._impl_.map_int64_int64_);
  _this->_impl_.map_uint32_uint32_.MergeFrom(from._impl_.map_uint32_uint32_);
  _this->_impl_.map_uint64_uint64_.MergeFrom(from._impl_.map_uint64_uint64_);
  _this->_impl_.map_sint32_sint32_.MergeFrom(from._impl_.map_sint32_sint32_);
  _this->_impl_.map_sint64_sint64_.MergeFrom(from._impl_.map_sint64_sint64_);
  _this->_impl_.map_fixed32_fixed32_.MergeFrom(from._impl_.map_fixed32_fixed32_);
  _this->_impl_.map_fixed64_fixed64_.MergeFrom(from._impl_.map_fixed64_fixed64_);
  _this->_impl_.map_sfixed32_sfixed32_.MergeFrom(from._impl_.map_sfixed32_sfixed32_);
  _this->_impl_.map_sfixed64_sfixed64_.MergeFrom(from._impl_.map_sfixed64_sfixed64_);
  _this->_impl_.map_int32_float_.MergeFrom(from._impl_.map_int32_float_);
  _this->_impl_.map_int32_double_.MergeFrom(from._impl_.map_int32_double_);
  _this->_impl_.map_bool_bool_.MergeFrom(from._impl_.map_bool_bool_);
  _this->_impl_.map_string_string_.MergeFrom(from._impl_.map_string_string_);
  _this->_impl_.map_string_bytes_.MergeFrom(from._impl_.map_string_bytes_);
  _this->_impl_.map_string_nested_message_.MergeFrom(from._impl_.map_string_nested_message_);
  _this->_impl_.map_string_foreign_message_.MergeFrom(from._impl_.map_string_foreign_message_);
  _this->_impl_.map_string_nested_enum_.MergeFrom(from._impl_.map_string_nested_enum_);
  _this->_impl_.map_string_foreign_enum_.MergeFrom(from._impl_.map_string_foreign_enum_);
  _this->_impl_.packed_int32_.MergeFrom(from._impl_.packed_int32_);
  _this->_impl_.packed_int64_.MergeFrom(from._impl_.packed_int64_);
  _this->_impl_.packed_uint32_.MergeFrom(from._impl_.packed_uint32_);
  _this->_impl_.packed_uint64_.MergeFrom(from._impl_.packed_uint64_);
  _this->_impl_.packed_sint32_.MergeFrom(from._impl_.packed_sint32_);
  _this->_impl_.packed_sint64_.MergeFrom(from._impl_.packed_sint64_);
  _this->_impl_.packed_fixed32_.MergeFrom(from._impl_.packed_fixed32_);
  _this->_impl_.packed_fixed64_.MergeFrom(from._impl_.packed_fixed64_);
  _this->_impl_.packed_sfixed32_.MergeFrom(from._impl_.packed_sfixed32_);
  _this->_impl_.packed_sfixed64_.MergeFrom(from._impl_.packed_sfixed64_);
  _this->_impl_.packed_float_.MergeFrom(from._impl_.packed_float_);
  _this->_impl_.packed_double_.MergeFrom(from._impl_.packed_double_);
  _this->_impl_.packed_bool_.MergeFrom(from._impl_.packed_bool_);
  _this->_impl_.packed_nested_enum_.MergeFrom(from._impl_.packed_nested_enum_);
  _this->_impl_.unpacked_int32_.MergeFrom(from._impl_.unpacked_int32_);
  _this->_impl_.unpacked_int64_.MergeFrom(from._impl_.unpacked_int64_);
  _this->_impl_.unpacked_uint32_.MergeFrom(from._impl_.unpacked_uint32_);
  _this->_impl_.unpacked_uint64_.MergeFrom(from._impl_.unpacked_uint64_);
  _this->_impl_.unpacked_sint32_.MergeFrom(from._impl_.unpacked_sint32_);
  _this->_impl_.unpacked_sint64_.MergeFrom(from._impl_.unpacked_sint64_);
  _this->_impl_.unpacked_fixed32_.MergeFrom(from._impl_.unpacked_fixed32_);
  _this->_impl_.unpacked_fixed64_.MergeFrom(from._impl_.unpacked_fixed64_);
  _this->_impl_.unpacked_sfixed32_.MergeFrom(from._impl_.unpacked_sfixed32_);
  _this->_impl_.unpacked_sfixed64_.MergeFrom(from._impl_.unpacked_sfixed64_);
  _this->_impl_.unpacked_float_.MergeFrom(from._impl_.unpacked_float_);
  _this->_impl_.unpacked_double_.MergeFrom(from._impl_.unpacked_double_);
  _this->_impl_.unpacked_bool_.MergeFrom(from._impl_.unpacked_bool_);
  _this->_impl_.unpacked_nested_enum_.MergeFrom(from._impl_.unpacked_nested_enum_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_optional_string(from._internal_optional_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_optional_bytes(from._internal_optional_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_optional_string_piece(from._internal_optional_string_piece());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_optional_cord(from._internal_optional_cord());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_default_string(from._internal_default_string());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_default_bytes(from._internal_default_bytes());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_optional_nested_message()->::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage::MergeFrom(
          from._internal_optional_nested_message());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_optional_foreign_message()->::protobuf_test_messages::proto2::ForeignMessageProto2::MergeFrom(
          from._internal_optional_foreign_message());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_recursive_message()->::protobuf_test_messages::proto2::TestAllTypesProto2::MergeFrom(
          from._internal_recursive_message());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_data()->::protobuf_test_messages::proto2::TestAllTypesProto2_Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.optional_int64_ = from._impl_.optional_int64_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.optional_int32_ = from._impl_.optional_int32_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.optional_uint32_ = from._impl_.optional_uint32_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.optional_uint64_ = from._impl_.optional_uint64_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.optional_sint64_ = from._impl_.optional_sint64_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.optional_sint32_ = from._impl_.optional_sint32_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.optional_fixed32_ = from._impl_.optional_fixed32_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.optional_fixed64_ = from._impl_.optional_fixed64_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.optional_sfixed64_ = from._impl_.optional_sfixed64_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.optional_sfixed32_ = from._impl_.optional_sfixed32_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.optional_float_ = from._impl_.optional_float_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.optional_double_ = from._impl_.optional_double_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.optional_bool_ = from._impl_.optional_bool_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.optional_nested_enum_ = from._impl_.optional_nested_enum_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.optional_foreign_enum_ = from._impl_.optional_foreign_enum_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.fieldname1_ = from._impl_.fieldname1_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.field_name2_ = from._impl_.field_name2_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_._field_name3_ = from._impl_._field_name3_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.field__name4__ = from._impl_.field__name4__;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.field0name5_ = from._impl_.field0name5_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.field_0_name6_ = from._impl_.field_0_name6_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.fieldname7_ = from._impl_.fieldname7_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.fieldname8_ = from._impl_.fieldname8_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.field_name9_ = from._impl_.field_name9_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.field_name10_ = from._impl_.field_name10_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.field_name11_ = from._impl_.field_name11_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.field_name12_ = from._impl_.field_name12_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.__field_name13_ = from._impl_.__field_name13_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.__field_name14_ = from._impl_.__field_name14_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.field__name15_ = from._impl_.field__name15_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.field__name16_ = from._impl_.field__name16_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.field_name17___ = from._impl_.field_name17___;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.field_name18___ = from._impl_.field_name18___;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.default_bool_ = from._impl_.default_bool_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.default_int64_ = from._impl_.default_int64_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.default_int32_ = from._impl_.default_int32_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.default_uint32_ = from._impl_.default_uint32_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.default_uint64_ = from._impl_.default_uint64_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.default_sint64_ = from._impl_.default_sint64_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.default_sint32_ = from._impl_.default_sint32_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.default_fixed32_ = from._impl_.default_fixed32_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.default_fixed64_ = from._impl_.default_fixed64_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.default_sfixed64_ = from._impl_.default_sfixed64_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.default_sfixed32_ = from._impl_.default_sfixed32_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.default_float_ = from._impl_.default_float_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.default_double_ = from._impl_.default_double_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  switch (from.oneof_field_case()) {
    case kOneofUint32: {
      _this->_internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofNestedMessage: {
      _this->_internal_mutable_oneof_nested_message()->::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage::MergeFrom(
          from._internal_oneof_nested_message());
      break;
    }
    case kOneofString: {
      _this->_internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _this->_internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case kOneofBool: {
      _this->_internal_set_oneof_bool(from._internal_oneof_bool());
      break;
    }
    case kOneofUint64: {
      _this->_internal_set_oneof_uint64(from._internal_oneof_uint64());
      break;
    }
    case kOneofFloat: {
      _this->_internal_set_oneof_float(from._internal_oneof_float());
      break;
    }
    case kOneofDouble: {
      _this->_internal_set_oneof_double(from._internal_oneof_double());
      break;
    }
    case kOneofEnum: {
      _this->_internal_set_oneof_enum(from._internal_oneof_enum());
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestAllTypesProto2::CopyFrom(const TestAllTypesProto2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto2.TestAllTypesProto2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestAllTypesProto2::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.repeated_nested_message_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.map_string_nested_message_)) return false;
  if (_internal_has_optional_nested_message()) {
    if (!_impl_.optional_nested_message_->IsInitialized()) return false;
  }
  if (_internal_has_recursive_message()) {
    if (!_impl_.recursive_message_->IsInitialized()) return false;
  }
  switch (oneof_field_case()) {
    case kOneofUint32: {
      break;
    }
    case kOneofNestedMessage: {
      if (_internal_has_oneof_nested_message()) {
        if (!_impl_.oneof_field_.oneof_nested_message_->IsInitialized()) return false;
      }
      break;
    }
    case kOneofString: {
      break;
    }
    case kOneofBytes: {
      break;
    }
    case kOneofBool: {
      break;
    }
    case kOneofUint64: {
      break;
    }
    case kOneofFloat: {
      break;
    }
    case kOneofDouble: {
      break;
    }
    case kOneofEnum: {
      break;
    }
    case ONEOF_FIELD_NOT_SET: {
      break;
    }
  }
  return true;
}

void TestAllTypesProto2::InternalSwap(TestAllTypesProto2* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.repeated_int32_.InternalSwap(&other->_impl_.repeated_int32_);
  _impl_.repeated_int64_.InternalSwap(&other->_impl_.repeated_int64_);
  _impl_.repeated_uint32_.InternalSwap(&other->_impl_.repeated_uint32_);
  _impl_.repeated_uint64_.InternalSwap(&other->_impl_.repeated_uint64_);
  _impl_.repeated_sint32_.InternalSwap(&other->_impl_.repeated_sint32_);
  _impl_.repeated_sint64_.InternalSwap(&other->_impl_.repeated_sint64_);
  _impl_.repeated_fixed32_.InternalSwap(&other->_impl_.repeated_fixed32_);
  _impl_.repeated_fixed64_.InternalSwap(&other->_impl_.repeated_fixed64_);
  _impl_.repeated_sfixed32_.InternalSwap(&other->_impl_.repeated_sfixed32_);
  _impl_.repeated_sfixed64_.InternalSwap(&other->_impl_.repeated_sfixed64_);
  _impl_.repeated_float_.InternalSwap(&other->_impl_.repeated_float_);
  _impl_.repeated_double_.InternalSwap(&other->_impl_.repeated_double_);
  _impl_.repeated_bool_.InternalSwap(&other->_impl_.repeated_bool_);
  _impl_.repeated_string_.InternalSwap(&other->_impl_.repeated_string_);
  _impl_.repeated_bytes_.InternalSwap(&other->_impl_.repeated_bytes_);
  _impl_.repeated_nested_message_.InternalSwap(&other->_impl_.repeated_nested_message_);
  _impl_.repeated_foreign_message_.InternalSwap(&other->_impl_.repeated_foreign_message_);
  _impl_.repeated_nested_enum_.InternalSwap(&other->_impl_.repeated_nested_enum_);
  _impl_.repeated_foreign_enum_.InternalSwap(&other->_impl_.repeated_foreign_enum_);
  _impl_.repeated_string_piece_.InternalSwap(&other->_impl_.repeated_string_piece_);
  _impl_.repeated_cord_.InternalSwap(&other->_impl_.repeated_cord_);
  _impl_.map_int32_int32_.InternalSwap(&other->_impl_.map_int32_int32_);
  _impl_.map_int64_int64_.InternalSwap(&other->_impl_.map_int64_int64_);
  _impl_.map_uint32_uint32_.InternalSwap(&other->_impl_.map_uint32_uint32_);
  _impl_.map_uint64_uint64_.InternalSwap(&other->_impl_.map_uint64_uint64_);
  _impl_.map_sint32_sint32_.InternalSwap(&other->_impl_.map_sint32_sint32_);
  _impl_.map_sint64_sint64_.InternalSwap(&other->_impl_.map_sint64_sint64_);
  _impl_.map_fixed32_fixed32_.InternalSwap(&other->_impl_.map_fixed32_fixed32_);
  _impl_.map_fixed64_fixed64_.InternalSwap(&other->_impl_.map_fixed64_fixed64_);
  _impl_.map_sfixed32_sfixed32_.InternalSwap(&other->_impl_.map_sfixed32_sfixed32_);
  _impl_.map_sfixed64_sfixed64_.InternalSwap(&other->_impl_.map_sfixed64_sfixed64_);
  _impl_.map_int32_float_.InternalSwap(&other->_impl_.map_int32_float_);
  _impl_.map_int32_double_.InternalSwap(&other->_impl_.map_int32_double_);
  _impl_.map_bool_bool_.InternalSwap(&other->_impl_.map_bool_bool_);
  _impl_.map_string_string_.InternalSwap(&other->_impl_.map_string_string_);
  _impl_.map_string_bytes_.InternalSwap(&other->_impl_.map_string_bytes_);
  _impl_.map_string_nested_message_.InternalSwap(&other->_impl_.map_string_nested_message_);
  _impl_.map_string_foreign_message_.InternalSwap(&other->_impl_.map_string_foreign_message_);
  _impl_.map_string_nested_enum_.InternalSwap(&other->_impl_.map_string_nested_enum_);
  _impl_.map_string_foreign_enum_.InternalSwap(&other->_impl_.map_string_foreign_enum_);
  _impl_.packed_int32_.InternalSwap(&other->_impl_.packed_int32_);
  _impl_.packed_int64_.InternalSwap(&other->_impl_.packed_int64_);
  _impl_.packed_uint32_.InternalSwap(&other->_impl_.packed_uint32_);
  _impl_.packed_uint64_.InternalSwap(&other->_impl_.packed_uint64_);
  _impl_.packed_sint32_.InternalSwap(&other->_impl_.packed_sint32_);
  _impl_.packed_sint64_.InternalSwap(&other->_impl_.packed_sint64_);
  _impl_.packed_fixed32_.InternalSwap(&other->_impl_.packed_fixed32_);
  _impl_.packed_fixed64_.InternalSwap(&other->_impl_.packed_fixed64_);
  _impl_.packed_sfixed32_.InternalSwap(&other->_impl_.packed_sfixed32_);
  _impl_.packed_sfixed64_.InternalSwap(&other->_impl_.packed_sfixed64_);
  _impl_.packed_float_.InternalSwap(&other->_impl_.packed_float_);
  _impl_.packed_double_.InternalSwap(&other->_impl_.packed_double_);
  _impl_.packed_bool_.InternalSwap(&other->_impl_.packed_bool_);
  _impl_.packed_nested_enum_.InternalSwap(&other->_impl_.packed_nested_enum_);
  _impl_.unpacked_int32_.InternalSwap(&other->_impl_.unpacked_int32_);
  _impl_.unpacked_int64_.InternalSwap(&other->_impl_.unpacked_int64_);
  _impl_.unpacked_uint32_.InternalSwap(&other->_impl_.unpacked_uint32_);
  _impl_.unpacked_uint64_.InternalSwap(&other->_impl_.unpacked_uint64_);
  _impl_.unpacked_sint32_.InternalSwap(&other->_impl_.unpacked_sint32_);
  _impl_.unpacked_sint64_.InternalSwap(&other->_impl_.unpacked_sint64_);
  _impl_.unpacked_fixed32_.InternalSwap(&other->_impl_.unpacked_fixed32_);
  _impl_.unpacked_fixed64_.InternalSwap(&other->_impl_.unpacked_fixed64_);
  _impl_.unpacked_sfixed32_.InternalSwap(&other->_impl_.unpacked_sfixed32_);
  _impl_.unpacked_sfixed64_.InternalSwap(&other->_impl_.unpacked_sfixed64_);
  _impl_.unpacked_float_.InternalSwap(&other->_impl_.unpacked_float_);
  _impl_.unpacked_double_.InternalSwap(&other->_impl_.unpacked_double_);
  _impl_.unpacked_bool_.InternalSwap(&other->_impl_.unpacked_bool_);
  _impl_.unpacked_nested_enum_.InternalSwap(&other->_impl_.unpacked_nested_enum_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optional_string_, lhs_arena,
      &other->_impl_.optional_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optional_bytes_, lhs_arena,
      &other->_impl_.optional_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optional_string_piece_, lhs_arena,
      &other->_impl_.optional_string_piece_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optional_cord_, lhs_arena,
      &other->_impl_.optional_cord_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.default_string_, lhs_arena,
      &other->_impl_.default_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.default_bytes_, lhs_arena,
      &other->_impl_.default_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestAllTypesProto2, _impl_.field_name18___)
      + sizeof(TestAllTypesProto2::_impl_.field_name18___)
      - PROTOBUF_FIELD_OFFSET(TestAllTypesProto2, _impl_.optional_nested_message_)>(
          reinterpret_cast<char*>(&_impl_.optional_nested_message_),
          reinterpret_cast<char*>(&other->_impl_.optional_nested_message_));
  swap(_impl_.default_bool_, other->_impl_.default_bool_);
  swap(_impl_.default_int64_, other->_impl_.default_int64_);
  swap(_impl_.default_int32_, other->_impl_.default_int32_);
  swap(_impl_.default_uint32_, other->_impl_.default_uint32_);
  swap(_impl_.default_uint64_, other->_impl_.default_uint64_);
  swap(_impl_.default_sint64_, other->_impl_.default_sint64_);
  swap(_impl_.default_sint32_, other->_impl_.default_sint32_);
  swap(_impl_.default_fixed32_, other->_impl_.default_fixed32_);
  swap(_impl_.default_fixed64_, other->_impl_.default_fixed64_);
  swap(_impl_.default_sfixed64_, other->_impl_.default_sfixed64_);
  swap(_impl_.default_sfixed32_, other->_impl_.default_sfixed32_);
  swap(_impl_.default_float_, other->_impl_.default_float_);
  swap(_impl_.default_double_, other->_impl_.default_double_);
  swap(_impl_.oneof_field_, other->_impl_.oneof_field_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestAllTypesProto2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[24]);
}

// ===================================================================

class ForeignMessageProto2::_Internal {
 public:
  using HasBits = decltype(std::declval<ForeignMessageProto2>()._impl_._has_bits_);
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ForeignMessageProto2::ForeignMessageProto2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.ForeignMessageProto2)
}
ForeignMessageProto2::ForeignMessageProto2(const ForeignMessageProto2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ForeignMessageProto2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.c_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.c_ = from._impl_.c_;
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.ForeignMessageProto2)
}

inline void ForeignMessageProto2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.c_){0}
  };
}

ForeignMessageProto2::~ForeignMessageProto2() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto2.ForeignMessageProto2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForeignMessageProto2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ForeignMessageProto2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ForeignMessageProto2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto2.ForeignMessageProto2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.c_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForeignMessageProto2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 c = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_c(&has_bits);
          _impl_.c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForeignMessageProto2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto2.ForeignMessageProto2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 c = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto2.ForeignMessageProto2)
  return target;
}

size_t ForeignMessageProto2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto2.ForeignMessageProto2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 c = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_c());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForeignMessageProto2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ForeignMessageProto2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForeignMessageProto2::GetClassData() const { return &_class_data_; }


void ForeignMessageProto2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ForeignMessageProto2*>(&to_msg);
  auto& from = static_cast<const ForeignMessageProto2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto2.ForeignMessageProto2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_c()) {
    _this->_internal_set_c(from._internal_c());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForeignMessageProto2::CopyFrom(const ForeignMessageProto2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto2.ForeignMessageProto2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForeignMessageProto2::IsInitialized() const {
  return true;
}

void ForeignMessageProto2::InternalSwap(ForeignMessageProto2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.c_, other->_impl_.c_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForeignMessageProto2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[25]);
}

// ===================================================================

class UnknownToTestAllTypes_OptionalGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<UnknownToTestAllTypes_OptionalGroup>()._impl_._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnknownToTestAllTypes_OptionalGroup::UnknownToTestAllTypes_OptionalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
}
UnknownToTestAllTypes_OptionalGroup::UnknownToTestAllTypes_OptionalGroup(const UnknownToTestAllTypes_OptionalGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnknownToTestAllTypes_OptionalGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.a_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.a_ = from._impl_.a_;
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
}

inline void UnknownToTestAllTypes_OptionalGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.a_){0}
  };
}

UnknownToTestAllTypes_OptionalGroup::~UnknownToTestAllTypes_OptionalGroup() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnknownToTestAllTypes_OptionalGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnknownToTestAllTypes_OptionalGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnknownToTestAllTypes_OptionalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.a_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnknownToTestAllTypes_OptionalGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnknownToTestAllTypes_OptionalGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
  return target;
}

size_t UnknownToTestAllTypes_OptionalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnknownToTestAllTypes_OptionalGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnknownToTestAllTypes_OptionalGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnknownToTestAllTypes_OptionalGroup::GetClassData() const { return &_class_data_; }


void UnknownToTestAllTypes_OptionalGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnknownToTestAllTypes_OptionalGroup*>(&to_msg);
  auto& from = static_cast<const UnknownToTestAllTypes_OptionalGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _this->_internal_set_a(from._internal_a());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnknownToTestAllTypes_OptionalGroup::CopyFrom(const UnknownToTestAllTypes_OptionalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownToTestAllTypes_OptionalGroup::IsInitialized() const {
  return true;
}

void UnknownToTestAllTypes_OptionalGroup::InternalSwap(UnknownToTestAllTypes_OptionalGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.a_, other->_impl_.a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnknownToTestAllTypes_OptionalGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[26]);
}

// ===================================================================

class UnknownToTestAllTypes::_Internal {
 public:
  using HasBits = decltype(std::declval<UnknownToTestAllTypes>()._impl_._has_bits_);
  static void set_has_optional_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_optional_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protobuf_test_messages::proto2::ForeignMessageProto2& nested_message(const UnknownToTestAllTypes* msg);
  static void set_has_nested_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup& optionalgroup(const UnknownToTestAllTypes* msg);
  static void set_has_optionalgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_optional_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::protobuf_test_messages::proto2::ForeignMessageProto2&
UnknownToTestAllTypes::_Internal::nested_message(const UnknownToTestAllTypes* msg) {
  return *msg->_impl_.nested_message_;
}
const ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup&
UnknownToTestAllTypes::_Internal::optionalgroup(const UnknownToTestAllTypes* msg) {
  return *msg->_impl_.optionalgroup_;
}
UnknownToTestAllTypes::UnknownToTestAllTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.UnknownToTestAllTypes)
}
UnknownToTestAllTypes::UnknownToTestAllTypes(const UnknownToTestAllTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnknownToTestAllTypes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.repeated_int32_){from._impl_.repeated_int32_}
    , decltype(_impl_.optional_string_){}
    , decltype(_impl_.nested_message_){nullptr}
    , decltype(_impl_.optionalgroup_){nullptr}
    , decltype(_impl_.optional_int32_){}
    , decltype(_impl_.optional_bool_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.optional_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_optional_string()) {
    _this->_impl_.optional_string_.Set(from._internal_optional_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_nested_message()) {
    _this->_impl_.nested_message_ = new ::protobuf_test_messages::proto2::ForeignMessageProto2(*from._impl_.nested_message_);
  }
  if (from._internal_has_optionalgroup()) {
    _this->_impl_.optionalgroup_ = new ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup(*from._impl_.optionalgroup_);
  }
  ::memcpy(&_impl_.optional_int32_, &from._impl_.optional_int32_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.optional_bool_) -
    reinterpret_cast<char*>(&_impl_.optional_int32_)) + sizeof(_impl_.optional_bool_));
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.UnknownToTestAllTypes)
}

inline void UnknownToTestAllTypes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.repeated_int32_){arena}
    , decltype(_impl_.optional_string_){}
    , decltype(_impl_.nested_message_){nullptr}
    , decltype(_impl_.optionalgroup_){nullptr}
    , decltype(_impl_.optional_int32_){0}
    , decltype(_impl_.optional_bool_){false}
  };
  _impl_.optional_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.optional_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnknownToTestAllTypes::~UnknownToTestAllTypes() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto2.UnknownToTestAllTypes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnknownToTestAllTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.repeated_int32_.~RepeatedField();
  _impl_.optional_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.nested_message_;
  if (this != internal_default_instance()) delete _impl_.optionalgroup_;
}

void UnknownToTestAllTypes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnknownToTestAllTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto2.UnknownToTestAllTypes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.repeated_int32_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.optional_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.nested_message_ != nullptr);
      _impl_.nested_message_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.optionalgroup_ != nullptr);
      _impl_.optionalgroup_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.optional_int32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.optional_bool_) -
        reinterpret_cast<char*>(&_impl_.optional_int32_)) + sizeof(_impl_.optional_bool_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnknownToTestAllTypes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 optional_int32 = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_optional_int32(&has_bits);
          _impl_.optional_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string optional_string = 1002;
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_optional_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_test_messages.proto2.UnknownToTestAllTypes.optional_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .protobuf_test_messages.proto2.ForeignMessageProto2 nested_message = 1003;
      case 1003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_nested_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional group OptionalGroup = 1004 { ... };
      case 1004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 99)) {
          ptr = ctx->ParseGroup(_internal_mutable_optionalgroup(), ptr, 8035);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool optional_bool = 1006;
      case 1006:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_optional_bool(&has_bits);
          _impl_.optional_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 repeated_int32 = 1011;
      case 1011:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8088>(ptr));
        } else if (static_cast<uint8_t>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnknownToTestAllTypes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto2.UnknownToTestAllTypes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 optional_int32 = 1001;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1001, this->_internal_optional_int32(), target);
  }

  // optional string optional_string = 1002;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_string().data(), static_cast<int>(this->_internal_optional_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_test_messages.proto2.UnknownToTestAllTypes.optional_string");
    target = stream->WriteStringMaybeAliased(
        1002, this->_internal_optional_string(), target);
  }

  // optional .protobuf_test_messages.proto2.ForeignMessageProto2 nested_message = 1003;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1003, _Internal::nested_message(this),
        _Internal::nested_message(this).GetCachedSize(), target, stream);
  }

  // optional group OptionalGroup = 1004 { ... };
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        1004, _Internal::optionalgroup(this), target, stream);
  }

  // optional bool optional_bool = 1006;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1006, this->_internal_optional_bool(), target);
  }

  // repeated int32 repeated_int32 = 1011;
  for (int i = 0, n = this->_internal_repeated_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1011, this->_internal_repeated_int32(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto2.UnknownToTestAllTypes)
  return target;
}

size_t UnknownToTestAllTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto2.UnknownToTestAllTypes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 repeated_int32 = 1011;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.repeated_int32_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_repeated_int32_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string optional_string = 1002;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string());
    }

    // optional .protobuf_test_messages.proto2.ForeignMessageProto2 nested_message = 1003;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.nested_message_);
    }

    // optional group OptionalGroup = 1004 { ... };
    if (cached_has_bits & 0x00000004u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *_impl_.optionalgroup_);
    }

    // optional int32 optional_int32 = 1001;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_optional_int32());
    }

    // optional bool optional_bool = 1006;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnknownToTestAllTypes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnknownToTestAllTypes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnknownToTestAllTypes::GetClassData() const { return &_class_data_; }


void UnknownToTestAllTypes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnknownToTestAllTypes*>(&to_msg);
  auto& from = static_cast<const UnknownToTestAllTypes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto2.UnknownToTestAllTypes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.repeated_int32_.MergeFrom(from._impl_.repeated_int32_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_optional_string(from._internal_optional_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_nested_message()->::protobuf_test_messages::proto2::ForeignMessageProto2::MergeFrom(
          from._internal_nested_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_optionalgroup()->::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup::MergeFrom(
          from._internal_optionalgroup());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.optional_int32_ = from._impl_.optional_int32_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.optional_bool_ = from._impl_.optional_bool_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnknownToTestAllTypes::CopyFrom(const UnknownToTestAllTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto2.UnknownToTestAllTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownToTestAllTypes::IsInitialized() const {
  return true;
}

void UnknownToTestAllTypes::InternalSwap(UnknownToTestAllTypes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.repeated_int32_.InternalSwap(&other->_impl_.repeated_int32_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.optional_string_, lhs_arena,
      &other->_impl_.optional_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnknownToTestAllTypes, _impl_.optional_bool_)
      + sizeof(UnknownToTestAllTypes::_impl_.optional_bool_)
      - PROTOBUF_FIELD_OFFSET(UnknownToTestAllTypes, _impl_.nested_message_)>(
          reinterpret_cast<char*>(&_impl_.nested_message_),
          reinterpret_cast<char*>(&other->_impl_.nested_message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnknownToTestAllTypes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[27]);
}

// ===================================================================

class NullHypothesisProto2::_Internal {
 public:
};

NullHypothesisProto2::NullHypothesisProto2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.NullHypothesisProto2)
}
NullHypothesisProto2::NullHypothesisProto2(const NullHypothesisProto2& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  NullHypothesisProto2* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.NullHypothesisProto2)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NullHypothesisProto2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NullHypothesisProto2::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata NullHypothesisProto2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[28]);
}

// ===================================================================

class EnumOnlyProto2::_Internal {
 public:
};

EnumOnlyProto2::EnumOnlyProto2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.EnumOnlyProto2)
}
EnumOnlyProto2::EnumOnlyProto2(const EnumOnlyProto2& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  EnumOnlyProto2* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.EnumOnlyProto2)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnumOnlyProto2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnumOnlyProto2::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata EnumOnlyProto2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[29]);
}

// ===================================================================

class OneStringProto2::_Internal {
 public:
  using HasBits = decltype(std::declval<OneStringProto2>()._impl_._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OneStringProto2::OneStringProto2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuf_test_messages.proto2.OneStringProto2)
}
OneStringProto2::OneStringProto2(const OneStringProto2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OneStringProto2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_test_messages.proto2.OneStringProto2)
}

inline void OneStringProto2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OneStringProto2::~OneStringProto2() {
  // @@protoc_insertion_point(destructor:protobuf_test_messages.proto2.OneStringProto2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OneStringProto2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void OneStringProto2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OneStringProto2::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_test_messages.proto2.OneStringProto2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OneStringProto2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "protobuf_test_messages.proto2.OneStringProto2.data");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OneStringProto2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_test_messages.proto2.OneStringProto2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_test_messages.proto2.OneStringProto2.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_test_messages.proto2.OneStringProto2)
  return target;
}

size_t OneStringProto2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_test_messages.proto2.OneStringProto2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string data = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OneStringProto2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OneStringProto2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OneStringProto2::GetClassData() const { return &_class_data_; }


void OneStringProto2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OneStringProto2*>(&to_msg);
  auto& from = static_cast<const OneStringProto2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuf_test_messages.proto2.OneStringProto2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OneStringProto2::CopyFrom(const OneStringProto2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_test_messages.proto2.OneStringProto2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneStringProto2::IsInitialized() const {
  return true;
}

void OneStringProto2::InternalSwap(OneStringProto2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OneStringProto2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_getter, &descriptor_table_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto_once,
      file_level_metadata_google_2fprotobuf_2ftest_5fmessages_5fproto2_2eproto[30]);
}
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestAllTypesProto2_MessageSetCorrectExtension1::kMessageSetExtensionFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1 >, 11, false>
  TestAllTypesProto2_MessageSetCorrectExtension1::message_set_extension(kMessageSetExtensionFieldNumber, ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int TestAllTypesProto2_MessageSetCorrectExtension2::kMessageSetExtensionFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2 >, 11, false>
  TestAllTypesProto2_MessageSetCorrectExtension2::message_set_extension(kMessageSetExtensionFieldNumber, ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_test_messages::proto2::TestAllTypesProto2,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false>
  extension_int32(kExtensionInt32FieldNumber, 0, nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto2
}  // namespace protobuf_test_messages
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_NestedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32Int32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt64Int64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint32Uint32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapUint64Uint64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint32Sint32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSint64Sint64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed32Fixed32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapFixed64Fixed64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed32Sfixed32Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapSfixed64Sfixed64Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32FloatEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapInt32DoubleEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapBoolBoolEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringStringEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringBytesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedMessageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignMessageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringNestedEnumEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MapStringForeignEnumEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_Data*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrect >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension1 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2_MessageSetCorrectExtension2 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::TestAllTypesProto2*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::TestAllTypesProto2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::TestAllTypesProto2 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::ForeignMessageProto2*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::ForeignMessageProto2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::ForeignMessageProto2 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::UnknownToTestAllTypes_OptionalGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::UnknownToTestAllTypes*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::UnknownToTestAllTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::UnknownToTestAllTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::NullHypothesisProto2*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::NullHypothesisProto2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::NullHypothesisProto2 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::EnumOnlyProto2*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::EnumOnlyProto2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::EnumOnlyProto2 >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_test_messages::proto2::OneStringProto2*
Arena::CreateMaybeMessage< ::protobuf_test_messages::proto2::OneStringProto2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_test_messages::proto2::OneStringProto2 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
